@inject FilesIServices sev
@inject IJSRuntime JS
<div>
    <!-- Dropzone CSS -->
    <link href="/assets/libs/tabler/libs/dropzone/dist/dropzone.css" rel="stylesheet" />

    <!-- Dropzone Upload Form -->
    <form class="dropzone mb-5" id="dropzone-default" autocomplete="off" novalidate>
        <div class="fallback">
            <input @bind="UploadedFile" type="file" accept="image/*" />
        </div>
    </form>

    <!-- Media Table -->
    <div class="card">
        <div class="card-body">
            <div id="table-default">

                <div class="d-grid" style="grid-template-columns: repeat(7, 1fr); gap: 16px">
                    @if (listFiles != null)
                    {
                        @foreach (var file in listFiles)
                        {
                            <div class="image-item" data-name="@file.Name" data-id="@file.Id">
                                <button type="button" class="btn btn-default p-0 m-0 btn-choose-image" data-bs-toggle="modal" data-bs-target="#file-@file.Id" style="width: 100%">
                                    <img src="@file.Path" class="w-100 object-fit-cover" alt="IMG" height="150" />

                                    <span class="checked">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                             fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                             stroke-linejoin="round"
                                             class="icon icon-tabler icons-tabler-outline icon-tabler-check">
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                            <path d="M5 12l5 5l10 -10" />
                                        </svg>
                                    </span>
                                </button>
                                <div class="modal" id="file-@file.Id" tabindex="-1" role="dialog" aria-labelledby="fileModalLabel-@file.Id" aria-hidden="true">
                                    <div class="modal-dialog modal-xl" role="document">
                                        <div class="modal-content">
                                            <div class="modal-body">
                                                <div class="row">
                                                    <div class="col-12 col-md-6">
                                                        <img src="@file.Path" class="w-100 object-fit-contain" style="height: 444px" alt="@file.Name" />
                                                    </div>
                                                    <div class="col-12 col-md-6">
                                                        <p>Đã tải lên vào lúc: @(file.Created_at.HasValue ? file.Created_at.Value.ToString("dd/MM/yyyy HH:mm:ss") : "N/A")</p>
                                                        <p>Tên tập tin: @file.Name</p>
                                                        <p>Loại tập tin: @file.Mine</p>
                                                        <p>Kích thước: @file.Size KB</p>
                                                        <p>File URL: <a href="@file.Path" target="_blank">@file.Path</a></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                                                <button type="button" class="btn btn-danger" @onclick="() => DeleteFile(file.Id)">Xóa</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Dropzone JS -->
    <script src="/assets/libs/tabler/libs/dropzone/dist/dropzone-min.js" defer></script>
    @code {
        private List<Files> listFiles = new();
        private async Task DeleteFile(long id)
        {
            try
            {
                await sev.Delete(id);
                listFiles = await sev.GetAll();
                await JS.InvokeVoidAsync("toastr.success", "File deleted successfully.");
                await JS.InvokeVoidAsync("removeModalBackdrop");

                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("toastr.error", "Failed to delete file.");
                Console.Error.WriteLine($"Error deleting file: {ex.Message}");
            }
        }
    }

    <!-- Script to initialize Dropzone and handle media actions -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            new Dropzone("#dropzone-default", {
                url: '/admin/media',
                autoProcessQueue: true,
                acceptedFiles: 'image/*',
                maxFilesize: 10 * 1024, // 10 MB
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                success: async function (file, response) {
                    const res = await fetch('/admin/media/datatable?type=in_component', {
                        method: 'GET'
                    });
                    const data = await res.text();
                    document.getElementById('table-default').innerHTML = data;
                    this.removeFile(file);
                    alert('Upload thành công');
                },
                error: function (file, message) {
                    alert('Error: ' + message.message);
                }
            });

            // Pagination
            document.querySelectorAll('.pagination .page-item a.page-link').forEach((link) => {
                link.addEventListener('click', async function (e) {
                    e.preventDefault();
                    let page = link.innerText;
                    let currentPage = document.querySelector('.pagination .page-item.active .page-link').innerText;

                    if (page === '›') {
                        page = parseInt(currentPage) + 1;
                    } else if (page === '‹') {
                        page = parseInt(currentPage) - 1;
                    }

                    const res = await fetch('/admin/media/datatable?page=' + page, {
                        method: 'GET'
                    });
                    const data = await res.text();
                    document.getElementById('table-default').innerHTML = data;
                });
            });
        });
    </script>
</div>

@code {
    private string? MediaTable { get; set; }
    private IBrowserFile? UploadedFile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadMediaTable();
    }

    private async Task LoadMediaTable()
    {

    }
}
