@* 
@inject IDesignerServices sev
@inject NavigationManager nav
@inject IJSRuntime JS


<div class="page-wrapper">
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row 
                g-2 align-items-center">
                <div class="col">
                    <h2 class="page-title">
                        Thêm nhà thiết kế
                    </h2>
                </div>
            </div>
        </div>
    </div>
    <div class="page-body">
        <div class="container-xl">
            <EditForm Model="designer" OnValidSubmit="SubmitForm" enctype="multipart/form-data">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
                <div class="row">
                    <div class="col-md-9 col-12">
                        <!-- Gọi form_left -->
                        <div class="card">
                            <div class="card-body">
                                <!-- Các trường dữ liệu cho form_left -->
                                <div class="mb-3">
                                    <label for="ShortName" class="form-label">Tên ngắn nhà thiết kế</label>
                                    <InputText @bind-Value="designer.ShortName" class="form-control" id="ShortName" placeholder="Tên ngắn nhà thiết kế" required />
                                </div>

                                <div class="mb-3">
                                    <label for="Name" class="form-label">Tên nhà thiết kế <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="designer.Name" class="form-control" id="Name" placeholder="Tên nhà thiết kế" required />
                                </div>

                                <div class="mb-3">
                                    <label for="Slug" class="form-label">Đường dẫn <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="designer.slug" class="form-control" id="Slug" placeholder="Đường dẫn" required />
                                </div>

                                <div class="mb-3">
                                    <label for="ShortDescription" class="form-label">Mô tả ngắn</label>
                                    <InputTextArea @bind-Value="designer.short_description" class="form-control" id="ShortDescription" rows="3" />
                                </div>

                                <div class="mb-3">
                                    <label for="tinymce-textarea" class="form-label">Mô tả</label>
                                    <textarea id="tinymce-textarea" @bind="designer.description" class="form-control" rows="7"></textarea>
                                </div>

                            </div>
                        </div>

                        <div class="card mt-3">
                            <div class="card-body">
                                <!-- Các trường meta data cho form_left -->
                                <div class="mb-3">
                                    <label for="Facebook" class="form-label">Facebook</label>
                                    <InputText @bind-Value="metaData.facebook" class="form-control" id="Facebook" placeholder="Link facebook" />
                                </div>

                                <div class="mb-3">
                                    <label for="Twitter" class="form-label">Twitter</label>
                                    <InputText @bind-Value="metaData.twitter" class="form-control" id="Twitter" placeholder="Link twitter" />
                                </div>

                                <div class="mb-3">
                                    <label for="Instagram" class="form-label">Instagram</label>
                                    <InputText @bind-Value="metaData.instagram" class="form-control" id="Instagram" placeholder="Link instagram" />
                                </div>

                                <div class="mb-3">
                                    <label for="Youtube" class="form-label">Youtube</label>
                                    <InputText @bind-Value="metaData.youtube" class="form-control" id="Youtube" placeholder="Link youtube" />
                                </div>

                                <div class="mb-3">
                                    <label for="Tiktok" class="form-label">Tiktok</label>
                                    <InputText @bind-Value="metaData.tiktok" class="form-control" id="Tiktok" placeholder="Link tiktok" />
                                </div>

                                <div class="mb-3">
                                    <label for="Linkedin" class="form-label">Linkedin</label>
                                    <InputText @bind-Value="metaData.linkedin" class="form-control" id="Linkedin" placeholder="Link linkedin" />
                                </div>

                                <div class="mb-3">
                                    <label for="Pinterest" class="form-label">Pinterest</label>
                                    <InputText @bind-Value="metaData.pinterest" class="form-control" id="Pinterest" placeholder="Link pinterest" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-3 col-12">
                        <!-- Gọi form_right -->
                        <div class="sticky-top position-sticky">
                            <div class="accordion bg-white mb-3 mt-3 mt-md-0">
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#action-1" aria-expanded="true">
                                            Đăng
                                        </button>
                                    </h2>
                                    <div id="action-1" class="accordion-collapse collapse show">
                                        <div class="accordion-body">
                                            <div class="form-group mb-3">
                                                <label class="form-label">Trạng thái</label>
                                                <select @bind="designer.status" class="form-control">
                                                    @foreach (var status in statuses)
                                                    {
                                                        <option value="@status.Key" selected="@(designer.status == status.Key)">@status.Value</option>
                                                    }
                                                </select>
                                            </div>
                                            <button type="button" class="btn btn-primary" style="float: right" @onclick="SubmitForm">Đăng</button>
                                            <div class="clearfix"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="accordion bg-white mb-3">
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#designerImage" aria-expanded="true">
                                            Ảnh nhà thiết kế
                                        </button>
                                    </h2>
                                    <div id="designerImage" class="accordion-collapse collapse show">
                                        <div class="accordion-body pt-0">
                                            <div id="feature_image"
                                                 class="image-post-box d-flex align-items-center justify-content-center"
                                                 @onclick='() => OpenMediaModalOne(false, "feature_image")'>
                                                @if (!string.IsNullOrEmpty(designer.image))
                                                {
                                                    <img src="@designer.image" class="w-100 h-100 object-cover" />
                                                }
                                                else
                                                {
                                                    <div class="icon d-flex align-items-center justify-content-center">
                                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke-width="1" stroke="currentColor" fill="none">
                                                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                            <path d="M12 5v14" />
                                                            <path d="M5 12h14" />
                                                        </svg>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="accordion bg-white mb-3">
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#imageLibrary" aria-expanded="true">
                                            Thư viện ảnh
                                        </button>
                                    </h2>
                                    <div id="imageLibrary" class="accordion-collapse collapse show">
                                        <div class="accordion-body pt-0">
                                            <div class="image-box-libs">
                                                <div id="image_library" class="image-libs d-grid gap-2 align-items-center">
                                                    @if (!string.IsNullOrEmpty(designer.image_library))
                                                    {
                                                        foreach (var img in designer.image_library.Split(','))
                                                        {
                                                            <div class="image-item">
                                                                <img src="@img" class="w-100 h-100 object-cover" />
                                                            </div>
                                                        }
                                                    }
                                                    <div class="image-post-box d-flex align-items-center justify-content-center"
                                                         @onclick='() => OpenMediaModal(true, "image_library")'>
                                                        <div class="icon d-flex align-items-center justify-content-center">
                                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke-width="1" stroke="currentColor" fill="none">
                                                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                                <path d="M12 5v14" />
                                                                <path d="M5 12h14" />
                                                            </svg>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
            <Media_modal OnImagesSelectedN="HandleImageSelectedMultiple"></Media_modal>
           <Modal OnImageSelectedOne="HandleImageSelectedSingle"></Modal>
        </div>
    </div>
</div>

@code {
    private Designer designer = new Designer();
    private MetaData metaData = new MetaData();
    private Dictionary<string, string> statuses = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        statuses = Designer.STATUSES.ToDictionary(k => k.Key, v => v.Value);
        designer = new Designer();
        metaData = new MetaData();
    }

    private async Task HandleImageSelectedMultiple(List<string> imagePaths)
    {
        designer.image_library = string.Join(",", imagePaths);
        StateHasChanged();
    }

    public void HandleImageSelectedSingle(string imagePath)
    {
        if (!string.IsNullOrEmpty(imagePath))
        {
            designer.image = imagePath;
            StateHasChanged();
        }
    }
    private async Task OpenMediaModal(bool isMultiple, string referId)
    {
        await JS.InvokeVoidAsync("openMediaModal", true, referId);

    }
    private async Task OpenMediaModalOne(bool isMultiple, string referId)
    {
        await JS.InvokeVoidAsync("openMediaModalSingle", referId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initTinyMCE");
            await JS.InvokeVoidAsync("setTinyMCEContent", designer.description);
        }
    }
    private async Task SubmitForm()
    {
        designer.description = await JS.InvokeAsync<string>("getTinyMCEContent");
        designer.SetMetaData(metaData);
        await sev.Create(designer);
        nav.NavigateTo("/admin/designer");
    }
}
<script>
    function openMediaModal(isMultiple, referId) {
        clearSelectedImages();
        var modalElement = document.getElementById('mediaModal');
        if (modalElement) {
            modalElement.setAttribute('data-multiple', isMultiple ? "true" : "false");
            modalElement.setAttribute('data-refer-id', referId);

            if (!modalElement._bsModalInstance) {
                modalElement._bsModalInstance = new bootstrap.Modal(modalElement);
            }
            modalElement._bsModalInstance.show();
        } else {
            console.error("Không tìm thấy phần tử với id 'mediaModal'.");
        }
    }

    function openMediaModalSingle(referId) {
        var modalElement = document.getElementById('mediaModal');
        if (modalElement) {
            modalElement.setAttribute('data-multiple', "false");
            modalElement.setAttribute('data-refer-id', referId);

            if (!modalElement._bsModalInstance) {
                modalElement._bsModalInstance = new bootstrap.Modal(modalElement);
            }
            modalElement._bsModalInstance.show();
        } else {
            console.error("Không tìm thấy phần tử với id 'mediaModal'.");
        }
    }

    function closeMediaModal() {
        var modalElement = document.getElementById('mediaModal');
        if (modalElement && modalElement._bsModalInstance) {
            modalElement._bsModalInstance.hide();
        }
    }

    function setTinyMCEContent(content) {
        tinymce.get('tinymce-textarea').setContent(content);
    }
    function initTinyMCE() {
        tinymce.init({
            selector: '#tinymce-textarea',
            plugins: 'link image code',
            toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | code'
        });
    }

    function getTinyMCEContent() {
        return tinymce.get('tinymce-textarea').getContent();
    }
</script>





    @inject HttpClient Http
@using System.Net.Http.Json
@inject FilesIServices sev
@inject IJSRuntime JS

<div class="modal fade show" id="mediaModal" tabindex="-1">
    <input type="hidden" id="media_multiple" value="true">
    <input type="hidden" id="media_refer_id" value="image_library">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Quản lý media</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="page-body">
                        <div class="container-xl">
                            <form class="dropzone mb-5" id="dropzone-default" enctype="multipart/form-data">
                                <div class="fallback">
                                    <input name="file" type="file" accept="image/*" multiple />
                                </div>
                            </form>

                            <div class="card">
                                <div class="card-body">
                                    <div class="search-box d-flex align-items-center justify-content-between mb-3">
                                        <EditForm Model="files" class="search-form" OnValidSubmit="@OnSearch">
                                            <div class="form-group d-flex gap-2">
                                                <InputText id="search_input" class="form-control" @bind-Value="search_query" placeholder="Nhập từ khóa tìm kiếm" />
                                                <button type="submit" class="btn btn-outline-primary">Tìm kiếm</button>
                                            </div>
                                        </EditForm>
                                    </div>
                                    <div id="table-default">
                                        <div class="d-grid" style="grid-template-columns: repeat(7, 1fr); gap: 16px">
                                            @if (listFiles != null)
                                            {
                                                @foreach (var file in listFiles)
                                                {
                                                    <div class="image-item" data-name="@file.Name" data-id="@file.Id" style="position: relative;" key="@file.Id">
                                                        <button type="button" class="btn btn-default p-0 m-0 btn-choose-image"
                                                                @onclick="() => ToggleSelectImage(file.Path)"
                                                                data-file-id="@file.Id" data-file-image="@file.Path"
                                                                style="width: 100%">
                                                            <img src="@file.Path" class="w-100 object-fit-cover" alt="IMG" height="150" />
                                                        </button>
                                                        @if (IsImageSelected(file.Path))
                                                        {
                                                            <span class="selected-icon">✓</span>
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                        <div class="mt-4">
                                            <PaginationMediaModal TItem="Files" PageNumber="page_number" TotalPages="total_pages" PageSize="page_size" TotalItems="totalItems" OnPageChanged="GoToPage" OnPageSizeChanged="OnPageSizeChanged" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button id="fileConfirm" type="button" class="btn btn-primary" @onclick="ConfirmSelection">Chọn</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<List<string>> OnImagesSelectedN { get; set; }
    private List<Files> listFiles = new();
    private Files files = new Files();
    private List<string> selectedImages = new List<string>();
    private string search_query = string.Empty;
    private int page_number = 1;
    private int total_pages = 1;
    private int page_size = 21;
    private int totalItems;

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        string searchTerm = string.IsNullOrEmpty(search_query) ? "" : search_query;
        listFiles = await sev.GetByTypeAsync(page_number, page_size, search_query);

        totalItems = await sev.GetTotalCountAsync(searchTerm);
        total_pages = (int)Math.Ceiling((double)totalItems / page_size);
        StateHasChanged();
    }

    private async Task ToggleSelectImage(string imagePath)
    {
        if (selectedImages.Contains(imagePath))
        {
            selectedImages.Remove(imagePath);
        }
        else
        {
            selectedImages.Add(imagePath);
        }
        StateHasChanged();
    }

    private async Task ConfirmSelection()
    {
        await OnImagesSelectedN.InvokeAsync(selectedImages);
        await JS.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('mediaModal')).hide()");
    }

    private bool IsImageSelected(string imagePath)
    {
        return selectedImages.Contains(imagePath);
    }

    private async Task GoToPage(int page)
    {
        page_number = page;
        await LoadPosts();
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        page_size = newPageSize;
        page_number = 1;
        await LoadPosts();
    }

    private async Task OnSearch()
    {
        await LoadPosts();
    }
}
<script>
    function openMediaModal(isMultiple, referId) {
        var modalElement = document.getElementById('mediaModal');
        modalElement.setAttribute('data-multiple', isMultiple);
        modalElement.setAttribute('data-refer-id', referId);
        var modal = new bootstrap.Modal(modalElement);
        modal.show();
    }
</script>

<script>
    window.initializeDropzone = () => {
        if (typeof Dropzone !== 'undefined') {
            if (Dropzone.instances.length > 0) {
                Dropzone.instances.forEach(dz => dz.destroy());
            }

            var dropzone = new Dropzone("#dropzone-default", {
                url: "https://localhost:7011/api/Files/upload",
                method: "post",
                autoProcessQueue: true,
                addRemoveLinks: true,
                parallelUploads: 20,
                maxFilesize: 1,
                dictRemoveFile: "Xóa",
                init: function () {
                    this.on("success", function (file, response) {
                        toastr.success('Thêm thành công.');
                        this.removeFile(file);

                        setTimeout(() => {
                            location.reload();
                        }, 2000);
                    });

                    this.on("error", function (file, errorMessage) {
                        toastr.error('Thêm thất bại: ' + errorMessage);
                        this.removeFile(file);
                    });

                    this.on("maxfilesexceeded", function (file) {
                        toastr.error('Tệp vượt quá kích thước tối đa cho phép (1 MB).');
                        this.removeFile(file);
                    });
                }
            });
        } else {
            console.error("Dropzone is not defined. Make sure the script is included.");
        }
    };
</script>

<style>
    .selected-icon {
        position: absolute;
        top: 5px;
        left: 5px;
        font-size: 24px;
        color: white;
        background-color: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        padding: 5px;
        z-index: 10;
    }
</style>
   *@