@page "/admin/categorie/editpost/{id:long}"
@inject ICategoriesServices sev
@inject NavigationManager nav
@inject IJSRuntime JS


@if (isDataLoaded)
{

    <EditForm Model="categorie" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="page-wrapper">
            <div class="page-header d-print-none">
                <div class="container-xl">
                    <div class="row g-2 align-items-center">
                        <div class="col">
                            <h2 class="page-title">
                                Sửa chuyên mục
                            </h2>
                        </div>
                    </div>
                </div>
            </div>
            <div class="page-body">
                <div class="container-xl">
                    <div class="row">
                        <div class="col-md-12 col-12">
                            <div class="card">
                                <div class="card-body">

                                    <div class="form-group mb-3">
                                        <label for="categories-short-title" class="form-label">Tiêu đề ngắn</label>
                                        <InputText id="categories-short-title" class="form-control" @bind-Value="categorie.Short_title" />
                                        <ValidationMessage For="@(() => categorie.Short_title)" />
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="categories-title" class="form-label">Tiêu đề <span class="text-danger">*</span></label>
                                        <InputText id="categories-title" class="form-control" @bind-Value="categorie.Title" @oninput="GenerateSlug" />

                                    </div>

                                    <div class="form-group mb-3">
                                        <label for="categories-slug" class="form-label">Đường dẫn <span class="text-danger">*</span></label>
                                        <InputText id="categories-slug" class="form-control" @bind-Value="categorie.Slug" />
                                        <small class="text-gray-100">“slug” là đường dẫn thân thiện của tên. Nó thường chỉ bao gồm kí tự viết thường, số và dấu gạch ngang, không dùng tiếng Việt.</small>
                                        <ValidationMessage For="@(() => categorie.Slug)" />
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="categories-description" class="form-label">Mô tả</label>
                                        <InputTextArea id="categories-description" class="form-control" @bind-Value="categorie.Description" rows="3" />
                                    </div>

                                    <div class="form-group">
                                        <button type="submit" class="btn btn-primary">Sửa chuyên mục</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <p>Đang tải dữ liệu...</p>
}

@code {
    [Parameter]
    public Categories categorie { get; set; } // Nhận dữ liệu từ trang Index

    [Parameter]
    public long Id { get; set; }
    private List<Categories> categoriesList = new();
    private bool isDataLoaded = false;
    private void GenerateSlug(ChangeEventArgs e)
    {
        if (e.Value is string title && !string.IsNullOrWhiteSpace(title))
        {
            categorie.Slug = CreateSlug(title);
        }
    }

    private string CreateSlug(string input)
    {
        // Chuyển sang chữ thường
        string result = input.ToLowerInvariant();

        // Loại bỏ dấu tiếng Việt
        result = RemoveDiacritics(result);

        // Loại bỏ ký tự không phải chữ/số và thay thế khoảng trắng bằng dấu gạch ngang
        result = System.Text.RegularExpressions.Regex.Replace(result, @"[^a-z0-9\s-]", "");
        result = System.Text.RegularExpressions.Regex.Replace(result, @"\s+", "-").Trim('-');

        return result;
    }

    private string RemoveDiacritics(string text)
    {
        var normalized = text.Normalize(System.Text.NormalizationForm.FormD);
        var stringBuilder = new System.Text.StringBuilder();
        foreach (var c in normalized)
        {
            var unicodeCategory = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
            if (unicodeCategory != System.Globalization.UnicodeCategory.NonSpacingMark)
            {
                stringBuilder.Append(c);
            }
        }
        return stringBuilder.ToString().Normalize(System.Text.NormalizationForm.FormC);
    }
    protected async override Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"Attempting to load category with ID: {Id}");
            categorie = await sev.Details(Id);
            if (categorie != null)
            {
                isDataLoaded = true;
            }
            else
            {
                Console.WriteLine("Không tìm thấy chuyên mục với ID này.");
            }

            categoriesList = (await sev.GetAll()).Where(ctgr => ctgr.Parent_id == 0).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải dữ liệu: {ex.ToString()}");
        }
    }

    private async Task SubmitForm()
    {
        try
        {
            await sev.Update(categorie);
            await JS.InvokeVoidAsync("toastr.success", "Sửa danh mục thành công");
            categorie = new Categories(); // Reset lại form
            nav.NavigateTo("/admin/post/categorie"); // Điều hướng lại về danh sách
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            await JS.InvokeVoidAsync("toastr.error", "Không thể sửa danh mục. Vui lòng thử lại.");
        }
    }
}
