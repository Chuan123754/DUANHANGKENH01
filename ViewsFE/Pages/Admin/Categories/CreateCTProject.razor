@page "/admin/project/categorie/create"
@inject ICategoriesServices sev
@inject NavigationManager nav
@inject IJSRuntime JS

<EditForm Model="categories" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="page-wrapper">
        <div class="page-header d-print-none">
            <div class="container-xl">
                <div class="row g-2 align-items-center">
                    <div class="col">
                        <h2 class="page-title">
                            Thêm chuyên mục
                        </h2>
                    </div>
                </div>
            </div>
        </div>
        <div class="page-body">
            <div class="container-xl">
                <div class="row">
                    <div class="col-md-12 col-12">
                        <div class="card">
                            <div class="card-body">

                                <div class="form-group mb-3">
                                    <label for="categories-short-title" class="form-label">Tiêu đề ngắn </label>
                                    <InputText id="categories-short-title" class="form-control" @bind-Value="categories.Short_title"  />
                                    <ValidationMessage For="@(() => categories.Short_title)" />
                                </div>
                                <div class="form-group mb-3">
                                    <label for="categories-title" class="form-label">Tiêu đề <span class="text-danger">*</span></label>
                                    <InputText id="categories-title" class="form-control" @bind-Value="categories.Title" @oninput="GenerateSlug" />
                                    <ValidationMessage For="@(() => categories.Title)" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="categories-slug" class="form-label">Đường dẫn<span class="text-danger">*</span></label>
                                    <InputText id="categories-slug" class="form-control" @bind-Value="categories.Slug" />
                                    <small class="text-gray-100">“slug” là đường dẫn thân thiện của tên. Nó thường chỉ bao gồm kí tự viết thường, số và dấu gạch ngang, không dùng tiếng Việt.</small>
                                    <ValidationMessage For="@(() => categories.Slug)" />
                                </div>

                            
                                <div class="form-group mb-3">
                                    <label for="categories-description" class="form-label">Mô tả</label>
                                    <InputTextArea id="categories-description" class="form-control" @bind-Value="categories.Description" rows="3" />
                                </div>


                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary" style="float: right">
                                        Tạo chuyên mục
                                    </button>
                                </div>
                            </div>                  
                        </div>                    
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private List<Categories> categoriesList = new();
    private Categories categories = new Categories();
    private List<Designer> designersList = new List<Designer>();
    protected override async Task OnInitializedAsync()
    {
        // Tải danh sách thuộc tính nếu chưa có
        categoriesList = (await sev.GetAllType("project")).Where(ctgr => ctgr.Parent_id == 0).ToList();
    }
    private void GenerateSlug(ChangeEventArgs e)
    {
        if (e.Value is string title && !string.IsNullOrWhiteSpace(title))
        {
            categories.Slug = CreateSlug(title);
        }
    }

    private string CreateSlug(string input)
    {
        // Chuyển sang chữ thường
        string result = input.ToLowerInvariant();

        // Loại bỏ dấu tiếng Việt
        result = RemoveDiacritics(result);

        // Loại bỏ ký tự không phải chữ/số và thay thế khoảng trắng bằng dấu gạch ngang
        result = System.Text.RegularExpressions.Regex.Replace(result, @"[^a-z0-9\s-]", "");
        result = System.Text.RegularExpressions.Regex.Replace(result, @"\s+", "-").Trim('-');

        return result;
    }

    private string RemoveDiacritics(string text)
    {
        var normalized = text.Normalize(System.Text.NormalizationForm.FormD);
        var stringBuilder = new System.Text.StringBuilder();
        foreach (var c in normalized)
        {
            var unicodeCategory = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
            if (unicodeCategory != System.Globalization.UnicodeCategory.NonSpacingMark)
            {
                stringBuilder.Append(c);
            }
        }
        return stringBuilder.ToString().Normalize(System.Text.NormalizationForm.FormC);
    }
    private async void HandleValidSubmit()
    {
        try
        {
            await sev.CreateTypeProject(categories);
            await JS.InvokeVoidAsync("toastr.success", "Thêm danh mục thành công");
            nav.NavigateTo("/admin/project/categorie");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            await JS.InvokeVoidAsync("toastr.error", "Không thể thêm danh mục. Vui lòng thử lại.");
        }
    }
}