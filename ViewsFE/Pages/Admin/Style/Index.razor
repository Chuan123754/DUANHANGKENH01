@page "/admin/style"
@inject NavigationManager nav
@inject IStyleServices sev
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@inject RoleService RoleService

<div class="modal fade" id="fileModal" tabindex="-1" role="dialog" aria-labelledby="fileModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="fileModalLabel">Chọn tệp để nhập</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <InputFile OnChange="HandleFileSelected" accept=".xlsx" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"> Hủy</button>
                <button type="button" class="btn btn-primary" @onclick="OnImport" data-bs-dismiss="modal"> Nhập</button>
            </div>
        </div>
    </div>
</div>

<div class="page-wrapper">
    <!-- Page header -->
    <div class="page-header d-print-none">
        <div class="container-xl">

            <div class="row g-2 align-items-center">
                <div class="col d-flex gap-3">
                    <h2 class="page-title">
                        Danh sách Kiểu dáng
                    </h2>
                    <a href="/admin/style/create" class="btn btn-sm btn-outline-primary">
                        <i class="bi bi-plus-lg"></i> Thêm phong cách
                    </a>
                    <button class="btn btn-sm btn-outline-success" data-bs-toggle="modal" data-bs-target="#fileModal">
                        <i class="bi bi-upload"></i> Nhập
                    </button>
                    <button class="btn btn-sm btn-outline-warning" @onclick="OnExport">
                        <i class="bi bi-download"></i> Xuất
                    </button>
                </div>

            </div>
        </div>
    </div>


    <!-- Page body -->
    <div class="page-body">
        <div class="container-xl">
            @if (successfulTitles.Any() || failedTitles.Any())
            {
                <div class="mt-4">
                    @if (successfulTitles.Any())
                    {
                        <div class="alert alert-success">
                            <strong>Các tiêu đề đã thêm thành công:</strong>
                            <ul>
                                @foreach (var title in successfulTitles)
                                {
                                    <li>@title</li>
                                }
                            </ul>
                        </div>
                    }

                    @if (failedTitles.Any())
                    {
                        <div class="alert alert-danger">
                            <strong>Các tiêu đề bị trùng hoặc thêm thất bại:</strong>
                            <ul>
                                @foreach (var title in failedTitles)
                                {
                                    <li>@title</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            }
            <div class="card">
                <div class="card-body">
                    <div class="search-box d-flex align-items-center justify-content-between mb-3">
                        <div></div>
                        <EditForm Model="style" OnValidSubmit="@OnSearch">
                            <div class="form-group d-flex gap-2">
                                <InputText id="search_input" class="form-control" @bind-Value="search_query" placeholder="Nhập từ khóa tìm kiếm" />
                                <button type="submit" class="btn btn-outline-primary">Tìm kiếm</button>
                            </div>
                        </EditForm>
                    </div>

                    <div id="table-default" class="table-responsive">
                        @if (listStyle != null && listStyle.Any())
                        {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>
                                            <button class="table-sort" data-sort="sort-title">Tiêu đề</button>
                                        </th>
                                        <th>
                                            <button class="table-sort" data-sort="sort-slug">Đường dẫn</button>
                                        </th>
                                        <th>
                                            <button class="table-sort" data-sort="sort-city">Mô tả</button>
                                        </th>
                                        <th>
                                            <button class="table-sort" data-sort="sort-date">Thời gian</button>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int stt = (page_number - 1) * page_size + 1;
                                    }
                                    @foreach (var sz in listStyle)
                                    {
                                        <tr class="post-row">
                                            <td>@stt</td>
                                            <td class="sort-title">
                                                @sz.Title
                                                <br />
                                                <!-- Tạo các hành động sửa và xóa cho sản phẩm con -->
                                                <div class="cell-action">
                                                    <a class="cell-action-edit text-primary" @onclick="() => NavEditCtgr(sz.Id)">Chỉnh sửa</a>
                                                   @*  <a class="cell-action-delete text-danger" @onclick="() => NavDeleteCtgr(sz.Id)">Thùng rác</a> *@
                                                </div>
                                            </td>
                                            <td class="sort-slug">@sz.Slug</td>
                                            <td class="sort-city">@sz.Description</td>
                                            <td class="sort-date">@sz.Create_at.ToString("dd/MM/yyyy HH:mm:ss")</td>
                                        </tr>
                                        stt++;
                                    }

                                </tbody>
                            </table>
                            <div class="mt-4">
                                <Pagination TItem="Style" PageNumber="page_number" TotalPages="total_pages" PageSize="page_size" TotalItems="totalItems" OnPageChanged="GoToPage" OnPageSizeChanged="OnPageSizeChanged" />
                            </div>
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center">Không có dữ liệu</td>
                            </tr>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<Style> listStyle = new List<Style>();
    private Style style = new Style();
    private string search_query = string.Empty;
    private int page_number = 1;
    private int total_pages = 1;
    private int page_size = 10;
    private int totalItems;
    private bool isAdmin = false;
    private bool isEmployee = false;

    private List<string> successfulTitles = new();
    private List<string> failedTitles = new();
    protected override async Task OnInitializedAsync()
    {
        // Kiểm tra vai trò của người dùng
        isAdmin = await RoleService.UserIsInRoleAsync("Admin");


        if (!isAdmin)
        {
            nav.NavigateTo("/unauthorized", true); // Điều hướng đến trang không có quyền
            return;
        }

        await LoadPosts();
    }
    [Inject]
    private IUploadService UploadService { get; set; }

    private IBrowserFile selectedFile;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }
    private async Task OnSearch()
    {
        // Ngăn ngừa load lại trang
        listStyle = await sev.GetByTypeAsync(page_number, page_size, search_query);
    }
    private async Task LoadPosts()
    {
        string searchTerm = string.IsNullOrEmpty(search_query) ? "" : search_query;
        listStyle = await sev.GetByTypeAsync(page_number, page_size, searchTerm);
        totalItems = await sev.GetTotalCountAsync(searchTerm);
        total_pages = (int)Math.Ceiling((double)totalItems / page_size);
        StateHasChanged();
    }
    private async Task GoToPage(int page)
    {
        page_number = page;
        await LoadPosts();
    }
    private async Task OnPageSizeChanged(int newPageSize)
    {
        page_size = newPageSize;
        page_number = 1;
        await LoadPosts();
    }


    private void NavEditCtgr(long id)
    {
        nav.NavigateTo($"/admin/style/edit/{id}");
    }

    private async Task NavDeleteCtgr(long id)
    {
        try
        {
            await sev.Delete(id);
            await JS.InvokeVoidAsync("toastr.success", "Xóa bản ghi thành công!");
            await LoadPosts();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            await JS.InvokeVoidAsync("toastr.error", "Không thể xoá bản ghi. Vui lòng thử lại.");
        }
    }

    private async Task OnImport()
    {
        try
        {
            if (selectedFile != null)
            {
                using var memoryStream = new MemoryStream();
                await selectedFile.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                var formFile = new FormFile(memoryStream, 0, memoryStream.Length, selectedFile.Name, selectedFile.Name)
                    {
                        Headers = new HeaderDictionary(),
                        ContentType = selectedFile.ContentType
                    };

                // Gửi file đến API
                var response = await UploadService.UploadExcel("Styles", formFile);

                // Xử lý phản hồi
                if (response.Success)
                {
                    successfulTitles = response.SuccessfulTitles;
                    failedTitles = response.FailedTitles;
                }
                else
                {
                    failedTitles.Add("Đã xảy ra lỗi khi xử lý tệp.");

                }

                await LoadPosts();
            }
            else
            {
                failedTitles.Add("Chưa chọn file để nhập.");
            }
        }
        catch (Exception ex)
        {
            failedTitles.Add($"Lỗi khi nhập dữ liệu: {ex.Message}");
        }
    }

    private async Task OnExport()
    {
        try
        {
            var fileContent = await UploadService.ExportExcel("Styles");
            var fileName = $"Styles_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
            var base64 = Convert.ToBase64String(fileContent);

            await JS.InvokeVoidAsync("downloadFile", fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", base64);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi xuất dữ liệu: {ex.Message}");
        }
    }
}
<script>
    function downloadFile(filename, contentType, base64) {
        const link = document.createElement('a');
        link.href = `data:${contentType};base64,${base64}`;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

</script>