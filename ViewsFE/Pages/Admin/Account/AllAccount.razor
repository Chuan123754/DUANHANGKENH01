@page "/account/allaccount"
@using ViewsFE.Models.DTO
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IAccountService accountService

<h1>Danh sách tài khoản</h1>

<p>
    <button class="btn btn-primary" @onclick="AddNewAccount">Thêm tài khoản</button>
</p>

<!-- Form tìm kiếm -->
<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" @bind="searchKeyword" class="form-control" placeholder="Nhập từ khóa tìm kiếm" />
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary">Tìm kiếm</button>
    </div>
</div>

<!-- Bảng danh sách tài khoản -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Tên</th>
            <th>Username</th>
            <th>Email</th>
            <th>Vai trò</th>
            <th>Trạng thái</th>
            <th>Hành động</th>
        </tr>
    </thead>
    <tbody>
        @if (accounts != null && accounts.Any())
        {
            @foreach (var account in accounts)
            {
                <tr class="account-row">
                    <td>
                        @account.Account.FirstName @account.Account.LastName
                        <br />
                        <div class="action-buttons">
                            <a href="javascript:void(0);" @onclick="() => EditAccount(account.Account.Id)" style="margin-right: 10px;">Chỉnh sửa</a> |
                            <a href="javascript:void(0);" class="status-danger" @onclick="() => DeleteAccount(account.Account.Id)">Xóa</a>
                        </div>
                        <div class="action-buttons">
                    <td>
                        <button class="btn btn-info" @onclick="() => EditAccount(account.Account.Id)">Sửa</button>
                        <button class="btn btn-danger" @onclick="() => DeleteAccount(account.Account.Id)">Xóa</button>

                        <button @onclick="() => ToggleLock(account.Account.Id)" class="btn btn-warning">Toggle Lock</button>
                    </td>
                        </div>
                    </td>
                    <td>@account.Account.UserName</td>
                    <td>@account.Account.Email</td>
                    <td>
                        @if (account.Roles == null || account.Roles.Count == 0)
                        {
                            <span>Không có vai trò</span>
                        }
                        else
                        {
                            @foreach (var role in account.Roles)
                            {
                                <span>@role</span>
                            }
                        }
                    </td>
                    <td>
                        @if (account.Account.LockoutEnd != null && account.Account.LockoutEnd > DateTimeOffset.UtcNow)
                        {
                            <span class="text-danger">Khóa</span>
                        }
                        else
                        {
                            <span class="text-success">Hoạt động</span>
                        }
                    </td>
                   
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">Không có tài khoản nào.</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<AccountWithRoles> accounts;
    private string searchKeyword = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
    }

    private async Task LoadAccounts()
    {
        accounts = await accountService.GetAllAccountsAsync();
    }

    private void AddNewAccount()
    {
        Navigation.NavigateTo("/account/create");
    }

    private void EditAccount(string accountId)
    {
        Navigation.NavigateTo($"/account/edit/{accountId}");
    }

    private async Task DeleteAccount(string accountId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Chắc chắn muốn xóa tài khoản này?");
        if (confirm)
        {
            await accountService.DeleteAccountAsync(accountId);
            await LoadAccounts();
            StateHasChanged();
        }
    }

    private async Task ToggleLock(string id)
    {
        await accountService.ToggleLockAccountAsync(id);
        await LoadAccounts(); // Tải lại danh sách tài khoản sau khi thực hiện thao tác
    }
}
<style>
    .action-buttons {
        display: none;
    }

    .post-row:hover .action-buttons {
        display: inline;
    }

    table th, table td {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
    }

    .status-public {
        color: green; /* "Công khai" */
    }

    .status-unpublished {
        color: red; /* "Không công khai" */
    }

    .status-inactive {
        1 color: gray; /* "Không hoạt động" */
    }

    .status-danger {
        color: red;
    }
</style>
