@page "/account/allaccount"
@using Views.Models
@using ViewsFE.Models.DTO
@inject NavigationManager Navigation
@inject HttpClient Http
@using ViewsFE.Helper
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IAccountService accountService
<h3>Quản lý Tài khoản</h3>

<div class="card">
    <div class="card-body">
        <div class="mb-3">
            <button class="btn btn-primary" @onclick="AddNewAccount">Thêm Tài khoản</button>
        </div>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Tên</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Vai trò</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @if (accounts == null || accounts.Count == 0)
                {
                    <tr>
                        <td colspan="5" class="text-center">Không có tài khoản nào.</td>
                    </tr>
                }
                else
                {
                    foreach (var account in accounts)
                    {
                        <tr>
                            <td>@account.Account.FirstName @account.Account.LastName</td>
                            <td>@account.Account.UserName</td>
                            <td>@account.Account.Email</td>
                            <td>
                                @if (account.Roles == null || account.Roles.Count == 0)
                                {
                                    <span>Không có vai trò</span>
                                }
                                else
                                {
                                    @foreach (var role in account.Roles)
                                    {
                                        <span>@role</span>
                                    }
                                }
                            </td>
                            <td>
                                @if (account.Account.LockoutEnd != null && account.Account.LockoutEnd > DateTimeOffset.UtcNow)
                                {
                                    <span class="text-danger">Khóa</span>
                                }
                                else
                                {
                                    <span class="text-success">Hoạt động</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-info" @onclick="() => EditAccount(account.Account.Id)">Sửa</button>
                                <button class="btn btn-danger" @onclick="() => DeleteAccount(account.Account.Id)">Xóa</button>
                                <button @onclick="() => ToggleLock(account.Account.Id)" class="btn btn-warning">Toggle Lock</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
    

@code {
    private List<AccountWithRoles> accounts;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
    }

    private async Task LoadAccounts()
    {
        accounts = await accountService.GetAllAccountsAsync();
    }

    private void AddNewAccount()
    {
        Navigation.NavigateTo("/account/add");
    }

    private void EditAccount(string accountId)
    {
        Navigation.NavigateTo($"/account/edit/{accountId}");
    }

    private async Task DeleteAccount(string accountId)
    {
        var confirm = await Task.FromResult(true); 
        if (confirm)
        {
            await accountService.DeleteAccountAsync(accountId);
            await LoadAccounts(); 
        }
    }
    private async Task ToggleLock(string id)
    {
        var result = await accountService.ToggleLockAccountAsync(id);
    }
}
