@page "/admin/account/create"
@using ViewsFE.Helper
@using System.IdentityModel.Tokens.Jwt
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IAccountService accountService
@inject ILogActivityHistoryService LogActivityHistoryService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="container mt-5">
    <!-- Nút Quay Lại -->
    <div class="mb-3">
        <button class="btn btn-secondary" @onclick="GoBack">Back</button>
    </div>

    <div class="card" style="max-width: 600px; margin: auto;">
        <!-- Đặt chiều rộng tối đa cho card -->
        <div class="card-header">
            <h3 class="mb-0">Tạo Tài Khoản Mới</h3>
        </div>
        <div class="card-body">
            <EditForm Model="sigupModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label>Tên:</label>
                    <InputText @bind-Value="sigupModel.FirstName" class="form-control" />
                    <ValidationMessage For="@(() => sigupModel.FirstName)" />
                </div>

                <div class="mb-3">
                    <label>Họ:</label>
                    <InputText @bind-Value="sigupModel.LastName" class="form-control" />
                    <ValidationMessage For="@(() => sigupModel.LastName)" />
                </div>

                <div class="mb-3">
                    <label>Email:</label>
                    <InputText @bind-Value="sigupModel.Email" class="form-control" type="email" />
                    <ValidationMessage For="@(() => sigupModel.Email)" />
                </div>

                <div class="mb-3">
                    <label>Mật khẩu:</label>
                    <InputText @bind-Value="sigupModel.Password" class="form-control" type="password" />
                    <ValidationMessage For="@(() => sigupModel.Password)" />
                </div>

                <div class="mb-3">
                    <label>Nhập lại mật khẩu:</label>
                    <InputText @bind-Value="sigupModel.ConfirmPassword" class="form-control" type="password" />
                    <ValidationMessage For="@(() => sigupModel.ConfirmPassword)" />
                </div>

                <div class="mb-3">
                    <label>Vai trò:</label>
                    <select @bind="sigupModel.Role" class="form-control">
                        <option value="">Chọn vai trò</option>
                        <option value="@ApplicationRole.Admin">Quản trị viên</option>
                        <option value="@ApplicationRole.Employee">Nhân viên</option>
                        <option value="@ApplicationRole.Designer">Nhà thiết kế</option>
                        <option value="@ApplicationRole.SuperAdmin">Quản trị viên cấp cao</option>
                        <option value="@ApplicationRole.Customer">Khách hàng</option>
                    </select>
                    <ValidationMessage For="@(() => sigupModel.Role)" />
                </div>

                <button type="submit" class="btn btn-primary">Tạo Tài Khoản</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private SignUpModel sigupModel = new SignUpModel();

    private async Task HandleValidSubmit()
    {
        try
        {
            var identityResult = await accountService.SignUpAsync(sigupModel);
            if (identityResult.Succeeded)
            {
                var token = await sessionStorage.GetItemAsync<string>("authToken");
                var userInfo = GetUserInfoFromToken(token);

                // Lưu trữ các thông tin
                var accountId = userInfo.accountId;
                var firstName = userInfo.firstName;
                var lastName = userInfo.lastName;
                var email = userInfo.email;

                await LogActivityHistoryService.LogActivityAsync(

                    logName: "Tạo mới tài khoản",
                    description: $"Tài khoản được tạo là : {sigupModel.Email}",
                    subjectType: "Tài khoản",
                    accountId: accountId

                );
                Navigation.NavigateTo("/account/allaccount");
            }
            else
            {
                var errorMessages = identityResult.Errors.Select(error => error.Description);
                foreach (var errorMessage in errorMessages)
                {
                    Console.WriteLine($"Lỗi: {errorMessage}");
                }
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Có lỗi xảy ra: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
        }
      
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/account/allaccount"); // Điều hướng trở lại trang danh sách tài khoản
    }
    private (string accountId, string firstName, string lastName, string email) GetUserInfoFromToken(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);

        var accountId = jwtToken.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        var firstName = jwtToken.Claims.FirstOrDefault(c => c.Type == "FirstName")?.Value;
        var lastName = jwtToken.Claims.FirstOrDefault(c => c.Type == "LastName")?.Value;
        var email = jwtToken.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value;
      

        return (accountId, firstName, lastName, email);
    }

}
