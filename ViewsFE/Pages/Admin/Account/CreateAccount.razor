@page "/admin/account/create"
@using ViewsFE.BackgroundServices
@using ViewsFE.Helper
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IAccountService accountService
@inject ILogActivityHistoryService LogActivityHistoryService
@inject EmailNotification email
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JS

<div class="container mt-5">
    <!-- Nút Quay Lại -->
    <div class="mb-3">
        <button class="btn btn-secondary" @onclick="GoBack">Quay Lại</button>
    </div>

    <div class="card shadow-sm" style="max-width: 600px; margin: auto;">
        <div class="card-header text-center">
            <h3 class="mb-0">Tạo Tài Khoản Mới</h3>
        </div>
        <div class="card-body">
            <EditForm Model="sigupModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="firstName" class="form-label">Tên:</label>
                    <InputText id="firstName" @bind-Value="sigupModel.FirstName" class="form-control" placeholder="Nhập tên " />
                    <ValidationMessage For="@(() => sigupModel.FirstName)" />
                </div>

                <div class="mb-3">
                    <label for="lastName" class="form-label">Họ:</label>
                    <InputText id="lastName" @bind-Value="sigupModel.LastName" class="form-control" placeholder="Nhập họ " />
                    <ValidationMessage For="@(() => sigupModel.LastName)" />
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="sigupModel.Email" class="form-control" type="email" placeholder="Nhập địa chỉ email " />
                    <ValidationMessage For="@(() => sigupModel.Email)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Mật khẩu:</label>
                    <InputText id="password" @bind-Value="sigupModel.Password" class="form-control" type="password" placeholder="Nhập mật khẩu" />
                    <ValidationMessage For="@(() => sigupModel.Password)" />
                </div>

                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Nhập lại mật khẩu:</label>
                    <InputText id="confirmPassword" @bind-Value="sigupModel.ConfirmPassword" class="form-control" type="password" placeholder="Nhập lại mật khẩu" />
                    <ValidationMessage For="@(() => sigupModel.ConfirmPassword)" />
                </div>

                <div class="mb-3">
                    <label for="role" class="form-label">Vai trò:</label>
                    <select id="role" @bind="sigupModel.Role" class="form-select">
                        <option value="">Chọn vai trò</option>
                        <option value="@ApplicationRole.Admin">Quản trị viên</option>
                        <option value="@ApplicationRole.Employee">Nhân viên</option>
                    </select>
                    <ValidationMessage For="@(() => sigupModel.Role)" />
                </div>

                <button type="submit" class="btn btn-success w-100">Tạo Tài Khoản</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private SignUpModel sigupModel = new SignUpModel();

    private async Task HandleValidSubmit()
    {
        try
        {
            var allAccounts = await accountService.GetAllAccountsAsync();
            bool isEmailExists = allAccounts.Any(account => account.Account.UserName.Equals(sigupModel.Email, StringComparison.OrdinalIgnoreCase));

            if (isEmailExists)
            {
                await JS.InvokeVoidAsync("toastr.error", "Email đã tồn tại. Vui lòng chọn kiểm tra lại.");
                return;
            }

            await accountService.SignUpAsync(sigupModel);
            await JS.InvokeVoidAsync("toastr.success", "Tạo tài khoản thành công!");
            Navigation.NavigateTo("/admin/account/allaccount");
            var emailUser = sigupModel.Email;

            string emailSubject = "THÔNG TIN TÀI KHOẢN TẠI HANGKENH";
            string emailMessage = $@"
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'>
                    <title>{emailSubject}</title>
                </head>
                <body>
                    <h2>Chào mừng bạn đến với HangKenh!</h2>
                    <p>Chúc mừng {sigupModel.FirstName} {sigupModel.LastName} gia nhập đội ngũ hệ thống HANGKENH.</p>
                    <p>Dưới đây là thông tin tài khoản của bạn:</p>
                    <ul>
                        <li><strong>Username:</strong> {sigupModel.Email}</li>
                        <li><strong>Password:</strong> {sigupModel.Password}</li>
                    </ul>
                    <p>Hãy đổi lại mật khẩu sau khi đăng nhập vào hệ thống.</p>
                    <p>Cảm ơn bạn đã chọn HangKenh!</p>
                    <p>Trân trọng,<br />Đội ngũ HangKenh</p>
                      <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTy9z_jY_2Jlieg9lmeq_-TnRpWE2T4Kdw8JA&s' alt='HangKenh Logo' style='float: right;'; margin: auto; width: 100%; max-width: 300px;' />
                </body>
                </html>
            ";
            await email.SendEmailAsync(emailUser, emailSubject, emailMessage);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Có lỗi xảy ra: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/admin/account/allaccount");
    }
}