@page "/admin/sell"
@using System.Text.RegularExpressions
@using ViewsFE.BackgroundServices
@inject EmailNotification email
@inject NavigationManager nav
@inject IPostSer post
@inject IStyleServices StyleServices
@inject ISizeServices SizeServices
@inject IMaterialServices MaterialService
@inject ITextile_technologyServices Textile_technologyServices
@inject IColorServices colorService
@inject ISizeServices sizeService
@inject IUserService userService
@inject IAddressServices addressService
@inject IOrderIServices orderService
@inject OrderDetailsIServices orderDetailService
@inject IProductAttributeServices productAttributeService
@* @inject IProductVariantServices productVariantService *@
@inject MomoService momoService
@inject IOrderTrackingService orderTrackingService
@inject IJSRuntime JS
@inject CustomAuthenticationStateProvider _authStateProvider;


<style>
    .info-icon {
        position: relative;
        cursor: pointer;
        display: inline-block;
        color: #6c757d; /* Màu xám nhạt */
    }

        .info-icon .tooltip-text {
            visibility: hidden;
            width: 200px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 4px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%; /* Đẩy tooltip lên phía trên */
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
        }

        .info-icon:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }


    .custom-modal-size {
        max-width: 200%;
    }

    .modal-dialog-scrollable {
        max-height: 80vh;
        overflow-y: auto;
    }

    .table {
        width: 100%;
        table-layout: auto;
    }

    .border {
        border-width: 2px;
        border-color: #007bff;
    }
</style>

<div class="page-wrapper">
    <!-- Page header -->
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col">
                    <h2 class="page-title">
                        SELLING
                    </h2>
                </div>
                <div class="col-auto ms-auto d-print-none">
                    <div class="btn-list">
                        <button class="btn btn-outline-primary d-none d-sm-inline-block" @onclick="CreateOrder">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M12 5l0 14" />
                                <path d="M5 12l14 0" />
                            </svg>
                            Tạo hóa đơn
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Page body -->
    <div class="page-body">
        <div class="container-xl">
            <div class="row row-deck row-cards">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header d-flex align-items-center justify-content-between">
                            <h2 class="card-title">MÃ HÓA ĐƠN :  @selectedOrderId</h2>
                            <!-- Nút thêm sản phẩm -->
                            <button class="btn btn-outline-success" @onclick="ShowAddProductModal">
                                Thêm sản phẩm
                            </button>
                        </div>
                        @if (isAddProductModalVisible)
                        {
                            <div class="modal fade show d-block" tabindex="-1" role="dialog">
                                <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 85%; width: auto;">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Thêm Sản Phẩm</h5>
                                            <button type="button" class="btn-close" @onclick="CloseAddProductModal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="search-box mb-4">
                                                <div class="row g-2 align-items-center">
                                                    <div class="col-lg-3 col-md-6">
                                                        <select class="form-select" @onchange="(e) => HandleProductNameChange(e)">
                                                            <option value="">Chọn sản phẩm</option>
                                                            @foreach (var item in product_posts_list)
                                                            {
                                                                <option value="@item.Id">@item.Title</option>
                                                            }
                                                        </select>
                                                    </div>
                                                    <div class="col-lg-3 col-md-6">
                                                        <select class="form-select" @onchange="(e) => HandleTextileChange(e)">
                                                            <option value="">Chọn Công nghệ dệt</option>
                                                            @foreach (var tech in TextileTechnology_list)
                                                            {
                                                                <option value="@tech.Id">@tech.Title</option>
                                                            }
                                                        </select>
                                                    </div>
                                                    <div class="col-lg-3 col-md-6">
                                                        <select class="form-select" @onchange="(e) => HandleMaterialChange(e)">
                                                            <option value="">Chọn Chất liệu</option>
                                                            @foreach (var material in Material_list)
                                                            {
                                                                <option value="@material.Id">@material.Title</option>
                                                            }
                                                        </select>
                                                    </div>
                                                    <div class="col-lg-3 col-md-6">
                                                        <select class="form-select" @onchange="(e) => HandleStyleChange(e)">
                                                            <option value="">Chọn Phong cách</option>
                                                            @foreach (var style in Style_list)
                                                            {
                                                                <option value="@style.Id">@style.Title</option>
                                                            }
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="modal-body">
                                            <table class="table table-bordered table-striped table-hover align-middle">
                                                <thead class="table-light text-center">
                                                    <tr>
                                                        <th>Hình Ảnh</th>
                                                        <th>Tên Sản Phẩm</th>
                                                        <th>Công Nghệ Dệt</th>
                                                        <th>Phong Cách</th>
                                                        <th>Chất Liệu</th>
                                                        <th>Size</th>
                                                        <th>Màu</th>
                                                        <th>Tồn kho</th>
                                                        <th>Giá Tiền</th>
                                                        <th>Thao tác</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var product in lst_ProductAttributes.Where(p => p.Status != "Đã xoá"))
                                                    {
                                                        <tr>
                                                            <td class="text-center">
                                                                <img src="@product.Image" alt="Hình ảnh" style="width: 80px; height: 105px !important; object-fit: cover; border-radius: 4px;" />
                                                            </td>
                                                            <td class="text-truncate" style="max-width: 150px;">
                                                                @product.Posts.Title
                                                            </td>                                                     
                                                            <td class="text-truncate text-center">
                                                                @product.Textile_Technology?.Title
                                                            </td>
                                                            <td class="text-truncate text-center">
                                                                @product?.Style?.Title
                                                            </td>
                                                            <td class="text-truncate text-center">
                                                                @product?.Material?.Title
                                                            </td>
                                                            <td class="text-center">@product.Size?.Title</td>
                                                            <td class="text-center">
                                                                <div class="d-flex align-items-center justify-content-center">
                                                                    <span class="text-truncate">@product.Color?.Title</span>
                                                                    <div class="color-preview"
                                                                         style="width: 16px; height: 16px; background-color: @product.Color?.Color_code; border-radius: 50%; border: 1px solid #ddd; margin-left: 8px;">
                                                                    </div>
                                                                </div>
                                                            </td>
                                                            <td class="text-center">
                                                                @if (product.Stock == null || product.Stock == 0)
                                                                {
                                                                    <span style="color: red; font-weight: bold;">Đã hết hàng</span>
                                                                }
                                                                else
                                                                {
                                                                    @product.Stock
                                                                }
                                                            </td>
                                                            <td class="text-end">
                                                                @if (product.Sale_price != null && product.Sale_price > 0)
                                                                {
                                                                    <div>
                                                                        <span style="text-decoration: line-through; color: gray;">
                                                                            @string.Format("{0:N0}", product.Regular_price).Replace(".", ",") VNĐ
                                                                        </span>
                                                                    </div>
                                                                    <div>
                                                                        <span style="font-weight: bold; color: red;">
                                                                            @string.Format("{0:N0}", product.Sale_price).Replace(".", ",") VNĐ
                                                                        </span>
                                                                    </div>
                                                                }
                                                                else
                                                                {
                                                                    <div>
                                                                        <span>
                                                                            @string.Format("{0:N0}", product.Regular_price).Replace(".", ",") VNĐ
                                                                        </span>
                                                                    </div>
                                                                }
                                                            </td>
                                                            <td>
                                                                <button class="btn btn-sm btn-outline-primary ms-2"
                                                                        @onclick="() => AddProduct(order_Details, product.Id)">
                                                                    Chọn
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>

                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-secondary" @onclick="CloseAddProductModal">Đóng</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-backdrop fade show"></div>

                        }
                        <div class="card-body border-bottom py-3">
                            <div class="d-flex flex-wrap gap-3">
                                @foreach (var order in lst_Orders)
                                {
                                    <div class="invoice-item position-relative p-3 text-center border rounded"
                                         style="background-color: @(order.Id == selectedOrderId ? "#5985f7" : "#edf0f5")"
                                         @onclick="async () => await SelectOrder(order.Id)">

                                        <button type="button" class=" btn-close position-absolute top-0 end-0"
                                                style="width: 0.8rem; height: 0.8rem; margin: 0.25rem;"
                                                title="Xóa hóa đơn"
                                        @onclick:stopPropagation
                                                @onclick="() => DeleteOrder(order.Id)">
                                        </button>
                                        Hóa đơn @order.Id  <i class="bi bi-cart-check-fill"></i>
                                    </div>
                                }

                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="table card-table table-vcenter text-nowrap datatable">
                                <thead>
                                    <tr>
                                        <th>Hình Ảnh</th>
                                        <th>Tên sản phẩm</th>
                                        <th>Màu</th>
                                        <th>Kích thước</th>
                                        <th>Số lượng</th>
                                        <th>Đơn giá</th>
                                        <th>Tổng tiền</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in lst_OrderDetail)
                                    {
                                        <tr>
                                            <td><img src="@item.ProductAttributes.Image" alt="Hình ảnh" style="width: 80px; height: 105px !important;" /></td>
                                            <td>@item.ProductAttributes.SKU </td>
                                            <td class="sort-city">
                                                <div class="d-flex align-items-center">
                                                    <span class="me-2">@item.ProductAttributes.Color.Title</span>
                                                    <div class="color-preview"
                                                         style="width: 24px; height: 24px; background-color: @item.ProductAttributes.Color.Color_code; border-radius: 50%; border: 1px solid #ddd;">
                                                    </div>
                                                </div>
                                            </td>
                                            <td>@item.ProductAttributes.Size.Title</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => UpdateQuantityView(item.Id, item.Quantity - 1)">-</button>
                                                <span class="mx-2">@item.Quantity</span>
                                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => UpdateQuantityView(item.Id, item.Quantity + 1)">+</button>
                                            </td>
                                            <td class="text-start">
                                                @if (item.ProductAttributes.Sale_price != null && item.ProductAttributes.Sale_price > 0)
                                                {
                                                    <div>
                                                        <span style="text-decoration: line-through; color: gray;">
                                                            @string.Format("{0:N0}", item.ProductAttributes.Regular_price).Replace(".", ",") VNĐ
                                                        </span>
                                                    </div>
                                                    <div>
                                                        <span style="font-weight: bold; color: red;">
                                                            @string.Format("{0:N0}", item.ProductAttributes.Sale_price).Replace(".", ",") VNĐ
                                                        </span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div>
                                                        <span>
                                                            @string.Format("{0:N0}", item.ProductAttributes.Regular_price).Replace(".", ",") VNĐ
                                                        </span>
                                                    </div>
                                                }
                                            </td>
                                            <td class="text-start">
                                                @if (item.ProductAttributes.Sale_price != null && item.ProductAttributes.Sale_price > 0)
                                                {
                                                    <div>
                                                        <span style="text-decoration: line-through; color: gray;">
                                                            @string.Format("{0:N0}", (item.Quantity * item.ProductAttributes.Regular_price)).Replace(".", ",") VNĐ
                                                        </span>
                                                    </div>
                                                    <div>
                                                        <span style="font-weight: bold; color: red;">
                                                            @string.Format("{0:N0}", (item.Quantity * item.ProductAttributes.Sale_price)).Replace(".", ",") VNĐ
                                                        </span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span>
                                                        @string.Format("{0:N0}", (item.Quantity * item.ProductAttributes.Regular_price)).Replace(".", ",") VNĐ
                                                    </span>
                                                }
                                            </td>
                                            <td>

                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteOrderDetail(item.Id)">
                                                    <i class="bi bi-trash3"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="card-header d-flex align-items-center justify-content-between">
                            <h2 class="card-title">Tổng tiền: @totalAmount.ToString("N0").Replace(".", ",") VNĐ</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 col-lg-8">
                    <div class="card">
                        <div class="card-header d-flex align-items-center justify-content-between">
                            <h3 class="card-title">Thông tin khách hàng</h3>
                            <div class="col-auto">
                                <div class="border rounded d-flex align-items-center justify-content-center p-2"
                                     style="max-width: 200px; background-color: #ccdaff; border-radius: 30px; border-color:#7399fa;">
                                    @(isCustomerAdded ? customerName : "Khách lẻ")
                                </div>
                            </div>

                            <button class="btn  btn-outline-primary" @onclick="ShowListCustomerModal">
                                Chọn khách hàng
                            </button>
                            @if (isAddCustomerModalVisible)
                            {
                                <div class="modal fade show d-block" tabindex="-1" role="dialog">
                                    <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 75%; width: auto;">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title">Danh sách khách hàng</h5>
                                                <button type="button" class="btn-close" @onclick="CloseModalAddCustomer" aria-label="Close"></button>
                                            </div>
                                            <div class="modal-body">
                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <div class="d-flex align-items-center">
                                                        <label for="searchCustomer" class="me-2">Tìm kiếm:</label>
                                                        <input type="text" id="searchCustomer" class="form-control" style="width: 250px;" placeholder="Nhập SĐT hoặc Email khách hàng">
                                                    </div>
                                                    <button class="btn btn-outline-success" @onclick="OpenModalCreateCustomer">Thêm mới khách hàng</button>

                                                </div>
                                                @if (isCreateCustomerModalVisible)
                                                {
                                                    <div class="modal fade show d-block" tabindex="-1" role="dialog">
                                                        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 40%; width: auto;">
                                                            <div class="modal-content">
                                                                <div class="modal-header">
                                                                    <h5 class="modal-title">Thêm mới khách hàng</h5>
                                                                    <button type="button" class="btn-close" @onclick="CloseModalCreateCustomer" aria-label="Close"></button>
                                                                </div>
                                                                <div class="modal-body">
                                                                    <form>
                                                                        <div class="mb-3">
                                                                            <label class="form-label">Tên khách hàng</label>
                                                                            <input class="form-control" @bind="@Customer.Name">
                                                                        </div>
                                                                        <div class="mb-3">
                                                                            <label class="form-label">Số Điện thoại</label>
                                                                            <input class="form-control" @bind="@Customer.Phone">
                                                                        </div>
                                                                        <div class="mb-3">
                                                                            <label for="exampleInputEmail1" class="form-label">Email</label>
                                                                            <input type="email" class="form-control" id="exampleInputEmail1" @bind="@Customer.Email" aria-describedby="emailHelp">
                                                                        </div>
                                                                        <div class="modal-footer d-flex justify-content-between">
                                                                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="CreateCustomer">Xác nhận</button>
                                                                            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="CloseModalCreateCustomer">Hủy</button>
                                                                        </div>
                                                                    </form>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                }
                                                <table class="table table-bordered">
                                                    <thead>
                                                        <tr>
                                                            <th>STT</th>
                                                            <th>Họ và tên </th>
                                                            <th>Số điện thoại</th>
                                                            <th>Email</th>
                                                            <th>Thao tác</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{
                                                            int index = 1;
                                                        }
                                                        @foreach (var item in lst_Customer)
                                                        {
                                                            <tr>

                                                                <td>@index</td>
                                                                <td>@item.Name</td>
                                                                <td>@item.Phone</td>
                                                                <td>@item.Email</td>
                                                                <td>
                                                                    <button class="btn btn-sm btn-outline-primary mt-2" @onclick="() => AddCustomer(item)">Chọn</button>
                                                                </td>
                                                            </tr>
                                                            index++;
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                <div class="modal-backdrop fade show"></div>

                            }
                        </div>
                        @if (isDeliveryVisible)
                        {
                            <div class="table-responsive">
                                <div class="container px-4 text-center">
                                    <div class="row gx-2 justify-content-center">
                                        <h1> Thông tin địa chỉ</h1>
                                        <button class="btn btn-sm btn-outline-success" @onclick="ShowAddress">Chọn địa chỉ</button>
                                        <!-- table  address -->
                                        @if (isChooseAddress)
                                        {
                                            <div class="modal fade show d-block" tabindex="-1" role="dialog">
                                                <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 75%; width: auto;">
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <h5 class="modal-title">Danh sách địa chỉ của Khách Hàng</h5>
                                                            <button type="button" class="btn-close" @onclick="CloseAddressModal" aria-label="Close"></button>
                                                        </div>
                                                        <div class="modal-body">
                                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                                <button class="btn btn-sm btn-outline-success" @onclick="OpenCreateAddressModal">Thêm mới địa chỉ</button>
                                                            </div>
                                                            <!-- model create address -->
                                                            @if (isCreateAddress)
                                                            {
                                                                <div class="modal fade show d-block" tabindex="-1" role="dialog">
                                                                    <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 40%; width: auto;">
                                                                        <div class="modal-content">
                                                                            <div class="modal-header">
                                                                                <h5 class="modal-title">Thêm mới địa chỉ</h5>
                                                                            </div>
                                                                            <form class="p-4 bg-light rounded shadow">
                                                                                <div class="row mb-3">
                                                                                    <div class="col-md-6">
                                                                                        <label for="name" class="form-label">Tên người nhận</label>
                                                                                        <input type="text" @bind="address.Name" class="form-control" placeholder="Nhập tên người nhận ">
                                                                                    </div>
                                                                                    <div class="col-md-6">
                                                                                        <label for="name" class="form-label">Số điện thoại</label>
                                                                                        <input type="text" @bind="address.Phone" class="form-control" placeholder="Nhập SĐT người nhận ">
                                                                                    </div>

                                                                                </div>
                                                                                <div class="row mb-3">
                                                                                    <div class="col-md-4">
                                                                                        <label for="city" class="form-label">Tỉnh/Thành phố</label>
                                                                                        <select id="city" @onchange="OnProvinceChange" class="form-select">
                                                                                            <option value="">Chọn Tỉnh</option>
                                                                                            @if (provinces != null && provinces.Count > 0)
                                                                                            {
                                                                                                @foreach (var province in provinces)
                                                                                                {
                                                                                                    <option value="@province.Id">@province.Name</option>
                                                                                                }
                                                                                            }
                                                                                        </select>
                                                                                    </div>
                                                                                    <div class="col-md-4">
                                                                                        <label for="district" class="form-label">Quận/Huyện</label>
                                                                                        <select id="district" @onchange="OnDistrictChange" class="form-select" disabled="@(!hasDistricts)">
                                                                                            <option value="">Chọn Huyện</option>
                                                                                            @if (districts != null && districts.Count > 0)
                                                                                            {
                                                                                                @foreach (var district in districts)
                                                                                                {
                                                                                                    <option value="@district.Id">@district.Name</option>
                                                                                                }
                                                                                            }
                                                                                        </select>
                                                                                    </div>
                                                                                    <div class="col-md-4">
                                                                                        <label for="ward" class="form-label">Xã/Phường/Thị trấn</label>
                                                                                        <select id="ward" @onchange="OnWardChange" class="form-select" disabled="@(!hasWards)">
                                                                                            <option value="">Chọn Xã</option>
                                                                                            @if (wards != null && wards.Count > 0)
                                                                                            {
                                                                                                @foreach (var ward in wards)
                                                                                                {
                                                                                                    <option value="@ward.Id">@ward.Name</option>
                                                                                                }
                                                                                            }
                                                                                        </select>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="row mb-3">
                                                                                    <div class="col-md-8">
                                                                                        <label for="address" class="form-label">Địa chỉ cụ thể</label>
                                                                                        <input type="text" @bind="address.Street" class="form-control" placeholder="Nhập địa chỉ cụ thể">
                                                                                    </div>
                                                                                    <div class="col-md-4">
                                                                                        <label for="note" class="form-label">Ghi chú</label>
                                                                                        <input type="text" @bind="address.Status" class="form-control" placeholder="Nhập ghi chú">
                                                                                    </div>
                                                                                </div>

                                                                                <div class="modal-footer d-flex justify-content-between">
                                                                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="CreateAddress">Xác nhận</button>
                                                                                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="CloseCreateAddress">Hủy</button>
                                                                                </div>
                                                                            </form>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                            @if (lst_Address != null && lst_Address.Any())
                                                            {
                                                                <table class="table table-bordered">
                                                                    <thead>
                                                                        <tr>
                                                                            <th>STT</th>
                                                                            <th>Tên người nhận</th>
                                                                            <th>Số điện thoại</th>
                                                                            <th>Địa chỉ</th>
                                                                            <th>Thao tác</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        @{
                                                                            int index = 1;
                                                                        }
                                                                        @foreach (var item in lst_Address)
                                                                        {
                                                                            <tr>
                                                                                <td>@index</td>
                                                                                <td>@item.Name</td>
                                                                                <td>@item.Phone</td>
                                                                                <td>@($"{item.Street}, {item.Ward_commune}, {item.District}, {item.Province_city}")</td>
                                                                                <td>
                                                                                    <button class="btn btn-primary mt-2" @onclick="() => SelectAddress(item)">Chọn</button>
                                                                                </td>
                                                                            </tr>
                                                                            index++;
                                                                        }
                                                                    </tbody>
                                                                </table>
                                                            }
                                                            else
                                                            {
                                                                <h1>Khách hàng chưa có thông tin về địa chỉ</h1>
                                                            }

                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class="modal-backdrop fade show"></div>
                                        }
                                        <form class="space-y-2">
                                            <div class="d-flex" style="gap: 0.5rem; margin: 0.25rem; padding: 0.25rem;">
                                                <div class="col-auto" readonly style="flex: 1;">
                                                    <fieldset class="border p-2" style="padding-top: 0.25rem;">
                                                        <legend class="float-none w-auto px-2" style="font-size: 0.75rem; text-align: left; margin-bottom: 0;">Tên địa chỉ</legend>
                                                        <div style="margin-top: -0.25rem;">
                                                            <strong>
                                                                @if (selectedAddress != null && selectedAddress.User != null)
                                                                {
                                                                    @selectedAddress?.Name
                                                                }
                                                                else if (selectedAddress == null)
                                                                {
                                                                    <span>Chưa chọn địa chỉ</span>
                                                                }
                                                                else
                                                                {
                                                                    <span>Khách lẻ</span>
                                                                }
                                                            </strong>
                                                        </div>
                                                    </fieldset>
                                                </div>
                                                <div class="col-auto" readonly style="flex: 1;">
                                                    <fieldset class="border p-2" style="padding-top: 0.25rem;">
                                                        <legend class="float-none w-auto px-2" style="font-size: 0.75rem; text-align: left; margin-bottom: 0;">Số điện thoại</legend>
                                                        <div style="margin-top: -0.25rem;">
                                                            <strong>
                                                                @if (selectedAddress != null && selectedAddress.User != null)
                                                                {
                                                                    @selectedAddress?.Phone
                                                                }
                                                                else if (selectedAddress == null)
                                                                {
                                                                    <span>Không có thông tin</span>
                                                                }
                                                                else
                                                                {
                                                                    <span>Khách lẻ</span>
                                                                }
                                                            </strong>
                                                        </div>
                                                    </fieldset>
                                                </div>
                                            </div>
                                            <div class="d-flex" style="gap: 0.5rem; margin: 0.25rem; padding: 0.25rem;">
                                                <div class="col-auto" readonly style="flex: 1;">
                                                    <fieldset class="border p-2" style="padding-top: 0.25rem;">
                                                        <legend class="float-none w-auto px-2" style="font-size: 0.75rem; text-align: left; margin-bottom: 0;">Tỉnh/Thành Phố</legend>
                                                        <div style="margin-top: -0.25rem;">
                                                            <strong>
                                                                @if (selectedAddress != null)
                                                                {
                                                                    @city
                                                                }
                                                                else
                                                                {
                                                                    <span>Chưa chọn địa chỉ</span>
                                                                }
                                                            </strong>
                                                        </div>
                                                    </fieldset>
                                                </div>
                                                <div class="col-auto" readonly style="flex: 1;">
                                                    <fieldset class="border p-2" style="padding-top: 0.25rem;">
                                                        <legend class="float-none w-auto px-2" style="font-size: 0.75rem; text-align: left; margin-bottom: 0;">Quận/Huyện</legend>
                                                        <div style="margin-top: -0.25rem;">
                                                            <strong>
                                                                @if (selectedAddress != null)
                                                                {
                                                                    @district
                                                                }
                                                                else
                                                                {
                                                                    <span>Chưa chọn địa chỉ</span>
                                                                }
                                                            </strong>
                                                        </div>
                                                    </fieldset>
                                                </div>
                                                <div class="col-auto" readonly style="flex: 1;">
                                                    <fieldset class="border p-2" style="padding-top: 0.25rem;">
                                                        <legend class="float-none w-auto px-2" style="font-size: 0.75rem; text-align: left; margin-bottom: 0;">Phường/Xã/Thị Trấn</legend>
                                                        <div style="margin-top: -0.25rem;">
                                                            <strong>
                                                                @if (selectedAddress != null)
                                                                {
                                                                    @ward
                                                                }
                                                                else
                                                                {
                                                                    <span>Chưa chọn địa chỉ</span>
                                                                }
                                                            </strong>
                                                        </div>
                                                    </fieldset>
                                                </div>
                                            </div>
                                            <div class="d-flex" style="gap: 0.5rem; margin: 0.25rem; padding: 0.25rem;">
                                                <div class="col-auto" readonly style="flex: 1;">
                                                    <fieldset class="border p-2" style="padding-top: 0.25rem;">
                                                        <legend class="float-none w-auto px-2" style="font-size: 0.75rem; text-align: left; margin-bottom: 0;">Địa chỉ cụ thể</legend>
                                                        <div style="margin-top: -0.25rem;">
                                                            <strong>
                                                                @if (selectedAddress != null)
                                                                {
                                                                    @street
                                                                }
                                                                else
                                                                {
                                                                    <span>Chưa chọn địa chỉ</span>
                                                                }
                                                            </strong>
                                                        </div>
                                                    </fieldset>
                                                </div>
                                                <div class="col-auto" readonly style="flex: 1;">
                                                    <fieldset class="border p-2" style="padding-top: 0.25rem;">
                                                        <legend class="float-none w-auto px-2" style="font-size: 0.75rem; text-align: left; margin-bottom: 0;">Ghi chú</legend>
                                                        <div style="margin-top: -0.25rem;">
                                                            <strong>
                                                                @if (selectedAddress != null)
                                                                {
                                                                    @selectedAddress.Status
                                                                }
                                                                else
                                                                {
                                                                    <span>Chưa có ghi chú</span>
                                                                }
                                                            </strong>
                                                        </div>
                                                    </fieldset>
                                                </div>
                                            </div>

                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-md-6 col-lg-4">
                    <div class="card">
                        <div class="card-header d-flex align-items-center justify-content-between">
                            <h3 class="card-title">Thông tin đơn hàng</h3>
                            @if (selectedOrderId != 0)
                            {
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked" @bind="IsDeliveryVisible">
                                    <label class="form-check-label" for="flexSwitchCheckChecked">
                                        <span class="info-icon">
                                            <i class="fas fa-info-circle fa-sm"></i>
                                            <span class="tooltip-text">Nếu số lượng sản phẩm nhỏ hơn hoặc bằng 10 thì mặc định tiền vận chuyển là 38000VNĐ , nếu lớn hơn 10 và nhỏ hơn hoặc bằng 20 thì cộng thêm 5000 với mỗi sản phẩm, nếu số lượng sản phẩm lớn hơn 20 và nhỏ hơn hoặc bằng 30 thì giảm 30% tiền vận chuyển,  nếu số lượng sản phẩm lớn hơn 30 và nhỏ hơn hoặc bằng 50 thì giảm 50% tiền vận chuyển, nếu số lượng sản phẩm lớn hơn 50 thì giảm 70% tiền vận chuyển.</span>
                                        </span>
                                        Giao hàng

                                    </label>
                                </div>
                            }
                        </div>
                        <div class="table-responsive">
                            <div class="container px-4 text-center">
                                <div class="row gx-2 justify-content-between">
                                </div>
                            </div>
                            <div class="card-table table-responsive">
                                <table class="table table-vcenter table-borderless">
                                    <tbody>
                                        <tr>
                                            <td class="td-truncate">
                                                <div class="text-truncate">
                                                    <strong>Tiền hàng :</strong>
                                                </div>
                                            </td>
                                            <td class="text-nowrap text-secondary">
                                                <strong>@totalPrincipal.ToString("N0").Replace(".", ",") VND</strong>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="td-truncate">
                                                <div class="text-truncate">
                                                    <strong>Số tiền giảm :</strong>
                                                </div>
                                            </td>
                                            <td class="text-nowrap text-danger">
                                                <strong>@discountAmount.ToString("N0").Replace(".", ",") VNĐ</strong>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td class="td-truncate">
                                                <div class="text-truncate">
                                                    <strong>Phí vận chuyển :</strong>
                                                </div>
                                            </td>
                                            @if (isDeliveryVisible)
                                            {
                                                <td class="text-nowrap text-secondary"> <strong>@feeShipping.ToString("N0").Replace(".", ",") VND</strong></td>
                                            }
                                            else
                                            {
                                                <td class="text-nowrap text-secondary"> <strong>0 VNĐ</strong></td>
                                            }
                                        </tr>

                                        <tr>
                                            <td class="td-truncate">
                                                <div class="text-truncate">
                                                    <strong>Tổng tiền :</strong>
                                                </div>
                                            </td>
                                            <td class="text-nowrap text-primary">
                                                <strong style="font-weight: bold; font-size: 1.5em;">
                                                    @totalMoney.ToString("N0").Replace(".", ",") VNĐ
                                                </strong>
                                            </td>

                                        </tr>

                                    </tbody>
                                </table>
                                @if (!string.IsNullOrEmpty(momoError))
                                {
                                    <div class="alert alert-danger">
                                        <strong>Lỗi thanh toán:</strong> @momoError
                                    </div>
                                }
                                else if (!string.IsNullOrEmpty(payUrl) && !string.IsNullOrEmpty(qrCodeBase64))
                                {
                                    <div class="alert alert-success text-center">
                                        <h5>Quét mã QR để thanh toán:</h5>
                                        <img src="@qrCodeBase64" alt="QR Code" style="width: 250px; height: 250px;" />
                                        <p>Hoặc nhấn <a href="@payUrl" target="_blank">tại đây</a> để thanh toán.</p>
                                    </div>
                                }


                            </div>
                            <div class="d-flex justify-content-center my-3">
                                <button type="button" class="btn btn-outline-primary me-2" @onclick="OpenModalPayByCash">Thanh toán tiền mặt</button>
                                <button type="button" class="btn btn-outline-success" @onclick="PayByMomo">Thanh toán qua MoMo</button>
                            </div>

                        </div>
                        @if (modalPayByCash)
                        {
                            <div class="modal fade show d-block" tabindex="-1" role="dialog">
                                <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 45%; width: auto;">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Thông tin đơn hàng</h5>
                                            <button type="button" class="btn-close" @onclick="CancelPayByCash" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="d-flex justify-content-between align-items-start mb-4">
                                                <div class="col-12 mb-3 p-4 border rounded shadow-sm" style="background-color: #f9f9f9;">
                                                    <h5 class="mb-4 text-center">Thông tin tổng tiền</h5>
                                                    <div class="mb-2">
                                                        <label class="me-2"><strong>Tổng tiền :</strong> @totalPrincipal.ToString("N0").Replace(".", ",") VNĐ</label>
                                                    </div>
                                                    <div class="mb-2">
                                                        <label class="me-2"><strong>Tổng tiền đã giảm:</strong>@totalAmount.ToString("N0").Replace(".", ",") VNĐ </label>
                                                    </div>
                                                    @if (isDeliveryVisible)
                                                    {
                                                        <div class="mb-2">
                                                            <label class="me-2"><strong>Phí giao hàng:</strong> @feeShipping.ToString("N0").Replace(".", ",") VNĐ</label>
                                                        </div>
                                                    }
                                                    <div class="mb-2">
                                                        <label class="me-2"><strong>Tỏng thanh toán:</strong> @totalMoney.ToString("N0").Replace(".", ",") VNĐ</label>
                                                    </div>
                                                    <div class="mb-2">
                                                        <label class="me-2"><strong>Nhập số tiền khách đưa:</strong> </label>
                                                        <div class="input-group">
                                                            <input type="text"
                                                                   class="form-control"
                                                                   @bind="khachDua"
                                                                   @bind:event="oninput" />
                                                            <span class="input-group-text">VNĐ</span>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="modal-footer d-flex justify-content-between">
                                            <div>
                                                <button type="button" class="btn btn-secondary" @onclick="CancelPayByCash">Hủy</button>
                                            </div>
                                            <div>
                                                <button type="button" class="btn btn-primary" @onclick="PayByCash">Xác nhận</button>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        }
                        @if (isMomoModalVisible)
                        {
                            <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
                                <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Thanh toán qua MoMo</h5>
                                            <button type="button" class="btn-close" @onclick="CancelMomoPayment" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <iframe src="@payUrl" style="width: 100%; height: 600px; border: none;" allowfullscreen></iframe>
                                        </div>
                                        <div class="modal-footer d-flex justify-content-between">
                                            <div>
                                                <button type="button" class="btn btn-secondary" @onclick="CancelMomoPayment">Hủy</button>
                                            </div>
                                            <div>
                                                <button type="button" class="btn btn-primary" @onclick="ConfirmMomoPayment">Hoàn thành</button>
                                                <button class="btn btn-outline-primary" style="margin-left: 10px;" @onclick="() => DownloadInvoice(selectedOrderId)">Xuất hóa đơn</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="modal-backdrop fade show"></div>
                        }

                    </div>


                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private long selectedOrderId;
    private string customerName = "";
    private bool isCustomerAdded = false; // Kiểm tra xem khách hàng đã được thêm chưa
    private Orders orders = new Orders();
    private Product_Attributes product_Attributes = new Product_Attributes();
    private Order_details order_Details = new Order_details();
    private Users Customer = new Users();
    private List<Users> lst_Customer = new List<Users>();
    private List<Address> lst_Address = new List<Address>();
    private List<Order_details> lst_OrderDetail = new List<Order_details>();
    private List<Orders> lst_Orders = new List<Orders>();
    private List<Product_Attributes> lst_ProductAttributes = new List<Product_Attributes>();
    private bool isAddProductModalVisible = false; // kiểm tra modal danh sách sản phẩm được mở chưa
    private bool isAddCustomerModalVisible = false; // modal danh sách khách hàng
    private bool isCreateCustomerModalVisible = false; // model tạo khách hàng
    private bool isChooseAddress = false; // model danh sách địa chỉ của khách hàng
    private bool isCreateAddress = false; // model tạo mới địa chỉ
    private bool isDeliveryVisible = false;
    private decimal totalAmount = 0; // tổng tiền hàng đã giảm
    private decimal totalPrincipal = 0; // tổng tiền hàng chưa giảm
    decimal discountAmount = 0; // tiền được giảm
    private int totalQuantity = 0;
    private decimal feeShipping = 0; // phí ship
    private decimal totalMoney = 0; // cần thanh toán
    private IEnumerable<Product_Attributes> paged_Orders;
    private List<Product_Attributes> pageProductAttributes = new List<Product_Attributes>();
    private string search_query = string.Empty;
    private int page_number = 1;
    private int total_pages = 1;
    private int page_size = 10;
    private int totalItems;
    private Users selectedCustomer;
    string adminId;
    private string momoError = null; // Lỗi từ phía MoMo
    private string? ErrorCode;
    private string payUrl { get; set; } // URL thanh toán MoMo
    private string qrCodeBase64 { get; set; } // Mã QR Base64 để hiển thị

    private bool modalPayByCash = false;
    private decimal khachDua;

    private bool isMomoModalVisible = false; // Kiểm tra modal MoMo đang mở hay không
                                             // Hiển thị modal QR MoMo

    private List<Size> Size_list = new List<Size>();
    private List<Material> Material_list = new List<Material>();
    private List<Textile_technology> TextileTechnology_list = new List<Textile_technology>();
    private List<Style> Style_list = new List<Style>();
    private List<Product_Posts> product_posts_list = new List<Product_Posts>();
    private string searchFilter = "product_name";

    private string selectedTextileTechnologyId = string.Empty;
    private string selectedMaterialId = string.Empty;
    private string selectedStyleId = string.Empty;
    private string selectedProductId = string.Empty;

    private async Task HandleProductNameChange(ChangeEventArgs e)
    {
        selectedProductId = e.Value?.ToString() ?? string.Empty;
        await ApplyFilters();
    }

    private async Task HandleTextileChange(ChangeEventArgs e)
    {
        selectedTextileTechnologyId = e.Value?.ToString() ?? string.Empty;
        await ApplyFilters();
    }

    private async Task HandleMaterialChange(ChangeEventArgs e)
    {
        selectedMaterialId = e.Value?.ToString() ?? string.Empty;
        await ApplyFilters();
    }

    private async Task HandleStyleChange(ChangeEventArgs e)
    {
        selectedStyleId = e.Value?.ToString() ?? string.Empty;
        await ApplyFilters();
    }

    private async Task ApplyFilters()
    {
        // Lọc sản phẩm theo các điều kiện đã chọn
        var filteredProducts = await productAttributeService.GetAllProductAttributes();

        if (!string.IsNullOrEmpty(selectedProductId))
        {
            filteredProducts = filteredProducts.Where(post =>
                    post.Posts.Id == long.Parse(selectedProductId)).ToList();
        }


        // Lọc theo Công nghệ dệt
        if (!string.IsNullOrEmpty(selectedTextileTechnologyId))
        {
            filteredProducts = filteredProducts.Where(post =>
                post.Textile_technology_id == long.Parse(selectedTextileTechnologyId)).ToList();
        }

        // Lọc theo Chất liệu
        if (!string.IsNullOrEmpty(selectedMaterialId))
        {
            filteredProducts = filteredProducts.Where(post =>
                post.Material_id == long.Parse(selectedMaterialId)).ToList();
        }

        // Lọc theo Phong cách
        if (!string.IsNullOrEmpty(selectedStyleId))
        {
            filteredProducts = filteredProducts.Where(post =>
                post.Style_id == long.Parse(selectedStyleId)).ToList();
        }

        lst_ProductAttributes = filteredProducts;
        StateHasChanged();
    }


    private void ShowMomoModal(string momoUrl)
    {
        payUrl = momoUrl;

        isMomoModalVisible = true;
        StateHasChanged();
    }

    // Xử lý khi nhấn nút "Hủy"
    private async Task CancelMomoPayment()
    {
        var updateitem = await orderService.GetByIdOrders(selectedOrderId);
        if (updateitem.Status == "Đã thanh toán")
        {
            await JS.InvokeVoidAsync("toastr.success", $"Thanh toán thành công");
            isMomoModalVisible = false;
            await ResetViewState();
        }
        else
        {
            isMomoModalVisible = false;
            await LoadOrders();
            StateHasChanged();
        }

    }

    // Xử lý khi nhấn nút "Xác nhận thanh toán"
    private async Task ConfirmMomoPayment()
    {
        var updateitem = await orderService.GetByIdOrders(selectedOrderId);
        if (updateitem.Status == "Đã thanh toán")
        {
            await JS.InvokeVoidAsync("toastr.success", $"Thanh toán thành công");
            isMomoModalVisible = false;
            await ResetViewState();
        }
        else
        {
            await JS.InvokeVoidAsync("toastr.error", $"Đơn hàng chưa được thanh toán");
        }

    }

    // Reset trạng thái sau khi thanh toán xong
    private async Task ResetViewState()
    {
        selectedOrderId = 0;
        customerName = "";
        totalAmount = 0;
        totalQuantity = 0;
        totalMoney = 0;
        feeShipping = 0;
        totalPrincipal = 0;
        discountAmount = 0;
        isCustomerAdded = false;
        lst_OrderDetail.Clear();
        isAddProductModalVisible = false;
        isAddCustomerModalVisible = false;
        isCreateCustomerModalVisible = false;
        khachDua = 0;
        ClearInfoAddress();

        await LoadOrderDetails();
        await LoadOrders();
        await LoadPosts();
        await LoadProducts();
        StateHasChanged();
    }


    private async Task OnSearch()
    {
        lst_ProductAttributes = await productAttributeService.GetAllProductAttributes();
    }

    private async Task LoadPosts()
    {

        string searchTerm = string.IsNullOrEmpty(search_query) ? "" : search_query;
        lst_ProductAttributes = await productAttributeService.GetAllProductAttributes();
        totalItems = await productAttributeService.GetTotalCountAsync(searchTerm);
        total_pages = (int)Math.Ceiling((double)totalItems / page_size);
        StateHasChanged();
    }

    private async Task GoToPage(int page)
    {
        page_number = page;
        await LoadPosts();
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        page_size = newPageSize;
        page_number = 1;
        await LoadPosts();
    }

    private async Task SelectOrder(long orderId) // chọn hóa đơn
    {
        selectedOrderId = orderId;
        lst_OrderDetail = await orderDetailService.GetOrderDetailsByOrderId(selectedOrderId);
        var orderToUpdate = await orderService.GetByIdOrders(selectedOrderId);
        if (orderToUpdate?.User_id != null)
        {
            IsDeliveryVisible = orderToUpdate.Note == "Giao hàng";
            var customer = await userService.GetById(orderToUpdate.Users.Id);
            customerName = customer?.Name;
            isCustomerAdded = customer != null;
        }
        else
        {
            customerName = "Khách lẻ";
            isCustomerAdded = false;
            IsDeliveryVisible = orderToUpdate?.Note == "Giao hàng";
        }
        if (orderToUpdate == null)
        {
            selectedOrderId = 0;
            return;
        }
        if (orderToUpdate.Note == "Giao hàng")
        {
            IsDeliveryVisible = true;
            totalMoney = feeShipping + totalAmount;
        }
        else
        {
            IsDeliveryVisible = false;
            totalMoney = totalAmount;
        }
        var addressString = orderToUpdate.Users?.Address;
        if (!string.IsNullOrEmpty(addressString) && long.TryParse(addressString, out long addressId))
        {
            var address = await addressService.GetAddressById(addressId);
            if (address != null)
            {
                SelectAddress(address);
            }
            else
            {
                ClearInfoAddress();
            }
        }
        else
        {
            ClearInfoAddress();
        }
        await LoadOrderDetails();
    }

    private void ShowAddProductDetailModal()
    {
        isAddProductModalVisible = true;
    } // mở modal sản phẩm

    private async void ShowAddProductModal()
    {
        if (selectedOrderId == 0)
        {
            isAddProductModalVisible = false;
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng chọn hóa đơn trước");
        }
        else
        {
            isAddProductModalVisible = true;
            lst_ProductAttributes = await productAttributeService.GetAllProductAttributes();
        }

    }// danh sách sản phẩm trong modal

    private void CloseAddProductModal()
    {
        isAddProductModalVisible = false;
    }

    private async Task LoadProducts()
    {
        lst_ProductAttributes = await productAttributeService.GetAllProductAttributes();
    }

    private async Task LoadOrderDetails() // danh sách đơn hàng chi tiết của đơn hàng được chọn
    {
        lst_OrderDetail = await orderDetailService.GetOrderDetailsByOrderId(selectedOrderId);
        CalculateTotalMoney();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Material_list = await MaterialService.GetAll();
        TextileTechnology_list = await Textile_technologyServices.GetAll();
        Style_list = await StyleServices.GetAll();
        product_posts_list = await post.GetByTypeAsync("product", page_number, page_size, search_query);

        selectedTextileTechnologyId = string.Empty;
        selectedMaterialId = string.Empty;
        selectedStyleId = string.Empty;

        var currentUserId = await _authStateProvider.GetCurrentUserId();
        if (currentUserId == null)
        {
            adminId = null;
        }
        else
        {
            adminId = currentUserId;
        }
        await LoadPosts();
        await LoadOrders();
        CalculateTotalMoney();
        lst_ProductAttributes = await productAttributeService.GetAllProductAttributes();
        lst_Customer = await userService.GetAll();
        provinces = await address_Service.GetProvincesAsync();
    } // LOAD

    private async Task LoadOrders() // lấy ra các hóa đơn treo ( chưa thanh toán )
    {
        var allOrders = await orderService.GetAll();
        lst_Orders = allOrders.Where(order => order.Status == "Hóa đơn treo").ToList();
        StateHasChanged();
    }

    private async Task DeleteOrder(long id)
    {
        var orderDetails = await orderDetailService.GetOrderDetailsByOrderId(id);
        if (orderDetails == null || !orderDetails.Any())
        {
            await JS.InvokeVoidAsync("toastr.success", "Xóa thành công.");
            await orderService.Delete(id);
        }

        foreach (var orderDetail in orderDetails)
        {
            var productAttribute = await productAttributeService.GetProductAttributesById(orderDetail.Product_Attribute_Id);
            if (productAttribute != null)
            {
                productAttribute.Stock += orderDetail.Quantity;
                await productAttributeService.Update(productAttribute, productAttribute.Id);
            }
            await orderDetailService.Delete(orderDetail.Id);
            await orderService.Delete(id);
            await JS.InvokeVoidAsync("toastr.success", "Xóa đơn hàng và cập nhật kho thành công.");
        }
        selectedOrderId = 0;
        // Làm mới danh sách Orders
        await LoadOrders();
        await LoadOrderDetails();
        await LoadProducts();

    }

    private async Task DeleteOrderDetail(long id) // xóa orderdetail
    {
        var orderDetail = await orderDetailService.GetByIdOrderdetails(id);
        if (orderDetail == null)
        {
            await JS.InvokeVoidAsync("toastr.error", "Không tìm thấy sản phẩm trong đơn hàng.");
            return;
        }

        // Lấy thông tin sản phẩm (ProductAttribute)
        var productAttribute = await productAttributeService.GetProductAttributesById(orderDetail.Product_Attribute_Id);
        if (productAttribute != null)
        {
            // Cộng lại số lượng vào kho
            productAttribute.Stock += orderDetail.Quantity;
            await productAttributeService.Update(productAttribute, productAttribute.Id);
        }

        await orderDetailService.Delete(id);
        CalculateTotalMoney();
        await LoadOrderDetails();
        await LoadProducts();
        await JS.InvokeVoidAsync("toastr.success", "Xóa sản phẩm khỏi đơn hàng thành công.");
        StateHasChanged();

    }

    private async Task UpdateQuantityView(long itemId, int newQuantity)
    {
        if (newQuantity < 1) return; // Tránh việc số lượng nhỏ hơn 1

        var orderDetail = lst_OrderDetail.FirstOrDefault(x => x.Id == itemId);
        if (orderDetail != null)
        {
            var productVariant = orderDetail.ProductAttributes; // Lấy thông tin sản phẩm
            var stock = productVariant.Stock;

            // Tính toán số lượng thay đổi
            int quantityChange = newQuantity - orderDetail.Quantity;

            // Kiểm tra nếu số lượng cần tăng vượt quá tồn kho
            if (quantityChange > 0 && quantityChange > stock)
            {
                await JS.InvokeVoidAsync("toastr.error", "Số lượng trong kho không đủ");
                return;
            }
            productVariant.Stock -= quantityChange;
            orderDetail.Quantity = newQuantity;

            await productAttributeService.Update(productVariant, productVariant.Id);
            await UpdateOrderDetail(orderDetail);

            // Tính lại tổng tiền và cập nhật giao diện
            await LoadProducts();
            CalculateTotalMoney();
            StateHasChanged();
        }
    }

    private async Task UpdateOrderDetail(Order_details orderDetail)
    {
        var orderDetailUpdate = orderDetail;
        orderDetailUpdate.TotalDiscount = (orderDetail.ProductAttributes.Sale_price);
        orderDetailUpdate.UnitPrice = (orderDetail.ProductAttributes.Regular_price);
        await orderDetailService.Update(orderDetailUpdate, orderDetailUpdate.Id);
    }

    private async Task CreateOrder()
    {
        var pendingOrders = lst_Orders.Where(order => order.Status == "Hóa đơn treo").ToList();

        if (pendingOrders.Count >= 10)
        {
            await JS.InvokeVoidAsync("toastr.error", "Chỉ có thể tạo tối đa 10 hóa đơn treo");
            return;
        }
        var newOrder = new Orders
            {
                Note = "Tại quầy",
                CreatedByAdminId = adminId,
                Status = "Hóa đơn treo"
            };
        await orderService.Create(newOrder);
        lst_Orders = await orderService.GetAll();
        await LoadOrders();
    }// tạo order

    private bool IsDeliveryVisible
    {
        get => isDeliveryVisible;
        set
        {
            if (isDeliveryVisible != value)
            {
                isDeliveryVisible = value;

                if (isDeliveryVisible)
                {
                    // Nếu selectedAddress là null, chờ người dùng chọn địa chỉ
                    if (selectedAddress == null)
                    {
                        orders.Note = "Vui lòng chọn địa chỉ giao hàng";
                        orders.Address_Id = null;
                    }
                    else
                    {
                        orders.Address_Id = selectedAddress.Id;
                        orders.Note = "Giao hàng";
                    }

                    totalMoney = feeShipping + totalAmount;
                }
                else
                {
                    orders.Address_Id = null;
                    orders.Note = "Tại quầy";
                    totalMoney = totalAmount;
                }

                _ = UpdateOrderNote();
                StateHasChanged();
            }
        }
    }

    private async Task UpdateOrderNote()
    {
        orders = await orderService.GetByIdOrders(selectedOrderId);
        if (orders == null)
        {
            Console.WriteLine("Orders object is null. Cannot update note.");
            return;
        }

        try
        {
            orders.Note = isDeliveryVisible ? "Giao hàng" : "Tại quầy";
            orders.CreatedByAdminId = adminId;
            await orderService.Update(orders, selectedOrderId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating order note: {ex.Message}");
        }
    }

    private async Task AddProduct(Order_details orderDetails, long productAttributeId)
    {
        int quantity = 1;

        var productAttribute = await productAttributeService.GetProductAttributesById(productAttributeId);

        if (productAttribute == null || productAttribute.Stock == null || productAttribute.Stock == 0)
        {
            await JS.InvokeVoidAsync("toastr.error", "Sản phẩm hiện không có trong kho.");
            return;
        }

        if (quantity > productAttribute.Stock)
        {
            await JS.InvokeVoidAsync("toastr.error", "Sản phẩm trong kho không đủ.");
            return;
        }

        var existingOrderDetail = await orderDetailService.GetByOrderIdAndProductAttributeId(selectedOrderId, productAttributeId);
        if (existingOrderDetail != null)
        {
            existingOrderDetail.Quantity += quantity;
            existingOrderDetail.TotalDiscount = productAttribute.Sale_price;
            existingOrderDetail.UnitPrice = productAttribute.Regular_price;
            await orderDetailService.Update(existingOrderDetail, existingOrderDetail.Id);
        }
        else
        {
            orderDetails = new Order_details
                {
                    Quantity = quantity,
                    OrderId = selectedOrderId,
                    Product_Attribute_Id = productAttributeId,
                    TotalDiscount = productAttribute.Sale_price,
                    UnitPrice = productAttribute.Regular_price

                };

            await orderDetailService.Create(orderDetails);
        }

        productAttribute.Stock -= quantity;
        await productAttributeService.Update(productAttribute, productAttributeId);

        await LoadOrderDetails();
        await LoadProducts();
        CalculateTotalMoney();
        StateHasChanged();

        await JS.InvokeVoidAsync("toastr.success", "Thêm sản phẩm vào đơn hàng thành công.");
    }

    private async void ShowListCustomerModal()
    {
        if (selectedOrderId == 0)
        {
            isAddCustomerModalVisible = false;
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng chọn hóa đơn trước");
        }
        else
        {
            isAddCustomerModalVisible = true;
            lst_Customer = await userService.GetAll();
        }
    } // mở modal khách hàng

    private async void CloseModalAddCustomer()
    {
        isAddCustomerModalVisible = false;
    }

    private async Task AddCustomer(Users user)
    {
        selectedCustomer = user;
        var orderToUpdate = await orderService.GetByIdOrders(selectedOrderId);
        if (orderToUpdate != null)
        {
            orderToUpdate.User_id = selectedCustomer.Id;
            orderToUpdate.CreatedByAdminId = adminId;
            await orderService.Update(orderToUpdate, orderToUpdate.Id);
            var updatedOrder = await orderService.GetByIdOrders(selectedOrderId);
            if (updatedOrder != null)
            {
                customerName = updatedOrder.Users?.Name ?? "Khách lẻ";
                isCustomerAdded = updatedOrder.User_id != 1;
            }
        }
        isAddCustomerModalVisible = false;
        customerName = selectedCustomer.Name;
        isCustomerAdded = true;
        ClearInfoAddress();

        // Cập nhật lại thông tin đơn hàng
        lst_OrderDetail = await orderDetailService.GetOrderDetailsByOrderId(selectedOrderId);
        await LoadOrders();
        CalculateTotalMoney();
    }
    // tính tiền checkout
    private async void CalculateTotalMoney()
    {
        totalAmount = lst_OrderDetail.Sum(item =>
        {
            decimal price = (item.ProductAttributes.Sale_price != null && item.ProductAttributes.Sale_price > 0)
                ? (decimal)item.ProductAttributes.Sale_price.Value
                : (decimal)(item.ProductAttributes.Regular_price ?? 0);

            return item.Quantity * price;
        });

        totalPrincipal = lst_OrderDetail.Sum(item =>
        {
            return item.Quantity * (item.ProductAttributes.Regular_price ?? 0);
        });

        discountAmount = totalPrincipal - totalAmount;

        totalQuantity = lst_OrderDetail.Sum(item => item.Quantity);
        feeShipping = CalculateShippingFee();

        totalMoney = isDeliveryVisible ? (feeShipping + totalAmount) : totalAmount;
    }

    private async void CreateCustomer()
    {
        var phoneRegex = new System.Text.RegularExpressions.Regex(@"^0\d{9}$");
        var emailRegex = new System.Text.RegularExpressions.Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");

        // Kiểm tra số điện thoại
        if (string.IsNullOrEmpty(Customer.Phone) || !phoneRegex.IsMatch(Customer.Phone))
        {
            await JS.InvokeVoidAsync("toastr.error", "Số điện thoại không hợp lệ. Số điện thoại phải bắt đầu bằng 0 và có 10 chữ số.");
            return;
        }
        if (string.IsNullOrEmpty(Customer.Email) || !emailRegex.IsMatch(Customer.Email))
        {
            await JS.InvokeVoidAsync("toastr.error", "Email không hợp lệ. Vui lòng nhập đúng định dạng email.");
            return;
        }
        if (string.IsNullOrEmpty(Customer.Phone) || await userService.IsPhoneExists(Customer.Phone))
        {
            await JS.InvokeVoidAsync("toastr.error", "Số điện thoại đã được đăng ký hoặc không hợp lệ");
            return;
        }

        if (string.IsNullOrEmpty(Customer.Phone))
        {
            await JS.InvokeVoidAsync("toastr.error", "Số điện thoại không được bỏ trống.");
            return;
        }
        if (string.IsNullOrEmpty(Customer.Email) || await userService.IsEmailExists(Customer.Email))
        {
            await JS.InvokeVoidAsync("toastr.error", "Email đã được đăng ký hoặc không hợp lệ.");
            return;
        }

        var createdCustomer = await userService.Create(Customer);
        lst_Customer = await userService.GetAll();

        isCustomerAdded = true;
        customerName = createdCustomer.Name;
        await JS.InvokeVoidAsync("toastr.success", "Thêm khách hàng thành công");
        isCreateCustomerModalVisible = false;
        StateHasChanged();
    }

    private async void OpenModalCreateCustomer()
    {
        isCreateCustomerModalVisible = true;
    }

    private async void CloseModalCreateCustomer()
    {
        isCreateCustomerModalVisible = false;
    }


    private async Task DownloadInvoice(long orderId)
    {
        try
        {
            var fileBytes = await orderService.ExportInvoice(orderId);
            var fileName = $"hoa_don_{orderId}.pdf";

            // Sử dụng JavaScript để tải về file PDF
            using var streamRef = new DotNetStreamReference(stream: new MemoryStream(fileBytes));
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi xuất hóa đơn: {ex.Message}");
        }
    }

    // tính tiền vận chuyển
    private decimal CalculateShippingFee()
    {
        const decimal baseShippingFee = 38000m;
        feeShipping = baseShippingFee;

        if (totalQuantity > 10 && totalQuantity <= 20)
        {
            feeShipping += (totalQuantity - 10) * 5000m;
        }
        else if (totalQuantity > 20 && totalQuantity <= 30)
        {
            feeShipping += (totalQuantity - 10) * 5000m;
            feeShipping -= feeShipping * 0.30m;
        }
        else if (totalQuantity > 30 && totalQuantity <= 50)
        {
            feeShipping += (totalQuantity - 10) * 5000m;
            feeShipping -= feeShipping * 0.50m;
        }
        else if (totalQuantity > 50)
        {
            feeShipping += (totalQuantity - 10) * 5000m;
            feeShipping -= feeShipping * 0.70m;
        }

        return feeShipping;
    }

    private async Task ShowAddress()
    {
        if (selectedOrderId == null)
        {
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng chọn hóa đơn trước");
            return;
        }
        var order = await orderService.GetByIdOrders(selectedOrderId);
        if (order?.User_id.HasValue == true)
        {
            isChooseAddress = true;
            lst_Address = await addressService.GetAddressByUserId(order.User_id.Value);
        }
        else
        {
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng thêm thông tin khách hàng trước");
            return;
        }
    }

    private void CloseAddressModal()
    {
        isChooseAddress = false;
    }

    private void OpenCreateAddressModal()
    {
        isCreateAddress = true;
    }

    private async Task CreateAddress()
    {
        if (string.IsNullOrEmpty(address.Ward_commune) || string.IsNullOrEmpty(address.Province_city) || string.IsNullOrEmpty(address.District))
        {
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng nhập đầy đủ thông tin địa chỉ.");
            return;
        }
        if (string.IsNullOrEmpty(address.Phone) || !Regex.IsMatch(address.Phone, @"^0\d{9}$"))
        {
            await JS.InvokeVoidAsync("toastr.error", "Số điện thoại không hợp lệ. Vui lòng nhập số điện thoại bắt đầu bằng 0 và có 10 chữ số.");
            return;
        }
        var order = await orderService.GetByIdOrders(selectedOrderId);
        if (order?.User_id.HasValue == true)
        {
            address.User_Id = order.User_id.Value; // Gắn User_Id từ Order
            if (address.Type == null) address.Type = "";
            if (address.Status == null) address.Status = "";

            var province = provinces.FirstOrDefault(p => p.Id == address.Province_city);
            var district = districts.FirstOrDefault(d => d.Id == address.District);
            var ward = wards.FirstOrDefault(w => w.Id == address.Ward_commune);
            address.Province_city = province.Name;
            address.District = district?.Name;
            address.Ward_commune = ward?.Name;

            var result = await addressService.CreateAddress(address);

            if (result)
            {
                await JS.InvokeVoidAsync("toastr.success", "Địa chỉ đã được tạo thành công.");
                isCreateAddress = false;
                lst_Address = await addressService.GetAddressByUserId(order.User_id.Value);
            }
            else
            {
                await JS.InvokeVoidAsync("toastr.error", "Tạo địa chỉ thất bại.");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("toastr.error", "Không tìm thấy người dùng liên kết với đơn hàng.");
        }
    }

    private void CloseCreateAddress()
    {
        isCreateAddress = false;
    }

    // tách được đoạn code này ra chỗ khác thì càng tốt
    private List<Province> provinces = new List<Province>();
    private List<Districted> districts = new List<Districted>();
    private List<Ward> wards = new List<Ward>();
    private Address address = new Address();
    private bool hasDistricts = false;
    private bool hasWards = false;
    [Inject] private AddressService address_Service { get; set; }
    private async Task OnProvinceChange(ChangeEventArgs e)
    {
        var selectedProvinceId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedProvinceId))
        {
            // Thiết lập tỉnh hiện tại và xóa các quận huyện, xã
            address.Province_city = selectedProvinceId;
            districts = await address_Service.GetDistrictsAsync(int.Parse(selectedProvinceId));
            hasDistricts = districts.Count > 0;
            wards.Clear();
            hasWards = false;
        }
    }
    private async Task OnDistrictChange(ChangeEventArgs e)
    {
        var selectedDistrictId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedDistrictId))
        {
            address.District = selectedDistrictId;
            wards = await address_Service.GetWardsAsync(int.Parse(selectedDistrictId));
            hasWards = wards.Count > 0;
        }
    }
    private async Task OnWardChange(ChangeEventArgs e)
    {
        var selectedWardId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedWardId))
        {
            address.Ward_commune = selectedWardId;
        }
    }
    // Các biến để bind vào form
    private string city;
    private string district;
    private string ward;
    private string street;
    private string phone;
    private Address selectedAddress;
    private async Task SelectAddress(Address address)
    {
        ClearInfoAddress();
        if (address != null)
        {
            selectedAddress = address;
            city = address.Province_city;
            district = address.District;
            ward = address.Ward_commune;
            street = address.Street;
            phone = address.User?.Phone;
        }
        var order = await orderService.GetByIdOrders(selectedOrderId);
        order.Address_Id = selectedAddress.Id;
        order.CreatedByAdminId = adminId;
        isChooseAddress = false;
        await orderService.Update(order, selectedOrderId);
    }
    private void ClearInfoAddress()
    {
        selectedAddress = null;
        city = string.Empty;
        district = string.Empty;
        ward = string.Empty;
        street = string.Empty;
        phone = string.Empty;
    }

    private async Task OpenModalPayByCash()
    {
        if (lst_OrderDetail.Count == 0)
        {
            await JS.InvokeVoidAsync("toastr.warning", "Đơn hàng không có sản phẩm nào");
            return;
        }
        else
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận khách hàng thanh toán bằng tiền mặt?");
            if (confirmed)
            {
                modalPayByCash = true;
            }
        }

    }


    private async Task CancelPayByCash()
    {
        modalPayByCash = false;
    }

    private async Task PayByCash()
    {
        if (khachDua < totalMoney)
        {
            await JS.InvokeVoidAsync("toastr.warning", "Khách hàng chưa đưa đủ tiền!");
            return;
        }
        else
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận in hóa đơn cho khách hàng không ?");
            if (confirmed)
            {
                DownloadInvoice(selectedOrderId);
            }
            CheckOut("cash");
            modalPayByCash = false;

        }

    }

    private async Task PayByMomo()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận khách hàng thanh toán qua MoMo?");
        if (confirmed)
        {
            CheckOut("momo");
        }
    }
    private async Task CheckOut(string paymentMethod)
    {
        if (isDeliveryVisible && selectedAddress == null)
        {
            await JS.InvokeVoidAsync("toastr.warning", "Vui lòng chọn địa chỉ giao hàng!");
            return;
        }
        if (lst_OrderDetail == null || !lst_OrderDetail.Any())
        {
            await JS.InvokeVoidAsync("toastr.warning", "Đơn hàng chưa có sản phẩm nào.");
            return;
        }

        var orderToUpdate = await orderService.GetByIdOrders(selectedOrderId);
        if (orderToUpdate != null)
        {
            CalculateTotalMoney();

            orderToUpdate.TotalAmount = totalAmount; // tiền hàng đã giảm
            orderToUpdate.TotalPrincipal = totalPrincipal; // Tổng tiền hàng chưa giảm
            orderToUpdate.Totalmoney = totalMoney; // tổng cần thanh toán ( nếu có ship )
            orderToUpdate.CreatedByAdminId = adminId;
            if (isDeliveryVisible)
            {
                orderToUpdate.Status = "Đã xác nhận";
                orderToUpdate.FeeShipping = feeShipping;
                orderToUpdate.Address_Id = selectedAddress?.Id;
            }
            else
            {
                orderToUpdate.Status = "Hóa đơn treo";
                orderToUpdate.FeeShipping = 0;
                orderToUpdate.Address_Id = null;
            }
            await orderService.Update(orderToUpdate, orderToUpdate.Id);

            if (paymentMethod == "momo")
            {
                try
                {
                    // Tạo giao dịch MoMo
                    var momoResponse = await orderService.CreateMomoPaymentUrl(customerName, orderToUpdate.Totalmoney ?? 0, $"Thanh toán hóa đơn {selectedOrderId}");
                    if (!string.IsNullOrEmpty(momoResponse.PayUrl))
                    {
                        // Hiển thị modal QR code MoMo
                        orderToUpdate.TypePayment = "Chuyển khoản MoMo";
                        ShowMomoModal(momoResponse.PayUrl);
                        await orderService.Update(orderToUpdate, orderToUpdate.Id);

                        if (orderToUpdate.Status == "Đã xác nhận")
                        {
                            var newOrderTracking = new order_trackings
                                {
                                    OrderId = orderToUpdate.Id,
                                    Status = isDeliveryVisible ? "Đã thanh toán" : "Đã hoàn thành",
                                    Note = isDeliveryVisible ? "Đã xác nhận đơn hàng Tại quầy , Khách hàng đã thanh toán" : " Đã xác nhận",
                                    Created_at = DateTime.Now,
                                    Created_by = adminId
                                };
                            await orderTrackingService.AddOrderTracking(newOrderTracking);
                        }


                    }
                    else
                    {
                        await JS.InvokeVoidAsync("toastr.error", "Không thể tạo giao dịch MoMo.");
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("toastr.error", $"Lỗi khi xử lý thanh toán MoMo: {ex.Message}");
                }
            }
            else
            {
                orderToUpdate.TypePayment = "Thanh toán tiền mặt";
                orderToUpdate.Status = "Đã thanh toán";
                orderToUpdate.Address_Id = selectedAddress?.Id;
                await orderService.Update(orderToUpdate, orderToUpdate.Id);
                await JS.InvokeVoidAsync("toastr.success", "Đơn hàng đã được thanh toán thành công!");
                await ResetViewState();


                var newOrderTracking = new order_trackings
                    {
                        OrderId = orderToUpdate.Id,
                        Status = isDeliveryVisible ? "Đã thanh toán" : "Đã hoàn thành",
                        Note = isDeliveryVisible ? "Đã xác nhận đơn hàng Tại quầy , Khách hàng đã thanh toán" : " Đã xác nhận",
                        Created_at = DateTime.Now,
                        Created_by = adminId
                    };
                await orderTrackingService.AddOrderTracking(newOrderTracking);
            }



            if (selectedCustomer != null && orderToUpdate.Status == "Đã thanh toán")
            {
                var emailUser = selectedCustomer.Email;
                string emailSubject = "ĐƠN HÀNG CỦA BẠN ĐÃ ĐƯỢC ĐẶT THÀNH CÔNG";
                string emailMessage = $@"
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset='utf-8'>
                    <title>{emailSubject}</title>
                </head>
                <body>
                    <h2>Cảm ơn bạn đã lựa chọn tin tưởng HangKenh!</h2>
                    <p>Xin chào {Customer.Name} đơn hàng {orderToUpdate.Id} của bạn đã được đặt hàng thành công</p>
                    <p>Cảm ơn bạn đã chọn HangKenh!</p>
                    <p>Trân trọng,<br />Đội ngũ HangKenh</p>
                     <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTy9z_jY_2Jlieg9lmeq_-TnRpWE2T4Kdw8JA&s' alt='HangKenh Logo' style='float: left;'; margin: auto; width: 100%; max-width: 250px;' />
                </body>
                </html>
                ";
                await email.SendEmailAsync(emailUser, emailSubject, emailMessage);
            }

        }
        isDeliveryVisible = false;
        await LoadOrderDetails();
        await LoadOrders();
        StateHasChanged();
    }

}       