@page "/admin/page/create"
@inject NavigationManager nav
@inject IPostSer sev
@inject ITagsServices stag
@inject IBannerServices bnser
@inject IJSRuntime JS
@using BlazorBootstrap


<EditForm Model="Posts" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="page-wrapper">
        <div class="page-header d-print-none">
            <div class="container-xl">
                <div class="row g-2 align-items-center">
                    <div class="col">
                        <h2 class="page-title">
                            Thêm trang
                        </h2>
                    </div>
                </div>
            </div>
        </div>
        <div class="page-body">
            <div class="container-xl">
                <div class="row">
                    <div class="col-md-9 col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="title" class="form-label">Tên bài viết<span class="text-danger">*</span></label>
                                    <input id="title" class="form-control" @bind="Posts.Title" placeholder="Tên trang" @oninput="GenerateSlug" />
                                    <ValidationMessage For="@(() => Posts.Title)" />
                                </div>

                                <div class="mb-3">
                                    <label for="seoSlug" class="form-label">Đường dẫn<span class="text-danger">*</span></label>
                                    <InputText id="seoSlug" class="form-control" @bind-Value="Posts.Slug" />
                                    <ValidationMessage For="@(() => Posts.Slug)" />
                                </div>

                                <div class="mb-3">
                                    <label for="shortDescription" class="form-label">Mô tả ngắn</label>
                                    <InputTextArea id="shortDescription" class="form-control" rows="3" @bind-Value="Posts.Short_description" />
                                </div>

                                <div class="mb-3">
                                    <label for="tinymce-textarea" class="form-label">Mô tả</label>
                                    <textarea id="tinymce-textarea" @bind="Posts.Description" class="form-control" rows="7"></textarea>
                                </div>
                            </div>
                        </div>
                        @*  Banner *@
                        <div class="accordion bg-white mt-3">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                            data-bs-target="#banner_block" aria-expanded="true">
                                        Cấu hình banner
                                    </button>
                                </h2>
                                <div id="banner_block" class="accordion-collapse collapse show">
                                    <div class="card-body pb-4 px-4" style="height: 300px">
                                        <div class="mb-3">
                                            <label for="title" class="form-label">Tiêu đề</label>
                                            <InputText id="title" class="form-control" @bind-Value="banner.Name" placeholder="Tiêu đề" />
                                            <ValidationMessage For="@(() => banner.Name)" />
                                        </div>
                                        <div>
                                            <div id="banner_image"
                                                 class="image-post-box d-flex align-items-center justify-content-center open-media-modal"
                                                 data-multiple="false"
                                                 data-refer-id="#banner_image" onclick="openMediaBannerModal()">
                                                @if (!string.IsNullOrEmpty(banner.Meta_data))
                                                {
                                                    <img src="@banner.Meta_data" class="object-cover" />
                                                }
                                                else
                                                {
                                                    <div class="icon d-flex align-items-center justify-content-center">
                                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke-width="1"
                                                             stroke="currentColor" fill="none" stroke-linecap="round"
                                                             stroke-linejoin="round">
                                                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                            <path d="M12 5l0 14" />
                                                            <path d="M5 12l14 0" />
                                                        </svg>
                                                    </div>
                                                }
                                                <ValidationMessage For="@(() => banner.Meta_data)" />
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                        @*    End banner *@
                    </div>
                    <div class="col-md-3 col-12">
                        <div class="sticky-top position-sticky">
                            <div class="accordion bg-white mb-3 mt-3 mt-md-0">
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button " type="button" data-bs-toggle="collapse"
                                                data-bs-target="#action-1" aria-expanded="true">
                                            Khởi tạo
                                        </button>
                                    </h2>
                                    <div class="accordion-collapse collapse show" id="action-1" data-bs-parent="#accordion-example">
                                        <div class="accordion-body pt-0">
                                            <div class="form-group mb-3">
                                                <label class="form-label">Trạng thái<span class="text-danger">*</span></label>
                                                <select @bind="Posts.Status" class="form-control">

                                                    @foreach (var status in statuses.Where(p => p.Key != "delete"))
                                                    {
                                                        <option value="@status.Key" selected="@(Posts.Status == status.Key)">
                                                            @status.Value
                                                        </option>
                                                    }
                                                </select>
                                            </div>

                                            <!-- Nút gửi -->
                                            <button type="submit" class="btn btn-primary" style="float: right">
                                                Tạo trang
                                            </button>
                                            <div class="clearfix"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- #region ảnh đại diện -->
                            <div class="accordion bg-white mb-3">
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button " type="button" data-bs-toggle="collapse"
                                                data-bs-target="#category" aria-expanded="true">
                                            Ảnh đại diện
                                        </button>
                                    </h2>
                                    <div class="accordion-collapse collapse show" data-bs-parent="#accordion-example">
                                        <div class="accordion-body pt-0">
                                            <div id="feature_image" class="image-post-box d-flex align-items-center justify-content-center"
                                                 data-multiple="false" data-refer-id="#feature_image" onclick="openMediaModal()">
                                                @if (!string.IsNullOrEmpty(Posts.Feature_image))
                                                {
                                                    <img src="@Posts.Feature_image" class="w-100 h-100 object-cover" />
                                                }
                                                else
                                                {
                                                    <div class="icon d-flex align-items-center justify-content-center">
                                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke-width="1" stroke="currentColor" fill="none">
                                                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                            <path d="M12 5v14" />
                                                            <path d="M5 12h14" />
                                                        </svg>
                                                    </div>
                                                }
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>                          
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<Media_modal OnImageSelected="HandleImageSelected" @ref="mediaModalRef"></Media_modal>
<Media_manager OnImageSelected="HandleImageSelectedBanner" @ref="media_ManagerRef"></Media_manager>
<ConfirmDialog @ref="dialog" />
@code {
    private Product_Posts Posts = new Product_Posts();
    private Banner banner = new Banner();
    private Tags tags = new Tags();
    private List<Tags> TagsList = new List<Tags>();
    private List<long> SelectedTags = new List<long>();
    private Dictionary<string, string> statuses = Product_Posts.STATUSES;
    private bool tinyMCEInitialized = false;
    private Media_modal mediaModalRef;
    private Media_manager media_ManagerRef;
    private long postId;
    private Modal modaltags = default!;
    private ConfirmDialog dialog = default!;
    private async Task OnShowModalClickTags()
    {
        await modaltags.ShowAsync();
    }
    private async Task OnHideModalClickTags()
    {
        await modaltags.HideAsync();
    }

    private async Task HandleImageSelected(string imagePath)
    {
        // Nếu imagePath là null, xóa ảnh đại diện
        Posts.Feature_image = imagePath ?? string.Empty;
        StateHasChanged();
        await JS.InvokeVoidAsync("closeMediaModal");
    }
    private async Task HandleImageSelectedBanner(string imagePath)
    {
        // Nếu imagePath là null, xóa ảnh banner
        banner.Meta_data = imagePath ?? string.Empty;
        StateHasChanged();
        await JS.InvokeVoidAsync("closeMediaBannerModal");
    }
    private async Task LoadPosts()
    {
        //  TagsList = await stag.GetAll();
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        statuses = Product_Posts.STATUSES.ToDictionary(k => k.Key, v => v.Value);
        Posts = new Product_Posts
            {
                Status = Product_Posts.STATUS_PUBLISH // Thiết lập giá trị mặc định
            };
        await LoadPosts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!tinyMCEInitialized)
            {
                await JS.InvokeVoidAsync("initTinyMCE");
                tinyMCEInitialized = true;
            }
        }


    }
    public async ValueTask DisposeAsync()
    {
        if (tinyMCEInitialized)
        {
            await JS.InvokeVoidAsync("tinymce.remove", "#tinymce-textarea");
        }
    }
    private void GenerateSlug(ChangeEventArgs e)
    {
        if (e.Value is string title && !string.IsNullOrWhiteSpace(title))
        {
            Posts.Slug = CreateSlug(title);
        }
    }

    private string CreateSlug(string input)
    {
        // Chuyển sang chữ thường
        string result = input.ToLowerInvariant();

        // Loại bỏ dấu tiếng Việt
        result = RemoveDiacritics(result);

        // Loại bỏ ký tự không phải chữ/số và thay thế khoảng trắng bằng dấu gạch ngang
        result = System.Text.RegularExpressions.Regex.Replace(result, @"[^a-z0-9\s-]", "");
        result = System.Text.RegularExpressions.Regex.Replace(result, @"\s+", "-").Trim('-');

        return result;
    }

    private string RemoveDiacritics(string text)
    {
        var normalized = text.Normalize(System.Text.NormalizationForm.FormD);
        var stringBuilder = new System.Text.StringBuilder();
        foreach (var c in normalized)
        {
            var unicodeCategory = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
            if (unicodeCategory != System.Globalization.UnicodeCategory.NonSpacingMark)
            {
                stringBuilder.Append(c);
            }
        }
        return stringBuilder.ToString().Normalize(System.Text.NormalizationForm.FormC);
    }
    private async Task<bool> IsSlugUnique(string slug)
    {
        try
        {
            return await sev.CheckSlug(slug); // Gọi API kiểm tra Slug
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking slug: {ex.Message}");
            return false;
        }
    }

    private async void HandleValidSubmit()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        var confirmation = await dialog.ShowAsync(
            title: "Đưa ra sự lựa chọn",
            message1: "Bạn có muốn thêm trang?",
            confirmDialogOptions: options);
        if (confirmation)
        {
            if (string.IsNullOrWhiteSpace(banner.Name))
            {
                await JS.InvokeVoidAsync("toastr.error", "Tên banner là bắt buộc.");
                return;
            }

            if (string.IsNullOrWhiteSpace(banner.Meta_data))
            {
                await JS.InvokeVoidAsync("toastr.error", "Ảnh của banner là bắt buộc.");
                return;
            }
            Posts.Description = await JS.InvokeAsync<string>("getTinyMCEContent");       
            bool isSlugUnique = await IsSlugUnique(Posts.Slug ?? string.Empty);
            if (!isSlugUnique)
            {
                await JS.InvokeVoidAsync("toastr.error", "Slug đã tồn tại. Vui lòng chọn Slug khác."); // Thông báo lỗi
                return;
            }

            try
            {
                postId = await sev.CreatePage(Posts, SelectedTags);
                banner.Type = "page";
                await bnser.AddBannerToPost(postId, banner);
                await JS.InvokeVoidAsync("toastr.success", "Thêm trang thành công");
                nav.NavigateTo("/admin/page");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                await JS.InvokeVoidAsync("toastr.error", "Không thể thêm trang. Vui lòng thử lại.");
            }
        }
        else
        {
            return;
        }
    }
}