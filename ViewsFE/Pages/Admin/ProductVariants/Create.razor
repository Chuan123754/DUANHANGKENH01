@page "/Admin/productVariant/Create"
@using System.ComponentModel.DataAnnotations
@using ViewsFE.DTO
@using appAPI.DTO
@inject NavigationManager nav
@inject IProductAttributeServices productAttributes
@inject IPostSer post
@inject IProductVariantServices productVariant
@inject IMaterialServices material
@inject ISizeServices size
@inject IColorServices color
@inject IStyleServices style
@inject ITextile_technologyServices tech
@inject IJSRuntime JS

<style>
    .form-check {
        margin-bottom: 0.5rem;
        gap: 5px;
    }

    .form-check-label {
        margin-right: 3px;
    }
</style>
<EditForm Model="product_Variant" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="page-wrapper">
        <div class="page-header d-print-none">
            <div class="container-xl">
                <div class="row g-2 align-items-center">
                    <div class="col">
                        <h2 class="page-title">Thêm thuộc tính sản phẩm</h2>
                    </div>
                </div>
            </div>
        </div>

        <div class="page-body">
            <div class="container-xl">
                <div class="row">
                    <div class="col-md-9 col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="mb-3">
                                    @*Tên sản phẩm *@
                                    <label class="form-label">Chọn Sản Phẩm <span class="text-danger">*</span></label>
                                    <select class="form-select" @onchange="OnProductChange" disabled="@isProductVariantCreated">
                                        <option value="">Chọn sản phẩm</option>
                                        @foreach (var item in product_posts_list)
                                        {
                                            <option value="@item.Id">@item.Title</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Chọn Công Nghệ Dệt <span class="text-danger">*</span></label>
                                    <select class="form-select" @bind="product_Variant.Textile_technology_id" disabled="@isProductVariantCreated">
                                        <option value="">Chọn công nghệ dệt</option>
                                        @foreach (var tech in textileTechnologyList)
                                        {
                                            <option value="@tech.Id">@tech.Title</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Chọn Kiểu Dáng <span class="text-danger">*</span></label>
                                    <select class="form-select" @bind="product_Variant.Style_id" disabled="@isProductVariantCreated">
                                        <option value="">Chọn kiểu dáng</option>
                                        @foreach (var style in styleList)
                                        {
                                            <option value="@style.Id">@style.Title</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Chọn Chất Liệu <span class="text-danger">*</span></label>
                                    <select class="form-select" @bind="product_Variant.Material_id" disabled="@isProductVariantCreated">
                                        <option value="">Chọn chất liệu</option>
                                        @foreach (var material in materialList)
                                        {
                                            <option value="@material.Id">@material.Title</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label"> Mô tả</label>
                                    <InputText @bind-Value="product_Variant.Description" class="form-control" disabled="@isProductVariantCreated" />
                                </div>
                                <button class="btn btn-primary" @onclick="CreateProductVariant">Tạo sản phẩm</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 col-12">
                        <div class="accordion bg-white mb-3">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#designerImage" aria-expanded="true">
                                        Ảnh sản phẩm
                                    </button>
                                </h2>

                                <div class="accordion-collapse collapse show" data-bs-parent="#accordion-example">
                                    <div class="accordion-body pt-0">
                                        <div id="feature_image" class="image-post-box d-flex align-items-center justify-content-center"
                                             onclick="openMediaModal()">
                                            @if (product_Variant?.Posts?.Feature_image != null && !string.IsNullOrEmpty(product_Variant.Posts.Feature_image))
                                            {
                                                <img src="@product_Variant.Posts.Feature_image" class="w-100 h-100 object-cover" />
                                            }
                                            else
                                            {
                                                <div class="icon d-flex align-items-center justify-content-center">
                                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke-width="1" stroke="currentColor" fill="none">
                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                        <path d="M12 5v14" />
                                                        <path d="M5 12h14" />
                                                    </svg>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>

                                @if (isProductVariantCreated)   
                                {
                                    <div class="accordion bg-white mb-3">
                                        <div class="accordion-item">
                                            <h2 class="accordion-header">
                                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#category" aria-expanded="true">
                                                    Biến thể sản phẩm
                                                </button>
                                            </h2>
                                            <div class="accordion-collapse collapse show" data-bs-parent="#accordion-example">
                                                <div class="accordion-body pt-0">
                                                    <div class="form-group mb-3">
                                                        <label class="form-label">Chọn Màu Sắc <span class="text-danger">*</span></label>
                                                        <div class="dropdown">
                                                            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="colorDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                                Chọn màu sắc
                                                            </button>
                                                            <ul class="dropdown-menu" aria-labelledby="colorDropdown">
                                                                @foreach (var color in colorList)
                                                                {
                                                                    <li>
                                                                        <div class="form-check d-flex justify-content-between align-items-center">
                                                                            <!-- Thêm màu sắc -->
                                                                            <label class="form-check-label d-flex align-items-center" for="color-@color.Id">
                                                                                <span class="color-box" style="background-color:@color.Color_code; width: 20px; height: 20px; margin-right: 10px; border-radius: 50%;"></span>
                                                                                @color.Title
                                                                            </label>
                                                                            <input type="checkbox"
                                                                                   id="color-@color.Id"
                                                                                   @onchange="(e) => OnColorSelectionChanged(color.Id, e.Value)" />
                                                                        </div>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    </div>

                                                    <div class="form-group mb-3">
                                                        <label class="form-label">Chọn Kích Thước <span class="text-danger">*</span></label>
                                                        <div class="dropdown">
                                                            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="sizeDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                                Chọn kích thước
                                                            </button>
                                                            <ul class="dropdown-menu" aria-labelledby="sizeDropdown">
                                                                @foreach (var size in sizeList)
                                                                {
                                                                    <li>
                                                                        <div class="form-check d-flex justify-content-between align-items-center">

                                                                            <label class="form-check-label d-flex align-items-center" for="size-@size.Id">
                                                                                @size.Title
                                                                            </label>
                                                                            <input type="checkbox"
                                                                                   id="size-@size.Id"
                                                                                   @onchange="(e) => OnSizeSelectionChanged(size.Id, e.Value)" />
                                                                        </div>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    </div>
                                                    <button class="btn btn-primary" @onclick="CreateProductAttributes">Tạo biến thể</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                @if (isProductAttributesCreated)
                {
                    <div class="col-md-12 col-12">
                        <h3>Danh sách Biến Thể Sản Phẩm</h3>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>SKU</th>
                                    <th>Màu Sắc</th>
                                    <th>Kích Thước</th>
                                    <th>Hình Ảnh</th>
                                    <th>Gía bán</th>
                                    <th>Số lượng kho</th>
                                    <th>Hành Động</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in LST_ProductAttributes)
                                {
                                    <tr>
                                        <td>@item.SKU </td>
                                        <td class="text-center">
                                            <div class="d-flex align-items-center justify-content-center">
                                                <span class="text-truncate">@item.Color?.Title</span>
                                                <div class="color-preview"
                                                     style="width: 16px; height: 16px; background-color: @item.Color?.Color_code; border-radius: 50%; border: 1px solid #ddd; margin-left: 8px;">
                                                </div>
                                            </div>
                                        </td>
                                        <td>@item.Size?.Title</td>
                                        <td>
                                            <div class="accordion-collapse collapse show" data-bs-parent="#accordion-example">
                                                <div class="accordion-body pt-0">
                                                    <div id="feature_image"
                                                         style="width: 80px; height: 80px; aspect-ratio: 1 / 1; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; display: flex; align-items: center; justify-content: center; cursor: pointer;"
                                                         onclick="openMediaModal()">
                                                        <div class="icon" style="display: flex; align-items: center; justify-content: center;">
                                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke-width="1" stroke="currentColor" fill="none">
                                                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                                <path d="M12 5v14" />
                                                                <path d="M5 12h14" />
                                                            </svg>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="input-group">
                                                <input type="text"
                                                       class="form-control"
                                                       value="@string.Format("{0:N0}", item.Regular_price).Replace(".", ",")"
                                                       @oninput="@(e => FormatCurrency(e, item))"
                                                       @onchange="@(e => UpdatePrice(e, item))" />
                                                <span class="input-group-text">VNĐ</span>
                                            </div>
                                        </td>

                                        <td>
                                            <input type="text" @bind="@item.Stock" class="form-control" />
                                        </td>
                                        <td>
                                            <button class="btn btn-danger" @onclick="() => DeleteProductAttribute(item.Id)">Xóa</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <button class="btn btn-primary" @onclick="UpdateProductAttributes">Xác Nhận</button>
                    </div>
                }

            </div>
        </div>
    </div>

</EditForm>
<Media_modal OnImageSelected="HandleImageSelected"></Media_modal>

@code {
    private string search_query = string.Empty;
    private int page_number = 1;
    private int total_pages = 1;
    private int page_size = 10;
    private Product_variants product_Variant = new Product_variants();
    private List<Product_Posts> product_posts_list = new List<Product_Posts>();
    private Product_Attributes product_Attributes = new Product_Attributes();
    private Product_Attributes SelectedProductAttribute { get; set; } = null;
    private List<Product_Attributes> LST_ProductAttributes = new List<Product_Attributes>();
    private List<Style> styleList = new List<Style>();
    private List<Textile_technology> textileTechnologyList = new List<Textile_technology>();
    private List<Material> materialList = new List<Material>();
    private List<Size> sizeList = new List<Size>();
    private List<Color> colorList = new List<Color>();
    private Dictionary<long, bool> colorSelections = new();
    private Dictionary<long, bool> sizeSelections = new();
    private bool isProductVariantCreated = false;
    private long IdProductVariantCreated; // biến lưu id sản phẩm vừa tạo được
    private bool isProductAttributesCreated = false;


    private void FormatCurrency(ChangeEventArgs e, Product_Attributes product)
    {
        var input = e.Value?.ToString() ?? string.Empty;

        // Chỉ lấy các ký tự số
        input = new string(input.Where(char.IsDigit).ToArray());
        if (long.TryParse(input, out var parsedValue))
        {
            product.Regular_price = parsedValue;
        }
    }
    private void UpdatePrice(ChangeEventArgs e, Product_Attributes product)
    {
        var input = e.Value?.ToString().Replace(",", "").Replace(".", "");
        if (decimal.TryParse(input, out var parsedPrice))
        {
            product.Regular_price = (long?)Convert.ToInt64(parsedPrice);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        product_posts_list = await post.GetByTypeAsync("product", page_number, page_size, search_query);
        colorList = await color.GetAll();
        sizeList = await size.GetAll();
        materialList = await material.GetAll();
        textileTechnologyList = await tech.GetAll();
        styleList = await style.GetAll();
        foreach (var color in colorList)
        {
            colorSelections[color.Id] = false;
        }
        foreach (var size in sizeList)
        {
            sizeSelections[size.Id] = false;
        }
    }
    private async Task OnProductChange(ChangeEventArgs e)
    {
        var selectedProductIdString = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedProductIdString) &&
       long.TryParse(selectedProductIdString, out var selectedProductId))
        {
            var selectedProduct = product_posts_list.FirstOrDefault(p => p.Id == selectedProductId);

            if (selectedProduct != null)
            {
                product_Variant.Post_Id = selectedProduct.Id;
                product_Variant.Posts = selectedProduct;
                product_Variant.Posts.Feature_image = selectedProduct.Feature_image;
            }
        }
        StateHasChanged();
    }
    private async Task HandleImageSelected(string imagePath)
    {
        if (SelectedProductAttribute != null)
        {
            SelectedProductAttribute.Image = imagePath ?? string.Empty;
            StateHasChanged();
            await JS.InvokeVoidAsync("closeMediaModal");
        }
    }
    private async Task SelectProductAttribute(Product_Attributes attribute)
    {
        SelectedProductAttribute = attribute;
        await JS.InvokeVoidAsync("openMediaModal");
    }
    private void OnColorSelectionChanged(long colorId, object isChecked)
    {
        colorSelections[colorId] = (bool)isChecked;
        updateVariants();
    }
    private void OnSizeSelectionChanged(long sizeId, object isChecked)
    {
        sizeSelections[sizeId] = (bool)isChecked;
        updateVariants();
    }
    private void updateVariants()
    {
        // xử lý khi các tùy chọn màu và kích thước được thay đổi
        var selectedColors = colorSelections
            .Where(c => c.Value)
            .Select(c => colorList.FirstOrDefault(color => color.Id == c.Key)?.Title)
            .ToList();

        var selectedSizes = sizeSelections
            .Where(s => s.Value)
            .Select(s => sizeList.FirstOrDefault(size => size.Id == s.Key)?.Title)
            .ToList();

    }
    private async Task CreateProductVariant()
    {
        try
        {
            // Kiểm tra trường rỗng
            if (product_Variant.Post_Id == null ||
                product_Variant.Textile_technology_id == null ||
                product_Variant.Style_id == null ||
                product_Variant.Material_id == null)
            {
                await JS.InvokeVoidAsync("toastr.error", "Vui lòng không để trống các thông tin bắt buộc");
                return;
            }

            // Kiểm tra biến thể đã tồn tại
            var existingVariant = await productVariant.FindVariant(
                product_Variant.Post_Id,
                (byte)product_Variant.Textile_technology_id,
                (byte)product_Variant.Style_id,
                (byte)product_Variant.Material_id);

            if (existingVariant != null)
            {
                await JS.InvokeVoidAsync("toastr.warning", "Sản phẩm với các thuộc tính này đã tồn tại");
                return;
            }

            // Tạo biến thể sản phẩm
            product_Variant.Status = "Hoạt động";
            IdProductVariantCreated = await productVariant.Create(product_Variant);
            isProductVariantCreated = true;

            await JS.InvokeVoidAsync("toastr.success", "Tạo sản phẩm thành công!");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private async Task CreateProductAttributes()
    {
        var selectedColors = colorSelections.Where(c => c.Value).Select(c => c.Key).ToList();
        var selectedSizes = sizeSelections.Where(s => s.Value).Select(s => s.Key).ToList();

        // Kiểm tra nếu không có màu hoặc kích thước được chọn
        if (!selectedColors.Any() || !selectedSizes.Any())
        {
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng chọn ít nhất một màu và một kích thước.");
            return;
        }
        foreach (var colorId in selectedColors)
        {
            foreach (var sizeId in selectedSizes)
            {
                var productCreated = await productVariant.GetProductVariantsById(IdProductVariantCreated);
                string productName = productCreated.Posts.Title;
                string textileTechnology = productCreated.Textile_Technology.Slug;
                string style = productCreated.Style.Slug;
                string material = productCreated.Material.Slug; 

                // Tạo tên viết tắt của sản phẩm
                string productAbbreviation = string.Concat(productName
                    .Split(' ', StringSplitOptions.RemoveEmptyEntries)
                    .Select(word => word[0].ToString().ToUpper()));

                // Lấy 3 ký tự đầu của các tiêu đề
                string textileAbbreviation = textileTechnology?.Length >= 3 ? textileTechnology.Substring(0, 3).ToUpper() : textileTechnology.ToUpper();
                string styleAbbreviation = style?.Length >= 3 ? style.Substring(0, 3).ToUpper() : style.ToUpper();
                string materialAbbreviation = material?.Length >= 3 ? material.Substring(0, 3).ToUpper() : material.ToUpper();

                // Tạo mã SKU
                string sku = $"{productAbbreviation}-{textileAbbreviation}-{styleAbbreviation}-{materialAbbreviation}";

                var productAttribute = new Product_Attributes
                    {
                        Product_Variant_Id = IdProductVariantCreated,
                        Color_Id = colorId,
                        Size_Id = sizeId,
                        Status = product_Attributes.Stock == 0 ? "Hết hàng" : "Còn hàng",
                        SKU = sku,

                    };           
                await productAttributes.Create(productAttribute);
                await JS.InvokeVoidAsync("toastr.success", "Tạo thành công các biến thể");
                isProductAttributesCreated = true;
            }
        }

        LST_ProductAttributes = await productAttributes.GetProductAttributesByProductVarianId(IdProductVariantCreated);
        IdProductVariantCreated = 0;
    }


    private async Task UpdateProductAttributes()
    {
        foreach (var item in LST_ProductAttributes)
        {

            if (item.Stock == null)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Số lượng cho SKU {item.SKU} không được để trống.");
                return;
            }

            if (item.Regular_price == null)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Giá bán cho SKU {item.SKU} không được để trống.");
                return;
            }

            if (item.Stock <= 0)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Số lượng cho SKU {item.SKU} phải lớn hơn 0.");
                return;
            }

            if (item.Regular_price <= 0)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Giá giảm cho SKU {item.SKU} phải lớn hơn 0");
                return;
            }

            item.Status = item.Stock == 0 ? "Hết hàng" : "Còn hàng";
            await productAttributes.Update(item, item.Id);
        }

        nav.NavigateTo("/admin/product");
    }

    private async Task DeleteProductAttribute(long id)
    {
        try
        {
            await productAttributes.Delete(id);
            var attributeToRemove = LST_ProductAttributes.FirstOrDefault(attr => attr.Id == id);
            if (attributeToRemove != null)
            {
                LST_ProductAttributes.Remove(attributeToRemove);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi xóa sản phẩm: {ex.Message}");
        }
    }
    private async Task HandleValidSubmit()
    {
        // Logic để xử lý dữ liệu khi form được submit thành công
        Console.WriteLine("Form submitted successfully!");
    }
}
<script>
    function openMediaModal() {
        var modalElement = document.getElementById('mediaModal');
        if (modalElement) {
            if (!modalElement._bsModalInstance) {
                modalElement._bsModalInstance = new bootstrap.Modal(modalElement);
            }
            modalElement._bsModalInstance.show();
        }
    }
    function closeMediaModal() {
        var modalElement = document.getElementById('mediaModal');
        if (modalElement && modalElement._bsModalInstance) {
            modalElement._bsModalInstance.hide();
        }
    }
</script>
