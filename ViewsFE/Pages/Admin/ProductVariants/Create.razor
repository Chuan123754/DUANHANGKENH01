@page "/admin/productVariant/Create/{postId:long}"
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using ViewsFE.DTO
@using System.Text.RegularExpressions;
@inject NavigationManager nav
@inject IProductAttributeServices productAttributesServices
@inject IPostSer post
@inject IMaterialServices material
@inject ISizeServices size
@inject IColorServices color
@inject IStyleServices style
@inject ITextile_technologyServices tech
@inject IJSRuntime JS

<style>
    .form-check {
        margin-bottom: 0.5rem;
        gap: 5px;
    }

    .form-check-label {
        margin-right: 3px;
    }
</style>
<EditForm Model="product_Attributes" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="page-wrapper">
        <div class="page-header d-print-none">
            <div class="container-xl">
                <div class="row g-2 align-items-center">
                    <div class="col">
                        <h2 class="page-title">Thêm thuộc tính cho sản phẩm @CurrentProduct?.Title</h2>
                    </div>
                </div>
            </div>
        </div>

        <div class="page-body">
            <div class="container-xl">
                <div class="row">
                    <div class="col-md-9 col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Tên Sản Phẩm</label>
                                    <div class="form-control" readonly>@CurrentProduct?.Title</div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Chọn Công Nghệ Dệt <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <select class="form-select" @bind="product_Attributes.Textile_technology_id">
                                            <option value="">Chọn công nghệ dệt</option>
                                            @foreach (var tech in textileTechnologyList)
                                            {
                                                <option value="@tech.Id">@tech.Title</option>
                                            }
                                        </select>
                                        <button class="btn btn-outline-primary" @onclick="OpenTextileTechnologyModal">+</button>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Chọn Kiểu Dáng <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <select class="form-select" @bind="product_Attributes.Style_id">
                                            <option value="">Chọn kiểu dáng</option>
                                            @foreach (var style in styleList)
                                            {
                                                <option value="@style.Id">@style.Title</option>
                                            }
                                        </select>
                                        <button class="btn btn-outline-primary" @onclick="OpenStyleModal">+</button>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Chọn Chất Liệu <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <select class="form-select" @bind="product_Attributes.Material_id">
                                            <option value="">Chọn chất liệu</option>
                                            @foreach (var material in materialList)
                                            {
                                                <option value="@material.Id">@material.Title</option>
                                            }
                                        </select>
                                        <button class="btn btn-outline-primary" @onclick="OpenMaterialModal">+</button>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="description" class="form-label"> Mô tả</label>
                                    <InputText @bind-Value="product_Attributes.Description" class="form-control"/>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="col-md-3 col-12">
                        <div class="accordion bg-white mb-3">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#designerImage" aria-expanded="true">
                                        Ảnh sản phẩm
                                    </button>
                                </h2>

                                <div class="accordion-collapse collapse show" data-bs-parent="#accordion-example">
                                    <div class="accordion-body pt-0">
                                        <div id="feature_image" class="image-post-box d-flex align-items-center justify-content-center"
                                             onclick="openMediaModal()">
                                            @if (product_Attributes?.Posts?.Feature_image != null && !string.IsNullOrEmpty(product_Attributes.Posts.Feature_image))
                                            {
                                                <img src="@product_Attributes.Posts.Feature_image" class="w-100 h-100 object-cover" />
                                            }
                                            else
                                            {
                                                <div class="icon d-flex align-items-center justify-content-center">
                                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke-width="1" stroke="currentColor" fill="none">
                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                        <path d="M12 5v14" />
                                                        <path d="M5 12h14" />
                                                    </svg>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                                    <div class="accordion bg-white mb-3">
                                        <div class="accordion-item">
                                            <h2 class="accordion-header">
                                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#category" aria-expanded="true">
                                                    Biến thể sản phẩm
                                                </button>
                                            </h2>
                                            <div class="accordion-collapse collapse show" data-bs-parent="#accordion-example">
                                                <div class="accordion-body pt-0">
                                                    <div class="form-group mb-3">
                                                        <label class="form-label">Chọn Màu Sắc <span class="text-danger">*</span></label>
                                                        <div class="input-group">
                                                            <div class="dropdown">
                                                                <button class="btn btn-outline-primary dropdown-toggle" type="button" id="colorDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                                    Chọn màu sắc
                                                                </button>
                                                                <ul class="dropdown-menu" aria-labelledby="colorDropdown">
                                                                    @foreach (var color in colorList)
                                                                    {
                                                                        <li>
                                                                            <div class="form-check d-flex justify-content-between align-items-center">
                                                                                <label class="form-check-label d-flex align-items-center" for="color-@color.Id">
                                                                                    <span class="color-box" style="background-color:@color.Color_code; width: 20px; height: 20px; margin-right: 10px; border-radius: 50%;"></span>
                                                                                    @color.Title
                                                                                </label>

                                                                                <input type="checkbox" style="margin-right: 15px" id="color-@color.Id" @onchange="(e) => OnColorSelectionChanged(color.Id, e.Value)" />

                                                                            </div>
                                                                        </li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                            <button class="btn btn-outline-primary" @onclick="OpenColorModal">+</button>
                                                        </div>
                                                    </div>


                                                    <div class="form-group mb-3">
                                                        <label class="form-label">Chọn Kích Thước <span class="text-danger">*</span></label>
                                                        <div class="input-group">
                                                            <div class="dropdown">
                                                                <button class="btn btn-outline-primary dropdown-toggle" type="button" id="sizeDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                                    Chọn kích thước
                                                                </button>
                                                                <ul class="dropdown-menu" aria-labelledby="sizeDropdown">
                                                                    @foreach (var size in sizeList)
                                                                    {
                                                                        <li>
                                                                            <div class="form-check d-flex justify-content-between align-items-center">
                                                                                <label class="form-check-label d-flex align-items-center" for="size-@size.Id">
                                                                                    @size.Title
                                                                                </label>

                                                                                <input type="checkbox" style="margin-right: 15px" id="size-@size.Id" @onchange="(e) => OnSizeSelectionChanged(size.Id, e.Value)" />
                                                                            </div>
                                                                        </li>
                                                                    }
                                                                </ul>
                                                            </div>
                                                            <button class="btn btn-outline-primary" @onclick="OpenSizeModal">+</button>
                                                        </div>
                                                    </div>

                                                <button class="btn btn-primary" @onclick="CreateProductVariant">Tạo biến thể</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
                @if (isProductAttributesCreated)
                {
                    <div class="col-md-12 col-12">
                        <h3>Danh sách Biến Thể Sản Phẩm</h3>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Tên Sản Phẩm</th>
                                    <th>Màu Sắc</th>
                                    <th>Kích Thước</th>
                                    <th>Hình Ảnh</th>
                                    <th>Gía bán</th>
                                    <th>Số lượng kho</th>
                                    <th>Hành Động</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in LST_ProductAttributes)
                                {
                                    <tr>
                                        <td>@item.Id </td>
                                        <td>@item.Posts.Title </td>
                                        <td class="text-center">
                                            <div class="d-flex align-items-center justify-content-center">
                                                <span class="text-truncate">@item.Color?.Title</span>
                                                <div class="color-preview"
                                                     style="width: 16px; height: 16px; background-color: @item.Color?.Color_code; border-radius: 50%; border: 1px solid #ddd; margin-left: 8px;">
                                                </div>
                                            </div>
                                        </td>
                                        <td>@item.Size?.Title</td>
                                        <td>
                                            <div class="accordion-collapse collapse show" data-bs-parent="#accordion-example">
                                                <div class="accordion-body pt-0">

                                                    <div style="width: 80px; height: 80px; aspect-ratio: 1 / 1; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; display: flex; align-items: center; justify-content: center; cursor: pointer;"
                                                         id="feature_image" class="image-post-box d-flex align-items-center justify-content-center"
                                                         data-multiple="false" data-refer-id="#feature_image" @onclick="() => openMediaModal(item.Id)">
                                                        @if (!string.IsNullOrEmpty(item.Image))
                                                        {
                                                            <img src="@item.Image" class="w-100 h-100 object-cover" />
                                                        }
                                                        else
                                                        {
                                                            <div class="icon d-flex align-items-center justify-content-center">
                                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke-width="1" stroke="currentColor" fill="none">
                                                                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                                    <path d="M12 5v14" />
                                                                    <path d="M5 12h14" />
                                                                </svg>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="input-group">
                                                <input type="text"
                                                       class="form-control"
                                                       value="@string.Format("{0:N0}", item.Regular_price).Replace(".", ",")"
                                                       @oninput="@(e => FormatCurrency(e, item))"
                                                       @onchange="@(e => UpdatePrice(e, item))" />
                                                <span class="input-group-text">VNĐ</span>
                                            </div>
                                        </td>

                                        <td>
                                            <input type="text" @bind="@item.Stock" class="form-control" />
                                        </td>
                                        <td>
                                            <button class="btn btn-danger"  @onclick="() => DeleteProductAttribute(item.Id)">Xóa</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <button class="btn btn-primary" @onclick="UpdateProductAttributes" >Xác Nhận</button>
                    </div>
                }

            </div>
        </div>
    </div>
</EditForm>

@if (isModalOpen)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (currentForm == "TextileTechnology")
                    {
                        <EditForm Model="newTextileTechnology" OnValidSubmit="CreateTextileTechnology">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label class="form-label">Tên Công Nghệ Dệt</label>
                                <InputText class="form-control" @bind-Value="newTextileTechnology.Title" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Slug</label>
                                <InputText class="form-control" @bind-Value="newTextileTechnology.Slug" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Mô Tả</label>
                                <InputTextArea class="form-control" @bind-Value="newTextileTechnology.Description" />
                            </div>
                            <button type="submit" class="btn btn-primary">Thêm</button>
                        </EditForm>
                    }
                    @if (currentForm == "Style")
                    {
                        <EditForm Model="newStyle" OnValidSubmit="CreateStyle">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label class="form-label">Tên Kiểu Dáng</label>
                                <InputText class="form-control" @bind-Value="newStyle.Title" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Slug</label>
                                <InputText class="form-control" @bind-Value="newStyle.Slug" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Mô Tả</label>
                                <InputTextArea class="form-control" @bind-Value="newStyle.Description" />
                            </div>
                            <button type="submit" class="btn btn-primary">Thêm</button>
                        </EditForm>
                    }
                    @if (currentForm == "Size")
                    {
                        <EditForm Model="newSize" OnValidSubmit="CreateSize">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label class="form-label">Tên Kích Thước</label>
                                <InputText class="form-control" @bind-Value="newSize.Title" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Slug</label>
                                <InputText class="form-control" @bind-Value="newSize.Slug" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Mô Tả</label>
                                <InputTextArea class="form-control" @bind-Value="newSize.Description" />
                            </div>
                            <button type="submit" class="btn btn-primary">Thêm</button>
                        </EditForm>
                    }
                    @if (currentForm == "Material")
                    {
                        <EditForm Model="newMaterial" OnValidSubmit="CreateMaterial">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label class="form-label">Tên Chất Liệu</label>
                                <InputText class="form-control" @bind-Value="newMaterial.Title" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Slug</label>
                                <InputText class="form-control" @bind-Value="newMaterial.Slug" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Mô Tả</label>
                                <InputTextArea class="form-control" @bind-Value="newMaterial.Description" />
                            </div>
                            <button type="submit" class="btn btn-primary">Thêm</button>
                        </EditForm>
                    }
                    @if (currentForm == "Color")
                    {
                        <EditForm Model="newColor" OnValidSubmit="CreateColor">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label class="form-label">Tên Màu Sắc</label>
                                <InputText class="form-control" @bind-Value="newColor.Title" />
                            </div>
                            <div class="form-group mb-3">
                                <label for="color-picker" class="form-label">Bảng mã màu</label>
                                <input type="color" id="color-picker" class="form-control form-control-color" value="#000000"
                                       @onchange="OnColorChange" />
                            </div>
                            <div class="form-group mb-3">
                                <label for="attribute-color_code" class="form-label">Mã màu</label>
                                <InputText id="attribute-color_code" class="form-control" @bind-Value="newColor.Color_code" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Slug</label>
                                <InputText class="form-control" @bind-Value="newColor.Slug" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Mô Tả</label>
                                <InputTextArea class="form-control" @bind-Value="newColor.Description" />
                            </div>
                            <button type="submit" class="btn btn-primary">Thêm</button>
                        </EditForm>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}



<MediaModal_Product OnImageSelected="HandleImageSelected" @ref="mediaModalRef"></MediaModal_Product>


@code {
    [Parameter] public long PostId { get; set; }
    private string search_query = string.Empty;
    private int page_number = 1;
    private int total_pages = 1;
    private int page_size = 10;
    private MediaModal_Product mediaModalRef;
    private List<Product_Posts> product_posts_list = new List<Product_Posts>();
    private Product_Posts CurrentProduct { get; set; }
    private long selectedPostProductId;
    private Product_Attributes product_Attributes = new Product_Attributes();
    private Product_Attributes SelectedProductAttribute { get; set; } = null;
    private List<Product_Attributes> LST_ProductAttributes = new List<Product_Attributes>();
    private List<Style> styleList = new List<Style>();
    private List<Textile_technology> textileTechnologyList = new List<Textile_technology>();
    private List<Material> materialList = new List<Material>();
    private List<Size> sizeList = new List<Size>();
    private List<Color> colorList = new List<Color>();
    private Dictionary<long, bool> colorSelections = new();
    private Dictionary<long, bool> sizeSelections = new();
    private bool isProductAttributesCreated = false;


    private long selectedItemId; // Biến để lưu ID của sản phẩm đang được chỉnh sửa

    [Parameter]
    public bool IsVisible { get; set; } // Thuộc tính được truyền từ component cha

    private string ModalClass => IsVisible ? "modal show d-block" : "modal hide";
    private bool isModalOpen = false;
    private string currentForm = string.Empty;
    private string modalTitle = string.Empty;

    private Textile_technology newTextileTechnology = new Textile_technology();
    private Style newStyle = new Style();
    private Size newSize = new Size();
    private Material newMaterial = new Material();
    private Color newColor = new Color();

    private void OnColorChange(ChangeEventArgs e)
    {
        newColor.Color_code = e.Value?.ToString();
    }

    // Mở modal cho Textile Technology
    private void OpenTextileTechnologyModal()
    {
        OpenModal("TextileTechnology", "Thêm Công Nghệ Dệt");
    }

    // Mở modal cho Style
    private void OpenStyleModal()
    {
        OpenModal("Style", "Thêm Kiểu Dáng");
    }

    // Mở modal cho Size
    private void OpenSizeModal()
    {
        OpenModal("Size", "Thêm Kích Thước");
    }

    // Mở modal cho Material
    private void OpenMaterialModal()
    {
        OpenModal("Material", "Thêm Chất Liệu");
    }

    // Mở modal cho Color
    private void OpenColorModal()
    {
        OpenModal("Color", "Thêm Màu Sắc");
    }

    // Hàm chung để mở modal
    private void OpenModal(string formType, string title)
    {
        isModalOpen = true;
        currentForm = formType;
        modalTitle = title;
        StateHasChanged();
    }

    private void CloseModal()
    {
        isModalOpen = false;
        currentForm = string.Empty;
        modalTitle = string.Empty;
        StateHasChanged();
    }
    private async Task CreateTextileTechnology()
    {
        await tech.Create(newTextileTechnology);
        textileTechnologyList = await tech.GetAll();
        newTextileTechnology = new Textile_technology();
        isModalOpen = false;
        await JS.InvokeVoidAsync("toastr.success", "Thêm mới công nghệ dệt thành công!");
        StateHasChanged();
    }

    private async Task CreateStyle()
    {
        await style.Create(newStyle);
        styleList = await style.GetAll();
        newStyle = new Style();
        await JS.InvokeVoidAsync("toastr.success", "Thêm mới phong cách thành công!");
        StateHasChanged();
        isModalOpen = false;
    }

    private async Task CreateSize()
    {
        await size.Create(newSize);
        sizeList = await size.GetAll();
        newSize = new Size();
        isModalOpen = false;
        await JS.InvokeVoidAsync("toastr.success", "Thêm kích thước thành công!");
        StateHasChanged();
    }

    private async Task CreateMaterial()
    {
        await material.Create(newMaterial);
        materialList = await material.GetAll();
        newMaterial = new Material();
        isModalOpen = false;
        await JS.InvokeVoidAsync("toastr.success", "Thêm mới chất liệu thành công!");
        StateHasChanged();
    }

    private async Task CreateColor()
    {
        await color.Create(newColor);
        colorList = await color.GetAll();
        newColor = new Color();
        isModalOpen = false;
        await JS.InvokeVoidAsync("toastr.success", "Thêm mới màu sắc thành công!");
        StateHasChanged();
    }


    private void FormatCurrency(ChangeEventArgs e, Product_Attributes product)
    {
        var input = e.Value?.ToString() ?? string.Empty;

        // Chỉ lấy các ký tự số
        input = new string(input.Where(char.IsDigit).ToArray());
        if (long.TryParse(input, out var parsedValue))
        {
            product.Regular_price = parsedValue;
        }
    }
    private void UpdatePrice(ChangeEventArgs e, Product_Attributes product)
    {
        var input = e.Value?.ToString().Replace(",", "").Replace(".", "");
        if (decimal.TryParse(input, out var parsedPrice))
        {
            product.Regular_price = (long?)Convert.ToInt64(parsedPrice);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        product_posts_list = await post.GetByTypeAsync("product", page_number, page_size, search_query);
        colorList = await color.GetAll();
        sizeList = await size.GetAll();
        materialList = await material.GetAll();
        textileTechnologyList = await tech.GetAll();
        styleList = await style.GetAll();

        foreach (var color in colorList)
        {
            colorSelections[color.Id] = false;
        }
        foreach (var size in sizeList)
        {
            sizeSelections[size.Id] = false;
        }
        CurrentProduct = await post.GetByIdType(PostId, "product");
        if (CurrentProduct == null)
        {
            await JS.InvokeVoidAsync("toastr.error", "Không tìm thấy sản phẩm!");
            nav.NavigateTo("/admin/productVariant"); // Điều hướng nếu không tìm thấy sản phẩm
            return;
        }
    }
    private async Task OnProductChange(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();

        if (long.TryParse(selectedValue, out var productId))
        {
            selectedPostProductId = productId;

            // Tìm sản phẩm từ danh sách dựa trên Id
            var post_Product = product_posts_list.FirstOrDefault(p => p.Id == selectedPostProductId);

            // Kiểm tra và xử lý nếu cần
            if (post_Product != null)
            {
                Console.WriteLine($"Sản phẩm được chọn: {post_Product.Title}");
            }
        }
        else
        {
            selectedPostProductId = 0; // Reset nếu không chọn gì
        }
    }
    private async void openMediaModal(long itemId)
    {
        selectedItemId = itemId;
        await JS.InvokeVoidAsync("openMediaModalProduct");
    }
    private async Task HandleImageSelected(string imagePath)
    {
        // Đảm bảo bạn xác định phần tử cần cập nhật
        var itemToUpdate = LST_ProductAttributes.FirstOrDefault(x => x.Id == selectedItemId);
        if (itemToUpdate != null)
        {
            itemToUpdate.Image = imagePath;
            StateHasChanged();
            await JS.InvokeVoidAsync("closeMediaModalProduct");
        }
    }
    private async Task SelectProductAttribute(Product_Attributes attribute)
    {
        SelectedProductAttribute = attribute;
        await JS.InvokeVoidAsync("openMediaModal");
    }
    private void OnColorSelectionChanged(long colorId, object isChecked)
    {
        colorSelections[colorId] = (bool)isChecked;
        updateVariants();
    }
    private void OnSizeSelectionChanged(long sizeId, object isChecked)
    {
        sizeSelections[sizeId] = (bool)isChecked;
        updateVariants();
    }
    private void updateVariants()
    {
        var selectedColors = colorSelections
            .Where(c => c.Value)
            .Select(c => colorList.FirstOrDefault(color => color.Id == c.Key)?.Title)
            .ToList();

        var selectedSizes = sizeSelections
            .Where(s => s.Value)
            .Select(s => sizeList.FirstOrDefault(size => size.Id == s.Key)?.Title)
            .ToList();

    }
    private async Task CreateProductVariant()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận tạo sản phẩm chi tiết ?");
        if (confirmed)
        {
            try
            {
                if (product_Attributes.Post_Id == null ||
                    product_Attributes.Textile_technology_id == null ||
                    product_Attributes.Style_id == null ||
                    product_Attributes.Material_id == null)
                {
                    await JS.InvokeVoidAsync("toastr.error", "Vui lòng không để trống các thông tin bắt buộc");
                    return;
                }

                var selectedColors = colorSelections.Where(c => c.Value).Select(c => c.Key).ToList();
                var selectedSizes = sizeSelections.Where(s => s.Value).Select(s => s.Key).ToList();

                // Kiểm tra nếu không có màu hoặc kích thước được chọn
                if (!selectedColors.Any() || !selectedSizes.Any())
                {
                    await JS.InvokeVoidAsync("toastr.error", "Vui lòng chọn ít nhất một màu và một kích thước.");
                    return;
                }

                foreach (var colorId in selectedColors)
                {
                    foreach (var sizeId in selectedSizes)
                    {
                        var post_Product = product_posts_list.FirstOrDefault(p => p.Id == PostId);
                        var productAttribute = new Product_Attributes
                            {
                                Post_Id = CurrentProduct.Id,
                                Material_id = product_Attributes.Material_id,
                                Textile_technology_id = product_Attributes.Textile_technology_id,
                                Style_id = product_Attributes.Style_id,
                                Color_Id = colorId,
                                Size_Id = sizeId,
                                Status = product_Attributes.Stock == 0 ? "Hết hàng" : "Còn hàng"
                            };
                        await productAttributesServices.Create(productAttribute);
                        LST_ProductAttributes = await productAttributesServices.GetProductAttributesByPostId(selectedPostProductId);
                        isProductAttributesCreated = true;
                        StateHasChanged();
                        await JS.InvokeVoidAsync("toastr.success", "Tạo sản phẩm thành công!");

                    }
                } 

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

    }
    private async Task UpdateProductAttributes()
    {
        foreach (var item in LST_ProductAttributes)
        {

            if (item.Stock == null)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Số lượng cho SKU {item.Id} không được để trống.");
                return;
            }

            if (item.Regular_price == null)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Giá bán cho SKU {item.Id} không được để trống.");
                return;
            }

            if (item.Stock <= 0)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Số lượng cho SKU {item.Id} phải lớn hơn 0.");
                return;
            }

            if (item.Regular_price <= 0)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Giá Bán cho SKU {item.Id} phải lớn hơn 0");
                return;
            }

            item.Status = item.Stock == 0 ? "Hết hàng" : "Còn hàng";
            await productAttributesServices.Update(item, item.Id);
        }
        await JS.InvokeVoidAsync("toastr.success", "Thêm thông tin cho các biến thể thành công");
        nav.NavigateTo("/admin/productVarians");
    }

    private async Task DeleteProductAttribute(long id)
    {
        try
        {
            await productAttributesServices.Delete(id);
            var attributeToRemove = LST_ProductAttributes.FirstOrDefault(attr => attr.Id == id);
            if (attributeToRemove != null)
            {
                LST_ProductAttributes.Remove(attributeToRemove);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi xóa sản phẩm: {ex.Message}");
        }
    }
    private async Task HandleValidSubmit()
    {
        // Logic để xử lý dữ liệu khi form được submit thành công
        Console.WriteLine("Form submitted successfully!");
    }
}


