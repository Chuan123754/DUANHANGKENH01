@page "/Admin/ProductAttributes/{postId:long}"
@using System.Text
@using System.Globalization
@using System.Text.RegularExpressions
@inject NavigationManager Navigation
@* @inject IProductVariantServices productVariansService *@
@inject IProductAttributeServices productAttributeService
@inject IStyleServices StyleServices
@inject ISizeServices SizeServices
@inject IMaterialServices MaterialService
@inject ITextile_technologyServices Textile_technologyServices
@inject IColorServices colorService
@inject ISizeServices sizeService
@inject IPostSer post
@inject IJSRuntime JS
@inject CustomAuthenticationStateProvider _authStateProvider;


<div class="page-wrapper">
    <!-- Page header -->
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col d-flex gap-3">
                    <h2 class="page-title">Danh sách sản phẩm chi tiết của @product_posts.Title</h2>
                    <a href="/Admin/productVariant/Create" class="btn btn-sm btn-outline-primary">
                        Thêm sản phẩm chi tiết
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Page body -->
    <div class="page-body">
        <div class="container-xl">
            <div class="card">
                <div class="card-body">
                    <!-- Search form -->
                    <div class="search-box d-flex align-items-center justify-content-between mb-3">
                        <div class="form-group d-flex gap-2">
                            <div class="form-group d-flex gap-2">
                                <select class="form-select" @onchange="(e) => HandleTextileChange(e)">
                                    <option value="">Chọn Công nghệ dệt</option>
                                    @foreach (var tech in TextileTechnology_list)
                                    {
                                        <option value="@tech.Id">@tech.Title</option>
                                    }
                                </select>

                                <select class="form-select" @onchange="(e) => HandleMaterialChange(e)">
                                    <option value="">Chọn Chất liệu</option>
                                    @foreach (var material in Material_list)
                                    {
                                        <option value="@material.Id">@material.Title</option>
                                    }
                                </select>

                                <select class="form-select" @onchange="(e) => HandleStyleChange(e)">
                                    <option value="">Chọn Phong cách</option>
                                    @foreach (var style in Style_list)
                                    {
                                        <option value="@style.Id">@style.Title</option>
                                    }
                                </select>
                                <select class="form-select" @onchange="(e) => HandleColorChange(e)">
                                    <option value="">Chọn màu sắc</option>
                                    @foreach (var color in Color_list)
                                    {
                                        <option value="@color.Id">@color.Title</option>
                                    }
                                </select>
                                <select class="form-select" @onchange="(e) => HandleSizeChange(e)">
                                    <option value="">Chọn kích thước</option>
                                    @foreach (var size in Size_list)
                                    {
                                        <option value="@size.Id">@size.Title</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>




                    <!-- Product Table -->
                    <div id="table-default" class="table-responsive">
                        @if (productAttributesList != null && productAttributesList.Any())
                        {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>
                                            <button class="table-sort">Hình ảnh</button>
                                        </th>
                                        <th>
                                            <button class="table-sort">Sản phẩm</button>
                                        </th>
                                        <th>
                                            <button class="table-sort">Công nghệ dệt</button>
                                        </th>
                                        <th>
                                            <button class="table-sort">Chất liệu</button>
                                        </th>
                                        <th>
                                            <button class="table-sort">Phong cách</button>
                                        </th>
                                        <th>
                                            <button class="table-sort">Màu sắc</button>
                                        </th>
                                                   <th>
                                            <button class="table-sort">Kích thước</button>
                                        </th>
                                        <th>
                                            <button class="table-sort">Gía bán</button>
                                        </th>
                                                   <th>
                                            <button class="table-sort">Gía giảm</button>
                                        </th>
                                        <th>
                                            <button class="table-sort">Kho</button>
                                        </th>
                                        <th>
                                            <button class="table-sort">Trạng thái</button>
                                        </th>
                                        <th>
                                            <button class="table-sort">Hành động</button>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var post in productAttributesList)
                                    {
                                        <tr class="post-row">
                                            <td>@post.Id</td>
                                            <td><img src="@post.Image" alt="Hình ảnh" style="width: 80px; height: 105px;" /></td>
                                            <td>
                                                @post.Posts.Title
                                                <br />
                                                <div class="cell-action">
                                                    <a class="cell-action-edit text-primary" @onclick="() => OpenModalAddAttribute(post.Id)">Thêm biến thể</a>
                                                    <a class="cell-action-delete text-danger" @onclick="() => ConfirmDelete(post.Id)">Xóa</a>
                                                </div>
                                            </td>
                                            <td class="sort-type">
                                                @(TextileTechnology_list.FirstOrDefault(t => t.Id == post.Textile_technology_id)?.Title ?? "N/A")
                                            </td>
                                            <td class="sort-tags">
                                                @(Material_list.FirstOrDefault(m => m.Id == post.Material_id)?.Title ?? "N/A")
                                            </td>
                                            <td class="sort-tags">
                                                @(Style_list.FirstOrDefault(s => s.Id == post.Style_id)?.Title ?? "N/A")
                                            </td>
                                            <td class="text-center">
                                                <div class="d-flex align-items-center justify-content-center">
                                                    <span class="text-truncate">@post.Color?.Title</span>
                                                    <div class="color-preview"
                                                         style="width: 16px; height: 16px; background-color: @post.Color?.Color_code; border-radius: 50%; border: 1px solid #ddd; margin-left: 8px;">
                                                    </div>
                                                </div>
                                            </td>
                                            <td>@post.Size?.Title</td>
                                            <td>@string.Format("{0:N0}", post.Regular_price).Replace(".", ",") VNĐ</td>
                                            <td>
                                                @if (post.Sale_price.HasValue)
                                                {
                                                    @string.Format("{0:N0}", post.Sale_price.Value).Replace(".", ",")      <span>VNĐ</span>

                                                }
                                                else
                                                {
                                                    <span>#N/A</span>
                                                }
                                            </td>
                                            <td>
                                                @if (post.Stock == 0 || post.Stock == null)
                                                {
                                                    <span style="color: red;">Hết hàng</span>
                                                }
                                                else
                                                {
                                                    @post.Stock
                                                }
                                            </td>
                                            <td class="sort-status">
                                                <span class="@post.Status">@post.Status</span>
                                            </td>
                                            <td>
                                                <i class="bi bi-pencil text-success " style="padding-right:10px" @onclick="() => OpenUpdateProductAttributeModal(post.Id)"></i>
                                                <i class="bi bi-trash3 text-danger" style="cursor: pointer;" @onclick="() => DeleteProductAttribute(post.Id)"></i>
                       
                       
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
@*                             <div class="mt-4">
                                <Pagination TItem="Product_variants" PageNumber="page_number" TotalPages="total_pages" PageSize="page_size" TotalItems="totalItems" OnPageChanged="GoToPage" OnPageSizeChanged="OnPageSizeChanged" />
                            </div> *@
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center">Không có dữ liệu</td>
                            </tr>
                        }

                    </div>
                    @if (isModalAddAttributeVisiable)
                    {
                        <div class="modal fade show d-block" tabindex="-1" role="dialog">
                            <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 25%; width: auto;">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Chọn biến thể sản phẩm</h5>
                                        <button type="button" class="btn-close" @onclick="CloseModalAddAttribute" aria-label="Close"></button>
                                    </div>

                                    <div class="modal-body">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <div class="accordion-collapse collapse show" data-bs-parent="#accordion-example">
                                                <div class="accordion-body pt-0">
                                                    <div class="form-group mb-3">
                                                        <label class="form-label">Chọn Màu Sắc <span class="text-danger">*</span></label>
                                                        <div class="dropdown">
                                                            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="colorDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                                Chọn màu sắc
                                                            </button>
                                                            <ul class="dropdown-menu" aria-labelledby="colorDropdown">
                                                                @foreach (var color in colorList)
                                                                {
                                                                    <li>
                                                                        <div class="form-check d-flex justify-content-between align-items-center">
                                                                            <!-- Thêm màu sắc -->
                                                                            <label class="form-check-label d-flex align-items-center" for="color-@color.Id">
                                                                                <span class="color-box" style="background-color:@color.Color_code; width: 20px; height: 20px; margin-right: 10px; border-radius: 50%;"></span>
                                                                                @color.Title
                                                                            </label>
                                                                            <input type="checkbox" style="margin-right: 5px"
                                                                                   id="color-@color.Id"
                                                                                   @onchange="(e) => OnColorSelectionChanged(color.Id, e.Value)" />
                                                                        </div>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    </div>

                                                    <div class="form-group mb-3">
                                                        <label class="form-label">Chọn Kích Thước <span class="text-danger">*</span></label>
                                                        <div class="dropdown">
                                                            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="sizeDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                                                Chọn kích thước
                                                            </button>
                                                            <ul class="dropdown-menu" aria-labelledby="sizeDropdown">
                                                                @foreach (var size in sizeList)
                                                                {
                                                                    <li>
                                                                        <div class="form-check d-flex justify-content-between align-items-center">

                                                                            <label class="form-check-label d-flex align-items-center" for="size-@size.Id">
                                                                                @size.Title
                                                                            </label>
                                                                            <input type="checkbox" style="margin-right: 5px"
                                                                                   id="size-@size.Id"
                                                                                   @onchange="(e) => OnSizeSelectionChanged(size.Id, e.Value)" />
                                                                        </div>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer d-flex justify-content-between">
                                                        <button type="button" class="btn btn-primary" @onclick="CreateProductAttributes">Xác nhận</button>
                                                        <button type="button" class="btn btn-secondary" @onclick="CloseModalAddAttribute">Hủy</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                        <div class="modal-backdrop fade show"></div>
                    }
                    @if (isUpdateProductAttributeModal)
                    {
                        <div class="modal fade show d-block" tabindex="-1" role="dialog">
                            <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 80%; width: auto;">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Cập nhật thông tin biến thể của @productPostTitle</h5>
                                    </div>
                                    <div class="modal-body">
                                        <table class="table table-bordered table-striped align-middle">
                                            <thead>
                                                <tr>
                                                    <th style="width: 8%;">Hình ảnh</th>
                                                    <th style="width: 5%;">Màu sắc</th>
                                                    <th style="width: 9%;">Kích thước</th>
                                                    <th style="width: 10%;">Gía gốc</th>

                                                    <th style="width: 5%;">Số lượng tồn kho</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>
                                                        <div style="width: 80px; height: 80px; aspect-ratio: 1 / 1; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; display: flex; align-items: center; justify-content: center; cursor: pointer;"
                                                             id="feature_image" class="image-post-box d-flex align-items-center justify-content-center"
                                                             data-multiple="false" data-refer-id="#feature_image" onclick="openMediaModal()">
                                                            @if (!string.IsNullOrEmpty(selectedAttribute.Image))
                                                            {
                                                                <img src="@selectedAttribute.Image" class="w-100 h-100 object-cover" />
                                                            }
                                                            else
                                                            {
                                                                <div class="icon d-flex align-items-center justify-content-center">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" stroke-width="1" stroke="currentColor" fill="none">
                                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                                        <path d="M12 5v14" />
                                                                        <path d="M5 12h14" />
                                                                    </svg>
                                                                </div>
                                                            }
                                                        </div>
                                                    </td>

                                                    <td>
                                                        <div class="d-flex align-items-center justify-content-center">
                                                            <span class="text-truncate">@selectedAttribute.Color?.Title</span>
                                                            <div class="color-preview"
                                                                 style="width: 16px; height: 16px; background-color: @selectedAttribute.Color?.Color_code; border-radius: 50%; border: 1px solid #ddd; margin-left: 8px;">
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                                                            @selectedAttribute.Size?.Title
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="input-group">
                                                            <input type="text"
                                                                   class="form-control"
                                                                   value="@string.Format("{0:N0}", selectedAttribute.Regular_price).Replace(".", ",")"
                                                                   @oninput="FormatCurrencyRegular"
                                                                   @onchange="UpdatePriceRegular" />
                                                            <span class="input-group-text">VNĐ</span>
                                                        </div>
                                                    </td>

                                                    <td>
                                                        <input type="text" @bind="@selectedAttribute.Stock" class="form-control" style="max-width: 120px;" />
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="modal-footer d-flex justify-content-between">
                                        <button type="button" class="btn btn-primary" @onclick="UpdateProductAttribute">Xác nhận</button>
                                        <button type="button" class="btn btn-secondary" @onclick="CloseUpdateProductAttributeModal">Hủy</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
</div>

<Media_modal OnImageSelected="HandleImageSelected" @ref="mediaModalRef"></Media_modal>


@code {
    // private List<Product_variants> product_Varians_list = new List<Product_variants>();
    [Parameter] public long PostId { get; set; }
    private List<Size> Size_list = new List<Size>();
    private List<Color> Color_list = new List<Color>();
    private List<Material> Material_list = new List<Material>();
    private List<Textile_technology> TextileTechnology_list = new List<Textile_technology>();
    private List<Style> Style_list = new List<Style>();

    private List<Product_Attributes> productAttributesList = new List<Product_Attributes>();
    private Product_Attributes selectedAttribute = new Product_Attributes();
    private Product_Posts product_posts = new Product_Posts();

    private List<Size> sizeList = new List<Size>();
    private List<Color> colorList = new List<Color>();
    private Dictionary<long, bool> colorSelections = new();
    private Dictionary<long, bool> sizeSelections = new();
    private Media_modal mediaModalRef;
    private List<Product_Posts> product_posts_list = new List<Product_Posts>();
    // private Product_variants product_Variant = new Product_variants();

    private long selectedPostId;
    private bool showAttributes = false;
    private bool isUpdateProductAttributeModal = false;
    private string productPostTitle;
    private bool isModalAddAttributeVisiable = false;
    private string search_query = string.Empty;
    private int page_number = 1;
    private int total_pages = 1;
    private int page_size = 10;
    private int totalItems;
    private bool isAuthenticated;
    private string searchFilter = "product_name";

    private string selectedTextileTechnologyId = string.Empty;
    private string selectedMaterialId = string.Empty;
    private string selectedStyleId = string.Empty;
    private string selectedProductId = string.Empty;
    private string selectedSizeId = string.Empty;
    private string selectedColorId = string.Empty;


    private async Task HandleSizeChange(ChangeEventArgs e)
    {
        selectedSizeId = e.Value?.ToString() ?? string.Empty;
        await ApplyFilters();
    }
    private async Task HandleColorChange(ChangeEventArgs e)
    {
        selectedColorId = e.Value?.ToString() ?? string.Empty;
        await ApplyFilters();
    }

    private async Task HandleTextileChange(ChangeEventArgs e)
    {
        selectedTextileTechnologyId = e.Value?.ToString() ?? string.Empty;
        await ApplyFilters();
    }

    private async Task HandleMaterialChange(ChangeEventArgs e)
    {
        selectedMaterialId = e.Value?.ToString() ?? string.Empty;
        await ApplyFilters();
    }

    private async Task HandleStyleChange(ChangeEventArgs e)
    {
        selectedStyleId = e.Value?.ToString() ?? string.Empty;
        await ApplyFilters();
    }

    protected override async Task OnInitializedAsync()
    {

        await LoadPosts();
        colorList = await colorService.GetAll();
        sizeList = await sizeService.GetAll();
        Material_list = await MaterialService.GetAll();
        TextileTechnology_list = await Textile_technologyServices.GetAll();
        Style_list = await StyleServices.GetAll();
        product_posts_list = await post.GetByTypeAsync("product", page_number, page_size, search_query);
        product_posts = await post.GetByIdType(PostId,"product");
        selectedTextileTechnologyId = string.Empty;
        selectedMaterialId = string.Empty;
        selectedStyleId = string.Empty;
    }
    private async Task LoadPosts()
    {
        string searchTerm = string.IsNullOrEmpty(search_query) ? "" : search_query;
        productAttributesList = await productAttributeService.GetProductAttributesByPostId(PostId);

        Color_list = await colorService.GetAll();
        Size_list = await SizeServices.GetAll();
        Material_list = await MaterialService.GetAll();
        TextileTechnology_list = await Textile_technologyServices.GetAll();
        Style_list = await StyleServices.GetAll();


        // totalItems = await productAttributeService.GetTotalCountAsync("product", searchTerm);
        total_pages = (int)Math.Ceiling((double)totalItems / page_size);
        StateHasChanged();
    }
    private async Task OnProductChange(ChangeEventArgs e)
    {
        var selectedProductIdString = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedProductIdString) &&
       long.TryParse(selectedProductIdString, out var selectedProductId))
        {
            var selectedProduct = product_posts_list.FirstOrDefault(p => p.Id == selectedProductId);

            if (selectedProduct != null)
            {
                selectedAttribute.Post_Id = selectedProduct.Id;
                selectedAttribute.Posts = selectedProduct;
                selectedAttribute.Posts.Feature_image = selectedProduct.Feature_image;
            }
        }
        StateHasChanged();
    }

    private async Task ApplyFilters()
    {
        // Lọc sản phẩm theo các điều kiện đã chọn
        var filteredProducts = await productAttributeService.GetAllProductAttributes();

        if (!string.IsNullOrEmpty(selectedProductId))
        {
            filteredProducts = filteredProducts.Where(post =>
                    post.Posts.Id == long.Parse(selectedProductId)).ToList();
        }


        // Lọc theo Công nghệ dệt
        if (!string.IsNullOrEmpty(selectedTextileTechnologyId))
        {
            filteredProducts = filteredProducts.Where(post =>
                post.Textile_technology_id == long.Parse(selectedTextileTechnologyId)).ToList();
        }

        // Lọc theo Chất liệu
        if (!string.IsNullOrEmpty(selectedMaterialId))
        {
            filteredProducts = filteredProducts.Where(post =>
                post.Material_id == long.Parse(selectedMaterialId)).ToList();
        }

        // Lọc theo Phong cách
        if (!string.IsNullOrEmpty(selectedStyleId))
        {
            filteredProducts = filteredProducts.Where(post =>
                post.Style_id == long.Parse(selectedStyleId)).ToList();
        }

        if (!string.IsNullOrEmpty(selectedStyleId))
        {
            filteredProducts = filteredProducts.Where(post =>
                post.Style_id == long.Parse(selectedStyleId)).ToList();
        }
        if (!string.IsNullOrEmpty(selectedColorId))
        {
            filteredProducts = filteredProducts.Where(post =>
                post.Color_Id == long.Parse(selectedColorId)).ToList();
        }
        if (!string.IsNullOrEmpty(selectedSizeId))
        {
            filteredProducts = filteredProducts.Where(post =>
                post.Size_Id == long.Parse(selectedSizeId)).ToList();
        }

        productAttributesList = filteredProducts;
        StateHasChanged();
    }

    private async Task OnSearch()
    {
        await ApplyFilters();
    }

    private async Task HandleImageSelected(string imagePath)
    {
        selectedAttribute.Image = imagePath ?? string.Empty;
        StateHasChanged(); // Cập nhật giao diện
        await JS.InvokeVoidAsync("closeMediaModal"); // Gọi hàm JavaScript để đóng modal
    }

    private void OnColorSelectionChanged(long colorId, object isChecked)
    {
        colorSelections[colorId] = (bool)isChecked;
        updateVariants();
    }

    private void OnSizeSelectionChanged(long sizeId, object isChecked)
    {
        sizeSelections[sizeId] = (bool)isChecked;
        updateVariants();
    }

    private void updateVariants()
    {
        var selectedColors = colorSelections
            .Where(c => c.Value)
            .Select(c => colorList.FirstOrDefault(color => color.Id == c.Key)?.Title)
            .ToList();

        var selectedSizes = sizeSelections
            .Where(s => s.Value)
            .Select(s => sizeList.FirstOrDefault(size => size.Id == s.Key)?.Title)
            .ToList();

    }

    public string RemoveDiacritics(string text)
    {
        var chars = text.Normalize(System.Text.NormalizationForm.FormD)
                        .Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)
                        .ToArray();
        return new string(chars).Normalize(System.Text.NormalizationForm.FormC);
    }

    private async Task CreateProductAttributes()
    {
        var selectedColors = colorSelections.Where(c => c.Value).Select(c => c.Key).ToList();
        var selectedSizes = sizeSelections.Where(s => s.Value).Select(s => s.Key).ToList();

        // Kiểm tra nếu không có màu hoặc kích thước được chọn
        if (!selectedColors.Any() || !selectedSizes.Any())
        {
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng chọn ít nhất một màu và một kích thước.");
            return;
        }

        var productVariant = await productAttributeService.GetProductAttributesById(selectedPostId);
        if (productVariant == null)
        {
            await JS.InvokeVoidAsync("toastr.error", "Không tìm thấy biến thể sản phẩm.");
            return;
        }

        // Lấy danh sách biến thể sản phẩm hiện tại (dù có hay không có biến thể nào)
        var existingVariants = await productAttributeService.GetProductAttributesByPostId(selectedPostId);

        foreach (var colorId in selectedColors)
        {
            foreach (var sizeId in selectedSizes)
            {
                // Kiểm tra biến thể trùng cả màu và kích thước
                bool isVariantExists = existingVariants.Any(v => v.Color_Id == colorId && v.Size_Id == sizeId && v.Status != "delete");
                if (isVariantExists)
                {
                    var colorTitle = colorList.FirstOrDefault(c => c.Id == colorId)?.Title ?? "Không rõ";
                    var sizeTitle = sizeList.FirstOrDefault(s => s.Id == sizeId)?.Title ?? "Không rõ";
                    await JS.InvokeVoidAsync("toastr.warning", $"Biến thể với size '{sizeTitle}' và màu '{colorTitle}' đã có.");
                    continue;
                }

                // Kiểm tra biến thể cùng màu khác kích thước hoặc cùng kích thước khác màu
                bool isColorExists = existingVariants.Any(v => v.Color_Id == colorId && v.Size_Id != sizeId);
                bool isSizeExists = existingVariants.Any(v => v.Size_Id == sizeId && v.Color_Id != colorId);

                if (!isColorExists && !isSizeExists)
                {
                    continue;
                }
                // Tạo biến thể mới
                var productAttribute = new Product_Attributes
                    {
                        Color_Id = colorId,
                        Size_Id = sizeId,
                        Status = selectedAttribute.Stock == 0 ? "Hết hàng" : "Còn hàng"
                    };


                await productAttributeService.Create(productAttribute);

                // Hiển thị thông báo thành công
                var createdColorTitle = colorList.FirstOrDefault(c => c.Id == colorId)?.Title ?? "Không rõ";
                var createdSizeTitle = sizeList.FirstOrDefault(s => s.Id == sizeId)?.Title ?? "Không rõ";
                await JS.InvokeVoidAsync("toastr.success", $"Tạo thành công biến thể size '{createdSizeTitle}' và color '{createdColorTitle}'.");
                colorSelections.Clear();
                sizeSelections.Clear();
                CloseModalAddAttribute();
            }
        }
    }

    private void UpdatePriceRegular(ChangeEventArgs e)
    {
        // Cập nhật giá gốc
        var input = e.Value?.ToString().Replace(",", "").Replace(".", "");

        if (decimal.TryParse(input, out var parsedPrice))
        {
            selectedAttribute.Regular_price = (long?)Convert.ToInt64(parsedPrice);
        }
    }

    private void UpdatePriceSale(ChangeEventArgs e)
    {
        // Cập nhật giá giảm
        var input = e.Value?.ToString().Replace(",", "").Replace(".", "");

        if (decimal.TryParse(input, out var parsedPrice))
        {
            selectedAttribute.Sale_price = (long?)Convert.ToInt64(parsedPrice);
        }
    }

    private void FormatCurrencyRegular(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        input = new string(input.Where(char.IsDigit).ToArray());
        if (long.TryParse(input, out var parsedValue))
        {
            selectedAttribute.Regular_price = parsedValue;
        }
    }

    private void FormatCurrencySale(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        input = new string(input.Where(char.IsDigit).ToArray());
        if (long.TryParse(input, out var parsedValue))
        {
            selectedAttribute.Sale_price = parsedValue;
        }
    }

    private void OpenModalAddAttribute(long postId)
    {
        selectedPostId = postId;
        isModalAddAttributeVisiable = true;
    }

    private void CloseModalAddAttribute()
    {
        isModalAddAttributeVisiable = false;
    }

    private async Task GoToPage(int page)
    {
        page_number = page;
        await LoadPosts();
    }
    private async Task OnPageSizeChanged(int newPageSize)
    {
        page_size = newPageSize;
        page_number = 1;
        await LoadPosts();
    }
  

    private async Task ConfirmDelete(long id)
    {
        await productAttributeService.Delete(id);
        await JS.InvokeVoidAsync("toastr.success", "Xóa thành công sản phẩm ");
        await LoadPosts();
    }

    private async Task OpenUpdateProductAttributeModal(long productAttributeId)
    {
        selectedAttribute = await productAttributeService.GetProductAttributesById(productAttributeId);
        isUpdateProductAttributeModal = true;
    }

    private void CloseUpdateProductAttributeModal()
    {
        isUpdateProductAttributeModal = false;
    }

    private async Task UpdateProductAttribute()
    {
        if (selectedAttribute.Stock <= 0)
        {
            await JS.InvokeVoidAsync("toastr.error", "Số lượng tồn kho phải lớn hơn 0");
            return;
        }

        if (selectedAttribute.Regular_price <= 0)
        {
            await JS.InvokeVoidAsync("toastr.error", "Giá bán phải lớn hơn 0");
            return;
        }
        if (selectedAttribute.Regular_price <= selectedAttribute.Sale_price)
        {
            await JS.InvokeVoidAsync("toastr.error", "Gía giảm không được lớn hơn hoặc bằng giá bán");
            return;
        }
        if (selectedAttribute != null)
        {
            await productAttributeService.Update(selectedAttribute, selectedAttribute.Id);
            await JS.InvokeVoidAsync("toastr.success", "Cập nhật thông tin sản phẩm thành công");
            isUpdateProductAttributeModal = false;
            LoadPosts();
        }
    }

    private async Task SelectProductAttribute(Product_Attributes attribute)
    {
        selectedAttribute = attribute;
        await JS.InvokeVoidAsync("openMediaModal");
    }

    private async Task DeleteProductAttribute(long id)
    {
        try
        {
            await productAttributeService.Delete(id);
            var attributeToRemove = productAttributesList.FirstOrDefault(attr => attr.Id == id);
            if (attributeToRemove != null)
            {
                productAttributesList.Remove(attributeToRemove);
                await JS.InvokeVoidAsync("toastr.success", "Xóa sản phẩm thành công");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi xóa sản phẩm: {ex.Message}");
        }
    }
}