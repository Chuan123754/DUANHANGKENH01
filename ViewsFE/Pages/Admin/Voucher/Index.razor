@page "/admin/vouchers"
@inject IVoucherService VoucherService
@inject IUserVoucherService UserVoucherService
@inject IJSRuntime JS

<div class="page-wrapper">
    <!-- Page header -->
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col d-flex gap-3">
                    <h2 class="page-title">Quản Lý Voucher</h2>
                </div>
            </div>
            <div id="breadcrumb">
                <Breadcrumb pageParentTitle="Khuyến mãi" pageTitle="Voucher" pageRoute="/vouchers" />
            </div>
        </div>
    </div>
    <!-- Page body -->
    <div class="page-body">
        <div class="container-xl">
            <div class="row">
                <!-- Create/Edit Form -->
                <div class="col-md-3">
                    <div class="card">
                        <div id="formVoucher" class="card-body">
                            <EditForm Model="@voucher" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                                <DataAnnotationsValidator />
                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert @((errorMessage.Contains("thành công") ? "alert-success" : "alert-danger"))" role="alert">
                                        @errorMessage
                                    </div>
                                }

                                <!-- Các trường thông tin voucher -->
                                <div class="form-group mb-1">
                                    <label for="voucherCode">Mã Voucher</label>
                                    <input type="text" id="voucherCode" @bind="voucher.Code" class="form-control" placeholder="Mã voucher" />
                                    <ValidationMessage For="@(() => voucher.Code)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="description">Mô Tả</label>
                                    <input type="text" id="description" @bind="voucher.Description" class="form-control" placeholder="Mô tả voucher" />
                                    <ValidationMessage For="@(() => voucher.Description)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="quantity">Số Lượng</label>
                                    <input type="number" id="quantity" @bind="voucher.Quantity" class="form-control" placeholder="Số lượng" />
                                    <ValidationMessage For="@(() => voucher.Quantity)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="percent">Phần Trăm Giảm Giá (%)</label>
                                    <input type="number" id="percent" @bind="voucher.Percent" class="form-control" placeholder="Phần trăm giảm giá" />
                                    <ValidationMessage For="@(() => voucher.Percent)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="maxDiscountValue">Giá Trị Giảm Tối Đa</label>
                                    <input type="number" id="maxDiscountValue" @bind="voucher.MaxDiscountValue" class="form-control" placeholder="Giá trị giảm tối đa" />
                                    <ValidationMessage For="@(() => voucher.MaxDiscountValue)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="Condition">Điều kiện</label>
                                    <input type="number" id="Condition" @bind="voucher.Condition" class="form-control" placeholder="Điều kiện" />
                                    <ValidationMessage For="@(() => voucher.Condition)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="startTime">Thời Gian Bắt Đầu</label>
                                    <InputDate id="startTime" @bind-Value="voucher.Start_time" class="form-control" />
                                    <ValidationMessage For="@(() => voucher.Start_time)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="endTime">Thời Gian Kết Thúc</label>
                                    <InputDate id="endTime" @bind-Value="voucher.End_time" class="form-control" />
                                    <ValidationMessage For="@(() => voucher.End_time)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label>Trạng Thái</label><br />

                                    <!-- Radio button cho trạng thái "Hoạt động" -->
                                    <input type="radio" id="active" name="status" checked="@(voucher.Status == "Hoạt động")" @onchange="SetStatusToActive" />
                                    <label for="active">Hoạt động</label>

                                    <!-- Radio button cho trạng thái "Không hoạt động" -->
                                    <input type="radio" id="inactive" name="status" checked="@(voucher.Status == "Không hoạt động")" @onchange="SetStatusToInactive" />
                                    <label for="inactive">Không hoạt động</label>

                                    <ValidationMessage For="@(() => voucher.Status)" />
                                </div>

                                <!-- Nút Tạo và Cập Nhật -->
                                <div class="form-group">
                                    @if (voucher.Id == 0)
                                    {
                                        <button type="submit" class="btn btn-primary">Tạo</button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-warning">Cập Nhật</button>
                                    }
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
                <div class="col-md-9 col-12">
                    <!-- Danh Sách Voucher -->
                    <div class="col-md-12 col-12">
                        <div class="card">
                            <div class="card-body">
                                <!-- Search Box -->
                                <div class="search-box d-flex align-items-center justify-content-between mb-3">
                                    <div></div>
                                    <EditForm Model="voucher" OnValidSubmit="@SearchVouchers">
                                        <div class="form-group d-flex gap-2">
                                            <InputText id="searchInput" class="form-control" @bind-Value="searchText" placeholder="Nhập từ khóa tìm kiếm" />
                                            <button type="submit" class="btn btn-outline-primary">Tìm kiếm</button>
                                        </div>
                                    </EditForm>
                                </div>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>STT</th>
                                            <th>Mã Voucher</th>
                                            <th>Mô Tả</th>
                                            <th>Giá trị</th>
                                            <th>Giá trị tối đa</th>
                                            <th>Điều kiện</th>
                                            <th>Số lượng</th>
                                            <th>Trạng thái</th>
                                            <th>Thao tác</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (pagedVouchers != null && pagedVouchers.Any())
                                        {
                                            int index = 0;
                                            @foreach (var voucher in pagedVouchers)
                                            {
                                                <tr>
                                                    <td>@(++index + (currentPage - 1) * pageSize)</td>
                                                    <td>@voucher.Code</td>
                                                    <td>@voucher.Description</td>
                                                    <td>@voucher.Percent</td>
                                                    <td>@voucher.MaxDiscountValue</td>
                                                    <td>@voucher.Condition</td>
                                                    <td>@voucher.Quantity</td>
                                                    <td>@voucher.Status</td>
                                                    <td>
                                                        <button class="btn btn-primary" @onclick="() => EditVoucher(voucher.Id)">Sửa</button>

                                                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(voucher.Id)">Xóa</button>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="8" class="text-center">Không có dữ liệu để hiển thị.</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                                <div class="mt-4">
                                    <Pagination TItem="Vouchers" PageNumber="currentPage" TotalPages="totalPages" PageSize="pageSize" TotalItems="vouchers.Count" OnPageChanged="GoToPage" OnPageSizeChanged="OnPageSizeChanged" />
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 col-12 pt-3">
                        <div class="card">
                            <div class="card-body">
                                <!-- Search Box -->
                                <div class="search-box d-flex align-items-center justify-content-between mb-3">
                                    <div></div>
                                    <EditForm Model="users" OnValidSubmit="@SearchUser">
                                        <div class="form-group d-flex gap-2">
                                            <InputText id="searchUser" class="form-control" @bind-Value="searchTextUser" placeholder="Nhập từ khóa tên người dùng" />
                                            <button type="submit" class="btn btn-outline-primary">Tìm kiếm</button>
                                        </div>
                                    </EditForm>
                                </div>
                                <h3>Danh Sách Người Dùng</h3>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>STT</th>
                                            <th>Tích</th> <!-- Thêm cột Tích -->
                                            <th>Tên Người Dùng</th>
                                            <th>Email</th>
                                            <th>Số Điện Thoại</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (pagedUsers == null || !pagedUsers.Any())
                                        {
                                            <tr>
                                                <td colspan="5" class="text-center">Không có người dùng nào để hiển thị.</td>
                                            </tr>
                                        }
                                        else
                                        {
                                            int index = 0;
                                            @foreach (var user in pagedUsers)
                                            {
                                                <tr>
                                                    <td>@(++index + (currentCustomerPage - 1) * customerPageSize)</td>
                                                    <td>
                                                        <!-- Checkbox cho khách hàng -->
                                                        <input type="checkbox" checked="@selectedUserIds.Contains(user.Id)" @onchange="@(e => OnCheckboxChange(e, user.Id))" />
                                                    </td>
                                                    <td>@user.Name</td>
                                                    <td>@user.Email</td>
                                                    <td>@user.Phone</td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>



                                <div class="mt-4">
                                    <Pagination TItem="Users" PageNumber="currentCustomerPage" TotalPages="totalCustomerPages" PageSize="customerPageSize" TotalItems="users.Count" OnPageChanged="GoToCustomerPage" OnPageSizeChanged="OnCustomerPageSizeChanged" />
                                </div>


                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Vouchers> vouchers = new List<Vouchers>();
    private List<Vouchers> pagedVouchers = new List<Vouchers>();


    private List<Users> users = new List<Users>();
    private Vouchers voucher = new Vouchers();


    private List<long> selectedUserIds = new List<long>();
    private List<long> initialUserIds = new List<long>();


    private string searchText = string.Empty;
    private string searchTextUser = string.Empty;


    private string errorMessage = string.Empty;
    private int selectedUserCount = 0;

    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;

    private int currentCustomerPage = 1;
    private int customerPageSize = 5;
    private int totalCustomerPages = 1;
    private List<Users> pagedUsers = new List<Users>();

    private void ToggleUserSelection(long userId, bool isChecked)
    {
        if (isChecked)
        {
            if (!selectedUserIds.Contains(userId))
            {
                selectedUserIds.Add(userId);
                selectedUserCount++;
            }
        }
        else
        {
            if (selectedUserIds.Contains(userId))
            {
                selectedUserIds.Remove(userId);
                selectedUserCount--;
            }
        }
        selectedUserIds = selectedUserIds.Distinct().ToList();
        Console.WriteLine(selectedUserIds);
    }

    private void OnCheckboxChange(ChangeEventArgs e, long userId)
    {
        bool isChecked = e.Value is bool && (bool)e.Value;

        // Thêm khách hàng vào danh sách tích
        if (isChecked)
        {
            if (!selectedUserIds.Contains(userId))
            {
                selectedUserIds.Add(userId);
            }
        }
        else
        {
            if (selectedUserIds.Contains(userId))
            {
                selectedUserIds.Remove(userId);
            }
        }
        ToggleUserSelection(userId, isChecked);
    }






    private void SetStatusToActive(ChangeEventArgs e)
    {
        voucher.Status = "Hoạt động";
    }

    private void SetStatusToInactive(ChangeEventArgs e)
    {
        voucher.Status = "Không hoạt động";
    }

    protected override async Task OnInitializedAsync()
    {
        voucher.Create_at = DateTime.Now;
        voucher.Update_at = DateTime.Now;
        voucher.Start_time = DateTime.Now;
        voucher.End_time = DateTime.Now.AddDays(1);

        vouchers = await VoucherService.GetAll();
        totalPages = (int)Math.Ceiling((double)vouchers.Count / pageSize); // Tính tổng số trang
        LoadPagedVouchers();

        users = await VoucherService.GetUsers();
        totalCustomerPages = (int)Math.Ceiling((double)users.Count / customerPageSize); // Tính tổng số trang khách hàng
        LoadPagedUsers();

        await LoadVouchers();
        await LoadUsers();
    }

    private void LoadPagedVouchers()
    {
        totalPages = (int)Math.Ceiling((double)vouchers.Count / pageSize);

        pagedVouchers = vouchers.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        LoadPagedVouchers();
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1;
        await LoadVouchers();
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            LoadPagedVouchers();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadPagedVouchers();
        }
    }

    private void LoadPagedUsers()
    {
        totalCustomerPages = (int)Math.Ceiling((double)users.Count / customerPageSize);

        pagedUsers = users.Skip((currentCustomerPage - 1) * customerPageSize).Take(customerPageSize).ToList();
    }

    private async Task GoToCustomerPage(int page)
    {
        currentCustomerPage = page;
        LoadPagedUsers();
    }

    private async Task OnCustomerPageSizeChanged(int newPageSize)
    {
        customerPageSize = newPageSize;
        currentCustomerPage = 1;
        LoadPagedUsers();
    }

    private async Task LoadUsers()
    {
        users = await VoucherService.GetUsers();
    }

    private async Task LoadVouchers()
    {
        vouchers = await VoucherService.GetAll();
        totalPages = (int)Math.Ceiling((double)vouchers.Count / pageSize);

        LoadPagedVouchers();
    }


    private async Task CreateVoucher()
    {
        try
        {
            if (voucher.Status == "Không hoạt động")
            {
                errorMessage = "Voucher đang không hoạt động. Không thể thêm khách hàng.";
                return;
            }

            // Nếu có khách hàng riêng, gán số lượng bằng số lượng khách hàng đã tích
            if (selectedUserIds.Any())
            {
                voucher.Quantity = selectedUserIds.Count.ToString(); // Số lượng là số khách hàng đã tích

                var userVoucher = new Vouchers
                    {
                        Code = voucher.Code,
                        Description = voucher.Description,
                        Quantity = voucher.Quantity,
                        Percent = voucher.Percent,
                        MaxDiscountValue = voucher.MaxDiscountValue,
                        Condition = voucher.Condition,
                        Start_time = voucher.Start_time,
                        End_time = voucher.End_time,
                        Status = voucher.Status,
                        Create_at = DateTime.Now,
                        Update_at = DateTime.Now
                    };

                var createdVoucher = await VoucherService.Create(userVoucher);

                foreach (var userId in selectedUserIds)
                {
                    var userVoucherEntry = new Models.UserVouchers
                        {
                            UserId = userId,
                            VoucherId = createdVoucher.Id,
                            IsApplied = false,
                            AppliedAt = null,
                            Create_at = DateTime.Now,
                            Update_at = DateTime.Now
                        };

                    await UserVoucherService.Create(userVoucherEntry);
                }
            }
            else
            {
                var newVoucher = new Vouchers
                    {
                        Code = voucher.Code,
                        Description = voucher.Description,
                        Quantity = voucher.Quantity, // Số lượng chỉ có thể nhập nếu không có khách hàng riêng
                        Percent = voucher.Percent,
                        MaxDiscountValue = voucher.MaxDiscountValue,
                        Condition = voucher.Condition,
                        Start_time = voucher.Start_time,
                        End_time = voucher.End_time,
                        Status = voucher.Status,
                        Create_at = DateTime.Now,
                        Update_at = DateTime.Now
                    };

                await VoucherService.Create(newVoucher);
            }

            await LoadVouchers();

            voucher = new Vouchers
                {
                    Create_at = DateTime.Now,
                    Update_at = DateTime.Now,
                    Start_time = DateTime.Now,
                    End_time = DateTime.Now.AddDays(1)
                };

            selectedUserIds.Clear();
            selectedUserCount = 0;

            errorMessage = "Đã tạo mới voucher thành công!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }



    private async Task EditVoucher(long id)
    {
        voucher = await VoucherService.Details(id);

        try
        {
            // Lấy khách hàng có voucher từ cơ sở dữ liệu
            var userVouchers = await UserVoucherService.GetByVoucherId(id);

            selectedUserIds.Clear();
            initialUserIds.Clear();

            foreach (var userVoucher in userVouchers)
            {
                selectedUserIds.Add(userVoucher.UserId); // Lưu danh sách ban đầu trước khi chỉnh sửa
                initialUserIds = selectedUserIds.ToList();
            }

            selectedUserCount = selectedUserIds.Count;
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            selectedUserIds.Clear();
            initialUserIds.Clear();
            selectedUserCount = 0;
        }
    }


    private void UpdateInitialUserIds()
    {
    }




    private async Task UpdateVoucher()
    {
        try
        {
            if (voucher.Status == "Không hoạt động")
            {
                errorMessage = "Voucher đang không hoạt động. Không thể thêm hoặc cập nhật khách hàng.";
                return;
            }

            // Nếu voucher có khách hàng riêng, gán số lượng bằng số lượng khách hàng được tích
            if (selectedUserIds.Any())
            {
                voucher.Quantity = selectedUserIds.Count.ToString();
            }

            selectedUserIds = selectedUserIds.Distinct().ToList();
            initialUserIds = initialUserIds.Distinct().ToList();

            await VoucherService.Update(voucher);

            foreach (var userId in selectedUserIds)
            {
                if (!initialUserIds.Contains(userId)) // Nếu khách hàng mới được tích
                {
                    var userVoucher = new Models.UserVouchers
                        {
                            UserId = userId,
                            VoucherId = voucher.Id,
                            IsApplied = false,
                            AppliedAt = null,
                            Create_at = DateTime.Now,
                            Update_at = DateTime.Now
                        };

                    await UserVoucherService.Create(userVoucher);
                }
            }

            foreach (var userId in initialUserIds)
            {
                if (!selectedUserIds.Contains(userId)) // Nếu khách hàng đã bị bỏ tích
                {
                    var userVoucher = await UserVoucherService.GetByVoucherIdAndUserId(voucher.Id, userId);
                    if (userVoucher != null)
                    {
                        await UserVoucherService.Delete(userVoucher.Id);
                    }
                }
            }

            await LoadVouchers();
            voucher = new Vouchers
                {
                    Start_time = DateTime.Now,
                    End_time = DateTime.Now.AddDays(1)
                };
            selectedUserIds.Clear();
            initialUserIds.Clear();
            selectedUserCount = 0;

            errorMessage = "Cập nhật voucher và danh sách khách hàng thành công!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }



    private async Task HandleSubmit()
    {
        if (voucher.Id == 0)
        {
            await CreateVoucher();
        }
        else
        {
            await ConfirmUpdateVoucher();
        }
    }



    private async Task ConfirmUpdateVoucher()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn cập nhật voucher này?");
        if (confirmed)
        {
            UpdateInitialUserIds(); // Cập nhật lại initialUserIds từ danh sách khách hàng đã tích
            await UpdateVoucher();   // Thực hiện cập nhật voucher
        }
    }


    private async Task ConfirmDelete(long id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn cập nhật trạng thái voucher này thành 'Không hoạt động'?");

        if (confirmed)
        {
            var voucherToUpdate = await VoucherService.Details(id);

            if (voucherToUpdate != null)
            {
                voucherToUpdate.Status = "Không hoạt động";
                await VoucherService.Update(voucherToUpdate);

                errorMessage = "Voucher đã được cập nhật trạng thái thành 'Không hoạt động'.";
                await LoadVouchers();
            }
            else
            {
                errorMessage = "Không tìm thấy voucher để cập nhật.";
            }
        }
    }
    private async Task SearchVouchers()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            vouchers = await VoucherService.GetAll();
        }
        else
        {
            vouchers = vouchers
                .Where(v => v.Code.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        currentPage = 1;
        LoadPagedVouchers();
    }


    private async Task SearchUser()
    {
        if (string.IsNullOrEmpty(searchTextUser))
        {
            users = await VoucherService.GetUsers();
        }
        else
        {
            users = users
                .Where(u => u.Name.Contains(searchTextUser, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        currentCustomerPage = 1;
        LoadPagedUsers();
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form không hợp lệ. Hãy kiểm tra các trường nhập liệu!");
    }
}