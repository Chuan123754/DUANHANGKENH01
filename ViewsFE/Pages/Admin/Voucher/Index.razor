@page "/admin/vouchers"
@using System.Text.RegularExpressions
@inject IVoucherService VoucherService
@inject IUserVoucherService UserVoucherService
@inject IJSRuntime JS

<style>
    .info-icon {
    position: relative;
    cursor: pointer;
    display: inline-block;
    color: #6c757d; /* Màu xám nhạt */
    }

    .info-icon .tooltip-text {
        visibility: hidden;
        width: 200px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 4px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 125%; /* Đẩy tooltip lên phía trên */
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
    }

    .info-icon:hover .tooltip-text {
        visibility: visible;
        opacity: 1;
    }

</style>
<div class="page-wrapper">
    <!-- Page header -->
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col d-flex gap-3">
                    <h2 class="page-title">Quản Lý Mã Khuyến Mãi</h2>
                </div>
            </div>
            <div id="breadcrumb">
                <Breadcrumb pageParentTitle="Khuyến mãi" pageTitle="Voucher" pageRoute="/vouchers" />
            </div>
        </div>
    </div>
    <!-- Page body -->
    <div class="page-body">
        <div class="container-xl">
            <div class="row">
                <!-- Create/Edit Form -->
                <div class="col-md-3">
                    <div class="card">
                        <div id="formVoucher" class="card-body">
                            <EditForm Model="@voucher" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                                <DataAnnotationsValidator />
                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert @((errorMessage.Contains("thành công") ? "alert-success" : "alert-danger"))" role="alert">
                                        @errorMessage
                                    </div>
                                }

                                <!-- Các trường thông tin voucher -->
                                <div class="form-group mb-1">
                                    <label for="voucherCode">
                                        Mã Voucher
                                    </label>
                                    <input type="text" id="voucherCode" @bind="voucher.Code" class="form-control" placeholder="Mã voucher" />
                                    <ValidationMessage For="@(() => voucher.Code)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="typeOfVoucher">Loại Voucher</label>
                                    <select id="typeOfVoucher" @bind="selectedTypeVoucher" class="form-control">
                                        <option value="Percentage">Giảm theo phần trăm</option>
                                        <option value="Fixed">Giảm giá cố định</option>
                                    </select>
                                </div>
                                <div class="form-group mb-1">
                                    <label for="discountValue">Giá trị Voucher</label>
                                    <div class="input-group">
                                        <input type="number" id="discountValue"
                                                @bind="voucherValue"
                                                class="form-control"
                                                placeholder="Nhập giá trị khuyến mãi"
                                                @oninput="ValidateVoucherValue" />
                                        <span class="input-group-text">
                                            @((selectedTypeVoucher == "Percentage") ? "%" : "VNĐ")
                                        </span>
                                    </div>
                                    <ValidationMessage For="@(() => voucherValue)" />
                                </div>
                                
@*                                 <div class="form-group mb-1">
                                    <label for="quantity">
                                        Số Lượng
                                        <span class="info-icon">
                                            <i class="fas fa-info-circle fa-sm"></i>
                                            <span class="tooltip-text">Nếu tích khách hàng, số lượng mặc định là số khách hàng được tích</span>
                                        </span>
                                    </label>
                                    <input type="number" id="quantity" @bind="voucher.Quantity" class="form-control" placeholder="Số lượng" />
                                    <ValidationMessage For="@(() => voucher.Quantity)" />
                                </div> *@

                                @if (selectedTypeVoucher == "Percentage")
                                {
                                    <div class="form-group mb-1">
                                        <label for="maxDiscountValue">
                                            Giá Trị Giảm Tối Đa
                                            <span class="info-icon">
                                                <i class="fas fa-info-circle fa-sm"></i>
                                                <span class="tooltip-text">Giá trị giảm tối đa theo "VND" luôn bằng "Phần trăm giảm giá"</span>
                                            </span>
                                        </label>
                                        <input type="number" id="maxDiscountValue" @bind="voucher.MaxDiscountValue" class="form-control" placeholder="Giá trị giảm tối đa" />
                                        <ValidationMessage For="@(() => voucher.MaxDiscountValue)" />
                                    </div>
                                }
                                <div class="form-group mb-1">
                                    <label for="Condition">
                                        Điều kiện
                                        <span class="info-icon">
                                            <i class="fas fa-info-circle fa-sm"></i>
                                            <span class="tooltip-text">Lưu ý: Nếu giảm theo "VND" Thì "Điều kiện" luôn phải lớn hơn "Phần trăm giảm giá"</span>
                                        </span>
                                    </label>
                                    <input type="number" id="Condition" @bind="voucher.Condition" class="form-control" placeholder="Điều kiện" />
                                    <ValidationMessage For="@(() => voucher.Condition)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="startTime">Thời Gian Bắt Đầu
                                        <span class="info-icon">
                                            <i class="fas fa-info-circle fa-sm"></i>
                                            <span class="tooltip-text">Ngày hiện tại lớn hơn ngày bắt đầu = "Hết hạn" <br /> Ngày hiện tại nhỏ hơn ngày bát đầu = "Chò kich hoạt"</span>
                                        </span>
                                    </label>
                                    <InputDate id="startTime" @bind-Value="voucher.Start_time" class="form-control" />
                                    <ValidationMessage For="@(() => voucher.Start_time)" />
                                </div>

                                <div class="form-group mb-1">
                                    <label for="endTime">Thời Gian Kết Thúc
                                        <span class="info-icon">
                                            <i class="fas fa-info-circle fa-sm"></i>
                                            <span class="tooltip-text">Lưu ý: Ngày kết thúc luôn lớn hơn ngày bắt đầu.</span>
                                        </span>
                                    </label>
                                    <InputDate id="endTime" @bind-Value="voucher.End_time" class="form-control" />
                                    <ValidationMessage For="@(() => voucher.End_time)" />
                                </div>


                                @* <div class="form-group mb-1">
                                    <label>Trạng Thái</label><br />

                                    <input type="radio" id="active" name="status" checked="@(voucher.Status == "Hoạt động")" @onchange="SetStatusToActive" />
                                    <label for="active">Hoạt động</label>

                                    <input type="radio" id="inactive" name="status" checked="@(voucher.Status == "Không hoạt động")" @onchange="SetStatusToInactive" />
                                    <label for="inactive">Không hoạt động</label>

                                    <ValidationMessage For="@(() => voucher.Status)" />
                                </div> *@

                                <!-- Nút Tạo và Cập Nhật -->
                                <div class="form-group">
                                    @if (voucher.Id == 0)
                                    {
                                        <button type="submit" class="btn btn-primary">Tạo</button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-warning">Cập Nhật</button>
                                    }
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
                <div class="col-md-9 col-12">
                    <!-- Danh Sách Voucher -->
                    <div class="col-md-12 col-12">
                        <div class="card">
                            <div class="card-body">
                                <!-- Search Box -->
                                <div class="search-box d-flex align-items-center justify-content-between mb-3">
                                    <div></div>
                                    <EditForm Model="voucher" OnValidSubmit="@SearchVouchers">
                                        <div class="form-group d-flex gap-2">
                                            <InputText id="searchInput" class="form-control" @bind-Value="searchText" placeholder="Nhập từ khóa tìm kiếm" />
                                            <button type="submit" class="btn btn-outline-primary">Tìm kiếm</button>
                                        </div>
                                    </EditForm>
                                </div>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>STT</th>
                                            <th>Mã Voucher</th>
                                            <th>Mô Tả</th>
                                            <th>Giá trị</th>
                                            <th>Giá trị tối đa</th>
                                            <th>Điều kiện</th>
                           @*                  <th>Số lượng</th> *@
                                            <th>Trạng thái</th>
                                            <th>Thao tác</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (pagedVouchers != null && pagedVouchers.Any())
                                        {
                                            int index = 0;
                                            @foreach (var voucher in pagedVouchers)
                                            {
                                                <tr>
                                                    <td>@(++index + (currentPage - 1) * pageSize)</td>
                                                    <td>@voucher.Code</td>
                                                    <td>
                                                        @if (voucher.Description == "Percentage")
                                                        {
                                                            <span>Giảm theo phần trăm</span>
                                                        }
                                                        else if (voucher.Description == "Fixed")
                                                        {
                                                            <span>Giảm giá cố định</span>
                                                        }
                                                        else
                                                        {
                                                            <span>Loại voucher không xác định.</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @(voucher.Description == "Percentage"
                                                            ? $"{voucher.Percent}%"
                                                            : (decimal.TryParse(voucher.Percent, out var percentValue)
                                                            ? $"{percentValue.ToString("#,##0").Replace(".", ",")} VNĐ"
                                                            : ""))
                                                    </td>
                                                    <td>@(int.TryParse(voucher.MaxDiscountValue, out var maxValue) ? $"{maxValue.ToString("N0").Replace(".", ",")} VNĐ" : "") </td>
                                                    <td>@(int.TryParse(voucher.Condition, out var condition) ? condition.ToString("N0").Replace(".", ",") : "Invalid") VNĐ</td>
                                                    <td>@voucher.Status</td>
                                                    <td>
                                                        <button class="btn btn-primary" @onclick="() => EditVoucher(voucher.Id)">Sửa</button>

                                                        @if (voucher.Status == "Tạm dừng")
                                                        {
                                                            <button class="btn btn-warning btn-end"
                                                                    @onclick="() => ContinuteVoucher(voucher.Id)">
                                                                Tiếp tục
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-danger btn-end"
                                                                    @onclick="() => ConfirmDelete(voucher.Id)"
                                                                    style="opacity: @(voucher.End_time > DateTime.Now ? 1 : 0.5); cursor: @(voucher.End_time > DateTime.Now);"
                                                                    disabled="@(!(voucher.End_time > DateTime.Now))">
                                                                Tạm dừng
                                                            </button>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="8" class="text-center">Không có dữ liệu để hiển thị.</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                                <div class="mt-4">
                                    <Pagination TItem="Vouchers" PageNumber="currentPage" TotalPages="totalPages" PageSize="pageSize" TotalItems="vouchers.Count" OnPageChanged="GoToPage" OnPageSizeChanged="OnPageSizeChanged" />
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 col-12 pt-3">
                        <div class="card">
                            <div class="card-body">
                                <!-- Search Box -->
                                <div class="search-box d-flex align-items-center justify-content-between mb-3">
                                    <div></div>
                                    <EditForm Model="users" OnValidSubmit="@SearchUser">
                                        <div class="form-group d-flex gap-2">
                                            <InputText id="searchUser" class="form-control" @bind-Value="searchTextUser" placeholder="Nhập từ khóa tên người dùng" />
                                            <button type="submit" class="btn btn-outline-primary">Tìm kiếm</button>
                                        </div>
                                    </EditForm>
                                </div>
                                <h3>Danh Sách Người Dùng</h3>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>
                                                <input type="checkbox" @onchange="ToggleSelectAllUsers" />
                                                Tích All
                                            </th>
                                            <th>Mã KH</th>
                                            <th>Tên Người Dùng</th>
                                            <th>Email</th>
                                            <th>Số Điện Thoại</th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                        @if (pagedUsers == null || !pagedUsers.Any())
                                        {
                                            <tr>
                                                <td colspan="5" class="text-center">Không có người dùng nào để hiển thị.</td>
                                            </tr>
                                        }
                                        else
                                        {
                                            int index = 0;
                                            @foreach (var user in pagedUsers)
                                            {
                                                <tr>
                                                    <td>
                                                        <input type="checkbox" checked="@selectedUserIds.Contains(user.Id)" @onchange="@(e => OnCheckboxChange(e, user.Id))" />
                                                    </td>
                                                    <td>@user.Id</td>
                                                    <td>@user.Name</td>
                                                    <td>@user.Email</td>
                                                    <td>@user.Phone</td>
                                                </tr>
                                            }
                                        }
                                        

                                    </tbody>
                                </table>



                                <div class="mt-4">
                                    <Pagination TItem="Users" PageNumber="currentCustomerPage" TotalPages="totalCustomerPages" PageSize="customerPageSize" TotalItems="users.Count" OnPageChanged="GoToCustomerPage" OnPageSizeChanged="OnCustomerPageSizeChanged" />
                                </div>


                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Vouchers> vouchers = new List<Vouchers>();
    private List<Vouchers> pagedVouchers = new List<Vouchers>();


    private List<Users> users = new List<Users>();
    private Vouchers voucher = new Vouchers();


    private List<long> selectedUserIds = new List<long>();
    private List<long> initialUserIds = new List<long>();


    private string searchText = string.Empty;
    private string searchTextUser = string.Empty;
    private string selectedTypeVoucher = "";
    private decimal voucherValue;

    private string errorMessage = string.Empty;
    private int selectedUserCount = 0;

    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;

    private int currentCustomerPage = 1;
    private int customerPageSize = 5;
    private int totalCustomerPages = 1;
    private List<Users> pagedUsers = new List<Users>();

    private bool selectAllUsers = false;

    private void ToggleSelectAllUsers(ChangeEventArgs e)
    {
        selectAllUsers = e.Value is bool && (bool)e.Value;

        if (selectAllUsers)
        {
            selectedUserIds = pagedUsers.Select(u => u.Id).ToList();
        }
        else
        {
            selectedUserIds.Clear();
        }

        // Cập nhật trạng thái tích của từng checkbox
        StateHasChanged();
    }


    private void ToggleUserSelection(long userId, bool isChecked)
    {
        if (isChecked)
        {
            if (!selectedUserIds.Contains(userId))
            {
                selectedUserIds.Add(userId);
                selectedUserCount++;
            }
        }
        else
        {
            if (selectedUserIds.Contains(userId))
            {
                selectedUserIds.Remove(userId);
                selectedUserCount--;
            }
        }
        selectedUserIds = selectedUserIds.Distinct().ToList();
        Console.WriteLine(selectedUserIds);
    }

    private void OnCheckboxChange(ChangeEventArgs e, long userId)
    {
        bool isChecked = e.Value is bool && (bool)e.Value;

        // Thêm khách hàng vào danh sách tích
        if (isChecked)
        {
            if (!selectedUserIds.Contains(userId))
            {
                selectedUserIds.Add(userId);
            }
        }
        else
        {
            if (selectedUserIds.Contains(userId))
            {
                selectedUserIds.Remove(userId);
            }
        }
        ToggleUserSelection(userId, isChecked);
    }

    private void SetStatusToActive(ChangeEventArgs e)
    {
        voucher.Status = "Hoạt động";
    }

    private void SetStatusToInactive(ChangeEventArgs e)
    {
        voucher.Status = "Không hoạt động";
    }

    protected override async Task OnInitializedAsync()
    {
        voucher.Create_at = DateTime.Now;
        voucher.Update_at = DateTime.Now;
        voucher.Start_time = DateTime.Now;
        voucher.End_time = DateTime.Now.AddDays(1);
        voucher.Status = "Hoạt động";

        vouchers = await VoucherService.GetAll();
        totalPages = (int)Math.Ceiling((double)vouchers.Count / pageSize); // Tính tổng số trang
        LoadPagedVouchers();

        users = await VoucherService.GetUsers();
        totalCustomerPages = (int)Math.Ceiling((double)users.Count / customerPageSize); // Tính tổng số trang khách hàng
        LoadPagedUsers();

        await LoadVouchers();
        await LoadUsers();
    }

    private void LoadPagedVouchers()
    {
        totalPages = (int)Math.Ceiling((double)vouchers.Count / pageSize);

        pagedVouchers = vouchers.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        LoadPagedVouchers();
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1;
        await LoadVouchers();
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            LoadPagedVouchers();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadPagedVouchers();
        }
    }

    private void LoadPagedUsers()
    {
        totalCustomerPages = (int)Math.Ceiling((double)users.Count / customerPageSize);

        pagedUsers = users.Skip((currentCustomerPage - 1) * customerPageSize).Take(customerPageSize).ToList();
    }

    private async Task GoToCustomerPage(int page)
    {
        currentCustomerPage = page;
        LoadPagedUsers();
    }

    private async Task OnCustomerPageSizeChanged(int newPageSize)
    {
        customerPageSize = newPageSize;
        currentCustomerPage = 1;
        LoadPagedUsers();
    }

    private async Task LoadUsers()
    {
        users = await VoucherService.GetUsers();
    }

    private async Task LoadVouchers()
    {
        vouchers = await VoucherService.GetAll();
        totalPages = (int)Math.Ceiling((double)vouchers.Count / pageSize);

        LoadPagedVouchers();
    }

    private async Task CreateVoucher()
    {
        if (selectedTypeVoucher == "Percentage" && voucherValue > 100 || selectedTypeVoucher == "Percentage" && voucherValue <= 0 || selectedTypeVoucher == "Fixed" && voucherValue <= 0)
        {
            await JS.InvokeVoidAsync("toastr.error", "Gía trị Voucher không hợp lệ!");
            return;
        }
        try
        {

            // Kiểm tra trùng mã Code
            if (vouchers.Any(v => v.Code.Equals(voucher.Code, StringComparison.OrdinalIgnoreCase)))
            {
                await JS.InvokeVoidAsync("toastr.error", "Gía trị Voucher không hợp lệ!");
                return;
            }
            if(voucher.Percent=="0")
            {
                await JS.InvokeVoidAsync("toastr.error", "Gía trị Voucher không hợp lệ");

            }

            // kiểm tra thời gian kết thúc
            if (voucher.End_time <= voucher.Start_time)
            {
                await JS.InvokeVoidAsync("toastr.error", "Gía trị Voucher không hợp lệ!");
                return;

            }

            var today = DateTime.Now;
            if (voucher.End_time < today)
            {
                voucher.Status = "Đã kết thúc";
            }
            else if (voucher.Start_time > today)
            {
                voucher.Status = "Sắp diễn ra";
            }
            else
            {
                voucher.Status = "Đang diễn ra";
            }

            if (selectedTypeVoucher == "Fixed")
            {
                voucher.MaxDiscountValue = voucherValue.ToString();
            }

            // Nếu có khách hàng riêng, gán số lượng bằng số lượng khách hàng đã tích
            if (selectedUserIds.Any())
            {
                voucher.Quantity = selectedUserIds.Count.ToString(); // Số lượng là số khách hàng đã tích

                var userVoucher = new Vouchers
                    {
                        Code = voucher.Code,
                        Description = selectedTypeVoucher,
                        Quantity = voucher.Quantity,
                        Percent = voucherValue.ToString(),
                        MaxDiscountValue = voucher.MaxDiscountValue,
                        Condition = voucher.Condition,
                        Start_time = voucher.Start_time,
                        End_time = voucher.End_time,
                        Status = voucher.Status,
                        Create_at = DateTime.Now,
                        Update_at = DateTime.Now
                    };

                var createdVoucher = await VoucherService.Create(userVoucher);

                foreach (var userId in selectedUserIds)
                {
                    var userVoucherEntry = new Models.UserVouchers
                        {
                            UserId = userId,
                            VoucherId = createdVoucher.Id,
                            IsApplied = false,
                            AppliedAt = null,
                            Create_at = DateTime.Now,
                            Update_at = DateTime.Now
                        };

                    await UserVoucherService.Create(userVoucherEntry);
                }
            }
            else
            {
                var newVoucher = new Vouchers
                    {
                        Code = voucher.Code,
                        Description = voucher.Description,
                        Quantity = voucher.Quantity, // Số lượng chỉ có thể nhập nếu không có khách hàng riêng
                        Percent = voucher.Percent,
                        MaxDiscountValue = voucher.MaxDiscountValue,
                        Condition = voucher.Condition,
                        Start_time = voucher.Start_time,
                        End_time = voucher.End_time,
                        Status = voucher.Status,
                        Create_at = DateTime.Now,
                        Update_at = DateTime.Now
                    };

                await VoucherService.Create(newVoucher);
            }

            await LoadVouchers();

            voucher = new Vouchers
                {
                    Create_at = DateTime.Now,
                    Update_at = DateTime.Now,
                    Start_time = DateTime.Now,
                    End_time = DateTime.Now.AddDays(1),
                    Status = "Đang diễn ra"
                };

            selectedUserIds.Clear();
            selectedUserCount = 0;
            await JS.InvokeVoidAsync("toastr.success", "Đã tạo mới voucher thành công!");
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }

    private async Task EditVoucher(long id)
    {
        try
        {

            voucher = await VoucherService.Details(id);
            selectedTypeVoucher = voucher.Description;

            // Load discountValue dựa trên loại voucher
            if (selectedTypeVoucher == "Percentage")
            {
                voucherValue = decimal.TryParse(voucher.Percent, out var percentValue) ? percentValue : 0;
            }
            else if (selectedTypeVoucher == "Fixed")
            {
                voucherValue = decimal.TryParse(voucher.Percent, out var fixedValue) ? fixedValue : 0;
            }

            var userVouchers = await UserVoucherService.GetByVoucherId(id);

            selectedUserIds.Clear();
            initialUserIds.Clear();

            foreach (var userVoucher in userVouchers)
            {
                selectedUserIds.Add(userVoucher.UserId);
                initialUserIds.Add(userVoucher.UserId);
            }

            selectedUserCount = selectedUserIds.Count;

            // Cập nhật trạng thái tích all nếu tất cả khách hàng đều được tích
            selectAllUsers = selectedUserIds.Count == users.Count;
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            errorMessage = "Không tìm thấy voucher để chỉnh sửa.";
            selectedUserIds.Clear();
            initialUserIds.Clear();
            selectedUserCount = 0;
        }
    }



    private void ValidateVoucherValue(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var value))
        {
            if (selectedTypeVoucher == "Percentage")
            {
                if (value <= 0 || value > 100)
                {
                    errorMessage = "Giảm theo phần trăm phải lớn hơn 0 và không quá 100!";
                    voucherValue = 0;
                    return;
                }
            }
            else if (selectedTypeVoucher == "Fixed")
            {
                if (value <= 0)
                {
                    // errorMessage = "Giảm giá cố định phải lớn hơn 0!";
                    voucherValue = 0; // Reset giá trị nếu không hợp lệ
                    return;
                }
            }
            errorMessage = null;
            voucherValue = value;
        }
        else
        {
            // errorMessage = "Giá trị không hợp lệ!";
            voucherValue = 0;
        }
    }


    private void UpdateInitialUserIds()
    {
    }

    private async Task UpdateVoucher()
    {
        if (selectedTypeVoucher == "Percentage" && voucherValue > 100 || selectedTypeVoucher == "Percentage" && voucherValue <= 0 || selectedTypeVoucher == "Fixed" && voucherValue <= 0)
        {
            await JS.InvokeVoidAsync("toastr.error", "Gía trị Voucher không hợp lệ!");
            return;
        }
        try
        {
            // Kiểm tra trùng mã Code trừ ID hiện tại.
            if (vouchers.Any(v => v.Code.Equals(voucher.Code, StringComparison.OrdinalIgnoreCase) && v.Id != voucher.Id))
            {
                errorMessage = "Mã voucher đã tồn tại, vui lòng nhập mã khác!";
                return;
            }

            // kiểm tra thời gian kết thúc
            if (voucher.End_time < voucher.Start_time)
            {
                errorMessage = "Thời gian kết thúc phải lớn hơn thời gian bắt đầu";
                return;
            }

            var today = DateTime.Now;
            if (voucher.End_time < today)
            {
                voucher.Status = "Đã kết thúc";
            }
            else if (voucher.Start_time > today)
            {
                voucher.Status = "Sắp diễn ra";
            }
            else
            {
                voucher.Status = "Đang diễn ra";
            }

            // Nếu voucher đang "Hoạt động", thực hiện thêm/bỏ khách hàng
            if (selectedUserIds.Any())
            {
                voucher.Quantity = selectedUserIds.Count.ToString();
            }

            selectedUserIds = selectedUserIds.Distinct().ToList();
            initialUserIds = initialUserIds.Distinct().ToList();
            voucher.Description = selectedTypeVoucher;
            voucher.Percent = voucherValue.ToString();
            if (selectedTypeVoucher == "Fixed")
            {
                voucher.MaxDiscountValue = voucherValue.ToString();
            }

            await VoucherService.Update(voucher);

            foreach (var userId in selectedUserIds)
            {
                if (!initialUserIds.Contains(userId)) // Nếu khách hàng mới được tích
                {
                    var userVoucher = new Models.UserVouchers
                        {
                            UserId = userId,
                            VoucherId = voucher.Id,
                            IsApplied = false,
                            AppliedAt = null,
                            Create_at = DateTime.Now,
                            Update_at = DateTime.Now
                        };

                    await UserVoucherService.Create(userVoucher);
                }
            }

            foreach (var userId in initialUserIds)
            {
                if (!selectedUserIds.Contains(userId)) // Nếu khách hàng đã bị bỏ tích
                {
                    var userVoucher = await UserVoucherService.GetByVoucherIdAndUserId(voucher.Id, userId);
                    if (userVoucher != null)
                    {
                        await UserVoucherService.Delete(userVoucher.Id);
                    }
                }
            }
            await LoadVouchers();
            selectedUserIds.Clear();
            initialUserIds.Clear();
            selectedUserCount = 0;
            await JS.InvokeVoidAsync("toastr.success", "Cập nhật voucher và danh sách khách hàng thành công!");
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        
        if (voucher.Id == 0)
        {
            await CreateVoucher();
        }
        else
        {
            await ConfirmUpdateVoucher();
        }
    }


    private async Task ConfirmUpdateVoucher()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn cập nhật voucher này?");
        if (confirmed)
        {
            UpdateInitialUserIds(); // Cập nhật lại initialUserIds từ danh sách khách hàng đã tích
            await UpdateVoucher(); 
        }
    }


    private async Task ConfirmDelete(long id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận TẠM DỪNG Voucher?");

        if (confirmed)
        {
            var voucherToUpdate = await VoucherService.Details(id);

            if (voucherToUpdate != null)
            {
                voucherToUpdate.Status = "Tạm dừng";
                await VoucherService.Update(voucherToUpdate);
                await JS.InvokeVoidAsync("toastr.success", "Voucher đã được cập nhật trạng thái thành 'TẠM DỪNG'.");
                await LoadVouchers();
            }
            else
            {
                await JS.InvokeVoidAsync("toastr.error", "Mã khuyến mãi không tồn tại!");
            }
        }
    }

        private async Task ContinuteVoucher(long id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận TIẾP TỤC hoạt động Voucher?");

        if (confirmed)
        {
            var voucherToUpdate = await VoucherService.Details(id);

            if (voucherToUpdate != null)
            {
                voucherToUpdate.Status = "Đang diễn ra";
                await VoucherService.Update(voucherToUpdate);
                await JS.InvokeVoidAsync("toastr.success", "Cập nhật trạng thái VOUCHER thành công.");
                await LoadVouchers();
            }
            else
            {
                await JS.InvokeVoidAsync("toastr.error", "Mã khuyến mãi không tồn tại!");
            }
        }
    }

    private async Task SearchVouchers()
    {
        if (string.IsNullOrEmpty(searchText))
        {
            vouchers = await VoucherService.GetAll();
        }
        else
        {
            vouchers = vouchers
                .Where(v => v.Code.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        currentPage = 1;
        LoadPagedVouchers();
    }


    private async Task SearchUser()
    {
        if (string.IsNullOrEmpty(searchTextUser))
        {
            users = await VoucherService.GetUsers();
        }
        else
        {
            users = users
                .Where(u => u.Name.Contains(searchTextUser, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        currentCustomerPage = 1;
        LoadPagedUsers();
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form không hợp lệ. Hãy kiểm tra các trường nhập liệu!");
    }
}