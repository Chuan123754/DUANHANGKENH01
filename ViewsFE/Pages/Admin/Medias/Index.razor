@page "/admin/media"
@inject FilesIServices sev
@inject IJSRuntime JS

<div class="page-wrapper">
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col d-flex gap-3">
                    <h2 class="page-title">Media</h2>
                </div>
            </div>
        </div>
    </div>
    <div class="page-body">
        <div class="container-xl">
            <form class="dropzone mb-5" id="dropzone-default" enctype="multipart/form-data">
                <div class="fallback">
                    <input name="file" type="file" accept="image/*" multiple />
                </div>
            </form>

            <div class="card">
                <div class="card-body">
                    <div class="search-box d-flex align-items-center justify-content-between mb-3">
                        <div></div>
                        <EditForm Model="files" class="search-form" OnValidSubmit="@OnSearch">
                            <div class="form-group d-flex gap-2">
                                <InputText id="search_input" class="form-control" @bind-Value="search_query" placeholder="Nhập từ khóa tìm kiếm" />
                                <button type="submit" class="btn btn-outline-primary">Tìm kiếm</button>
                            </div>
                        </EditForm>
                    </div>
                    <div id="table-default">
                        <div class="d-grid" style="grid-template-columns: repeat(7, 1fr); gap: 16px">
                            @if (listFiles != null)
                            {
                                @foreach (var file in listFiles)
                                {
                                    <div class="image-item" data-name="@file.Name" data-id="@file.Id">
                                        <button type="button" class="btn btn-default p-0 m-0 btn-choose-image" data-bs-toggle="modal" data-bs-target="#file-@file.Id" style="width: 100%">
                                            <img src="@file.Path" class="w-100 object-fit-cover" alt="IMG" height="150" />
                                        </button>
                                        <div class="modal fade" id="file-@file.Id" tabindex="-1" role="dialog">
                                            <div class="modal-dialog modal-xl" role="document">
                                                <div class="modal-content">
                                                    <div class="modal-body">
                                                        <div class="row">
                                                            <div class="col-12 col-md-6">
                                                                <img src="@file.Path" class="w-100 object-fit-contain" style="height: 444px" alt="@file.Name" />
                                                            </div>
                                                            <div class="col-12 col-md-6">
                                                                <p>Đã tải lên vào: @(file.Created_at?.ToString("dd/MM/yyyy HH:mm:ss") ?? "N/A")</p>
                                                                <p>Tên tập tin: @file.Name </p>
                                                                <p>Loại tập tin: @file.Mine</p>
                                                                <p>Kích thước: @file.Size KB</p>
                                                                <p>File URL: <a href="@file.Path" target="_blank">@file.Path</a></p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                                                        <button type="button" class="btn btn-danger" @onclick="async () => await DeleteFile(file.Id)">Xóa</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                          
                        </div>
                        <div class="mt-4">
                            <PaginationMedia TItem="Files" PageNumber="page_number" TotalPages="total_pages" PageSize="page_size" TotalItems="totalItems" OnPageChanged="GoToPage" OnPageSizeChanged="OnPageSizeChanged" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    window.initializeDropzone = () => {
        if (typeof Dropzone !== 'undefined') {
            if (Dropzone.instances.length > 0) {
                Dropzone.instances.forEach(dz => dz.destroy());
            }

            var dropzone = new Dropzone("#dropzone-default", {
                url: "https://localhost:7011/api/Files/upload",  // URL của API
                method: "post",
                autoProcessQueue: true,
                addRemoveLinks: true,
                parallelUploads: 50,
                maxFilesize: 2, // Kích thước tối đa là 2 MB
                dictRemoveFile: "Xóa",
                init: function () {
                    this.on("success", function (file, response) {
                        toastr.success('Thêm thành công.');
                        // Xóa tệp khỏi Dropzone sau khi upload thành công
                        this.removeFile(file);

                        if (dotNetObjectReference) {
                            console.log("Đang gọi LoadPosts...");
                            dotNetObjectReference.invokeMethodAsync('LoadPosts')
                                .then(() => {
                                    console.log("LoadPosts đã được gọi từ JavaScript.");
                                })
                                .catch(error => {
                                    console.error("Lỗi khi gọi LoadPosts từ JavaScript: ", error);
                                });
                        }
                    });


                    this.on("error", function (file, errorMessage) {
                        toastr.error('Thêm thất bại: ' + errorMessage);
                        this.removeFile(file); // Xóa tệp khỏi Dropzone nếu có lỗi
                    });

                    // Thông báo lỗi nếu kích thước tệp vượt quá mức tối đa
                    this.on("maxfilesexceeded", function (file) {
                        toastr.error('Tệp vượt quá kích thước tối đa cho phép (1 MB).');
                        this.removeFile(file); // Xóa tệp khỏi Dropzone nếu vượt kích thước
                    });

                  
                }
            });
        } else {
            console.error("Dropzone is not defined. Make sure the script is included.");
        }
    };

 

</script>

@code {
    private DotNetObjectReference<Index> objRef;

    private List<Files> listFiles = new();
    private Files files = new();
    private string search_query = string.Empty;
    private int page_number = 1;
    private int total_pages = 1;
    private int page_size = 21;
    private int totalItems;
    private bool initializeDropzone = false;
    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }
    [JSInvokable]
    public async Task LoadPosts()
    {
        string searchTerm = string.IsNullOrEmpty(search_query) ? "" : search_query;
        listFiles = await sev.GetByTypeAsync(page_number, page_size, search_query);
        totalItems = await sev.GetTotalCountAsync(searchTerm);
        total_pages = (int)Math.Ceiling((double)totalItems / page_size);
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Khởi tạo Dropzone...");
            await JS.InvokeVoidAsync("initializeDropzone", objRef); 
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
    private async Task GoToPage(int page)
    {
        page_number = page;
        await LoadPosts();
    }
    private async Task OnPageSizeChanged(int newPageSize)
    {
        page_size = newPageSize;
        page_number = 1;
        await LoadPosts();
    }
    private async Task OnSearch()
    {
        await LoadPosts();
    }
    private async Task DeleteFile(long id)
    {
        try
        {
            await sev.Delete(id);
            await JS.InvokeVoidAsync("toastr.success", "Xoá thành công.");
            await JS.InvokeVoidAsync("closeModal", id); // Lệnh đóng modal
            await LoadPosts();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("toastr.error", "Xoá thất bại.");
            Console.Error.WriteLine($"Error deleting file: {ex.Message}");
        }
    }
}

<script>
    window.closeModal = (id) => {
        const modalElement = document.getElementById(`file-${id}`);
        if (modalElement) {
            const modalInstance = bootstrap.Modal.getInstance(modalElement);
            if (modalInstance) {
                modalInstance.hide();
            }
        }
    };
</script>

