@page "/admin/media"
@inject FilesIServices sev
@inject IJSRuntime JS



<div class="page-wrapper">
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col d-flex gap-3">
                    <h2 class="page-title">Media</h2>
                </div>
            </div>
        </div>
    </div>
    <div class="page-body">
        <div class="container-xl">
            <form class="dropzone mb-5" id="dropzone-default" enctype="multipart/form-data">
                <div class="fallback">
                    <input name="file" type="file" accept="image/*" multiple />
                </div>
            </form>

            <div class="card">
                <div class="card-body">
                    <div class="search-box d-flex align-items-center justify-content-between mb-3">
                        <div></div>
                        <EditForm Model="files" OnValidSubmit="@OnSearch">
                            <div class="form-group d-flex gap-2">
                                <InputText id="search_input" class="form-control" @bind-Value="search_query" placeholder="Nhập từ khóa tìm kiếm" />
                                <button type="submit" class="btn btn-outline-primary">Tìm kiếm</button>
                            </div>
                        </EditForm>
                    </div>
                    <div id="table-default">
                        <div class="d-grid" style="grid-template-columns: repeat(7, 1fr); gap: 16px">
                            @if (listFiles != null)
                            {
                                @foreach (var file in listFiles)
                                {
                                    <div class="image-item" data-name="@file.Name" data-id="@file.Id">
                                        <button type="button" class="btn btn-default p-0 m-0 btn-choose-image" data-bs-toggle="modal" data-bs-target="#file-@file.Id" style="width: 100%">
                                            <img src="@file.Path" class="w-100 object-fit-cover" alt="IMG" height="150" />

                                            <span class="checked">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                                     stroke-linejoin="round"
                                                     class="icon icon-tabler icons-tabler-outline icon-tabler-check">
                                                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                    <path d="M5 12l5 5l10 -10" />
                                                </svg>
                                            </span>
                                        </button>
                                        <div class="modal" id="file-@file.Id" tabindex="-1" role="dialog" aria-labelledby="fileModalLabel-@file.Id" aria-hidden="true">
                                            <div class="modal-dialog modal-xl" role="document">
                                                <div class="modal-content">
                                                    <div class="modal-body">
                                                        <div class="row">
                                                            <div class="col-12 col-md-6">
                                                                <img src="@file.Path" class="w-100 object-fit-contain" style="height: 444px" alt="@file.Name" />
                                                            </div>
                                                            <div class="col-12 col-md-6">
                                                                <p>Đã tải lên vào lúc: @(file.Created_at.HasValue ? file.Created_at.Value.ToString("dd/MM/yyyy HH:mm:ss") : "N/A")</p>
                                                                <p>Tên tập tin: @file.Name</p>
                                                                <p>Loại tập tin: @file.Mine</p>
                                                                <p>Kích thước: @file.Size KB</p>
                                                                <p>File URL: <a href="@file.Path" target="_blank">@file.Path</a></p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                                                        <button type="button" class="btn btn-danger" @onclick="() => DeleteFile(file.Id)">Xóa</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Files files = new();
    private List<Files> listFiles = new();
    private string search_query = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        listFiles = await sev.GetAll();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeDropzone");
        }
    }

    private async Task OnSearch()
    {
        listFiles = await sev.Search(search_query);
    }

    private async Task DeleteFile(long id)
    {
        try
        {
            await sev.Delete(id);
            listFiles = await sev.GetAll();
            await JS.InvokeVoidAsync("toastr.success", "File deleted successfully.");
            await JS.InvokeVoidAsync("removeModalBackdrop");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("toastr.error", "Failed to delete file.");
            Console.Error.WriteLine($"Error deleting file: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnUpload()
    {
        listFiles = await sev.GetAll();
        await JS.InvokeVoidAsync("toastr.success", "Tệp được tải lên thành công.");
        StateHasChanged();
    }

    [JSInvokable]
    public async Task<object> UploadFile(string fileName, string fileContent, string contentType)
    {
        try
        {
            var fileBytes = Convert.FromBase64String(fileContent);
            using var memoryStream = new MemoryStream(fileBytes);
            var file = new BrowserFileWrapper(memoryStream, fileName, contentType);

            var result = await sev.Upload(file);
            await OnUpload();
            return new { success = true, data = result };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
            return new { success = false, error = ex.Message };
        }
    }


    public class BrowserFileWrapper : IBrowserFile
    {
        private readonly MemoryStream _stream;
        public string Name { get; }
        public DateTimeOffset LastModified { get; }
        public long Size { get; }
        public string ContentType { get; }

        public BrowserFileWrapper(MemoryStream stream, string fileName, string contentType)
        {
            _stream = stream;
            Name = fileName;
            LastModified = DateTimeOffset.UtcNow;
            Size = stream.Length;
            ContentType = contentType;
        }

        public Stream OpenReadStream(long maxAllowedSize = 512000, CancellationToken cancellationToken = default)
        {
            if (Size > maxAllowedSize)
                throw new IOException($"The file size ({Size} bytes) exceeds the maximum allowed size of {maxAllowedSize} bytes.");

            _stream.Position = 0;
            return _stream;
        }
    }
}
<script>
    window.removeModalBackdrop = () => {
        // Xóa lớp backdrop của modal
        document.querySelectorAll('.modal-backdrop.show').forEach((backdrop) => backdrop.remove());
    };

    window.initializeDropzone = () => {
        if (typeof Dropzone !== 'undefined') {
            if (Dropzone.instances.length > 0) {
                Dropzone.instances.forEach(dz => dz.destroy());
            }

            var dropzone = new Dropzone("#dropzone-default", {
                url: "/",  // Đặt một URL giả, vì chúng ta sẽ xử lý upload bằng C#
                autoProcessQueue: false,
                addRemoveLinks: true,
                dictRemoveFile: "Xóa",
                init: function () {
                    this.on("addedfile", function (file) {
                        var reader = new FileReader();
                        reader.onload = async function (event) {
                            var fileContent = event.target.result.split(',')[1]; // Lấy phần base64
                            var result = await DotNet.invokeMethodAsync('ViewsFE', 'UploadFile', file.name, fileContent, file.type);
                            if (result.success) {
                                toastr.success('Thêm thành công.');
                                console.log("File uploaded successfully:", result.data);
                            } else {
                                toastr.error('Thêm thất bại: ' + result.error);
                                console.error("Upload failed:", result.error);
                            }
                            dropzone.removeFile(file);
                        };
                        reader.readAsDataURL(file);
                    });
                }
            });
        } else {
            console.error("Dropzone is not defined. Make sure the script is included.");
        }
    };
</script>

