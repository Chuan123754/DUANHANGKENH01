@page "/admin/orders"
@inject NavigationManager nav
@inject IOrderIServices orderService
@inject OrderDetailsIServices orderDetailsService
@inject IOrderTrackingService OrderTrackingService
@inject IJSRuntime JS

<style>
    .text-bold {
        font-weight: bold; /* Làm chữ "Tất cả" đậm */
    }
    .badge {
        padding: 0.3em 0.6em;
        border-radius: px;
        color: white;
        font-size: 14px;
    }
    .customer-badge {
        display: inline-block;
        padding: 0.5em 1em;
        border-radius: 50px;
        border: 1px solid gray;
        background-color: #C0C0C0;
        font-size: 14px;
        color: #333;
    }
    .bg-taiquay {
        background-color: #CCCC99;
        color:black;
    }

    .bg-giaohang {
        background-color: #FFCC99;
        color: black;
    }
    .bg-danger {
        background-color: red;
    }

    .bg-success {
        background-color: green;
    }

    .bg-secondary {
        background-color: gray;
    }
</style>
<div class="page-wrapper">
    <!-- Page header -->
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col">
                    <h2 class="page-title">DANH SÁCH ĐƠN HÀNG</h2>
                </div>
                <div class="col-auto ms-auto d-print-none ms-4">
                    <div class="btn-list">
                        <button class="btn btn-outline-primary d-none d-sm-inline-block" @onclick="NavigateToSell">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M12 5l0 14" />
                                <path d="M5 12l14 0" />
                            </svg>
                            Tạo đơn hàng mới
                        </button>
                    </div>
                </div>
            </div>           
        </div>
    </div>

    <!-- Page body -->
    <div class="page-body">
        <div class="container-xl">
            <div class="row row-deck row-cards">
                <!-- Input tìm kiếm -->
                <div class="form-group d-flex justify-content-end">
                    <div class="d-flex gap-2" style="width: 40%;">
                        <input type="text" id="searchInput"
                               class="form-control flex-grow-1"
                               @bind="searchText"
                               @oninput="SearchOrders"
                               placeholder="Nhập Id đơn hàng, tên khách hàng hoặc số điện thoại" />
                        <button type="button" class="btn btn-outline-primary">
                            Tìm kiếm
                        </button>
                    </div>
                </div>
               <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <ul class="nav nav-tabs card-header-tabs" data-bs-toggle="tabs" >
                                <li class="nav-item">
                                    <a @onclick="async () => await ListOrder()"
                                       class="order-tab-click nav-link"
                                       data-bs-toggle="tab">
                                        <strong>Tất cả</strong>
                                        <span style="margin-left: 8px; font-size: 0.7rem; padding: 0.2em 0.4em; border-radius: 5px; background-color: #6c757d; color: white;">
                                            @totalOrders
                                        </span>

                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a @onclick="async () => await GetProcessinglOrders()"
                                       class="order-tab-click nav-link"
                                       data-bs-toggle="tab">
                                        <strong>Đang xử lý</strong>
                                        <span style="margin-left: 8px; font-size: 0.7rem; padding: 0.2em 0.4em; border-radius: 5px; background-color: #6c757d; color: white;">
                                            @totalProcessing
                                        </span>

                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a @onclick="async () => await GetCompleteOrders()"
                                       class="order-tab-click nav-link"
                                       data-bs-toggle="tab">
                                        <strong>Hoàn thành</strong>
                                        <span style="margin-left: 8px; font-size: 0.7rem; padding: 0.2em 0.4em; border-radius: 5px; background-color: #6c757d; color: white;">
                                            @totalComplete
                                        </span>

                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a @onclick="async () => await GetCanceledOrders()"
                                       class="order-tab-click nav-link"
                                       data-bs-toggle="tab">
                                        <strong>Đơn hủy</strong>
                                        <span style="margin-left: 8px; font-size: 0.7rem; padding: 0.2em 0.4em; border-radius: 5px; background-color: #6c757d; color: white;">
                                            @canceledOrders
                                        </span>

                                    </a>
                                </li>
                            </ul>
                            <div class="d-flex justify-content-end align-items-center gap-2 mb-3">
                                <input type="date" id="startDate" @bind="startDate" class="form-control" placeholder="Ngày bắt đầu" style="max-width: 200px;" />
                                <input type="date" id="endDate" @bind="endDate" class="form-control" placeholder="Ngày kết thúc" style="max-width: 200px;" />
                                <button class="btn btn-primary" @onclick="FilterByDateRange">Lọc theo thời gian</button>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <div class="search-box d-flex align-items-center justify-content-between mb-3">                    
                            </div>
                            <table class="table card-table table-vcenter text-nowrap datatable">
                                <thead>
                                    <tr>
                                        <th>Id đơn hàng</th>
                                        <th>Người tạo</th>
                                        <th>Tên khách hàng</th>
                                        <th>Số điện thoại</th>
                                        <th>Loại hóa đơn</th>
                                        <th>Tổng tiền</th>
                                        <th>Ngày tạo</th>
                                        <th>Trạng thái</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (pagedOrders != null && pagedOrders.Any())
                                    {
                                        int index = 0;
                                        @foreach (var item in pagedOrders)
                                        {
                                            <tr>
                                                <td>@item.Id</td>
                                                <td>
                                                    @if(item.CreatedByAdminId == null )
                                                    {
                                                        <span>Hệ thống</span>
                                                    }
                                                    else
                                                    {
                                                        @(item.Admin.FirstName + " " + item.Admin.LastName)
                                                    }
                                              
                                                </td>
                                                <td>
                                                    @if (item.Users == null)
                                                    {
                                                        <span class="customer-badge">Khách lẻ</span>
                                                    }
                                                    else
                                                    {
                                                        @item.Users.Name
                                                    }
                                                </td>
                                                <td>
                                                    @if (item.Users == null)
                                                    {
                                                        <span class="customer-badge">N/A</span>
                                                    }
                                                    else
                                                    {
                                                        @item.Users.Phone
                                                    }
                                                </td>
                                                <td>
                                                    <span class="@GetNoteClass(item.Note)">
                                                        @item.Note
                                                    </span>
                                                </td>

                                                <td>
                                                    @string.Format("{0:N0}", (item.Totalmoney)).Replace(".", ",") VNĐ
                                                </td>
                                                <td>@item.Created_at</td>
                                                <td>
                                                    <span class="@GetStatusClass(item.Status)">
                                                        @item.Status
                                                    </span>
                                                </td>                                               
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => GoToOrderTracking(item.Id)">Chi tiết</button>

                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                                                                      
                                           <td colspan="9" class="text-center">Không có dữ liệu để hiển thị.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="mt-4">
                                <Pagination TItem="Orders" PageNumber="currentPage" TotalPages="totalPages" PageSize="pageSize" TotalItems="lst_Orders.Count" OnPageChanged="GoToPage" OnPageSizeChanged="OnPageSizeChanged" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Orders> lst_Orders = new List<Orders>();
    private List<Orders> pagedOrders = new List<Orders>();
    private List<Order_details> lst_OrderDetails = new List<Order_details>();

    private List<Orders> Orders = new();

    private IEnumerable<Orders> paged_Orders;
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalOrders = 0; // tổng hóa đơn
    private int totalProcessing = 0; // tổng đơn hàng đang xử lý
    private int totalComplete = 0; // đơn hàng hoàn thành
    private int canceledOrders = 0; // bị hủy

    private DateTime? startDate;
    private DateTime? endDate;

    private string GetNoteClass(string note)
    {
        if (note == "Tại quầy")
        {
            return "badge bg-taiquay";
        }
        else if (note == "Giao hàng")
        {
            return "badge bg-giaohang";
        }
        return "badge bg-secondary";
    }
    private void LoadPagedOrders()
    {
        totalPages = (int)Math.Ceiling((double)lst_Orders.Count / pageSize);
        pagedOrders = lst_Orders.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        LoadPagedOrders();
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1;
        LoadPagedOrders();
    }

    private string GetStatusClass(string status) // giao diện cho status
    {
        if (status == "Hóa đơn treo")
        {
            return "badge bg-danger";
        }
        else if (status == "Hoàn tất đơn")
        {
            return "badge bg-success";
        }
        return "badge bg-secondary";
    }
    private void NavigateToSell()
    {
        nav.NavigateTo("/admin/sell");
    }

    private void GoToOrderTracking(long orderId)
    {
        nav.NavigateTo($"/ordertracking/{orderId}");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders(); 
        await ListOrder();  
        LoadPagedOrders();
    }
    private async Task LoadOrders()
    {
        Orders = await OrderTrackingService.GetAllOrders();
    }


    public async Task ListOrder()
    {   
        var lst_OrdersShipping = await orderService.GetAll();
        // sắp xếp
        lst_Orders = lst_OrdersShipping
       .OrderByDescending(o => o.Status == "Hóa đơn treo")
       .ThenByDescending(o => o.Status == "Đã thanh toán")
       .ThenByDescending(o => o.Status == "Chờ xác nhận")
       .ThenByDescending(o => o.Status == "Đã xác nhận")
       .ThenByDescending(o => o.Status == "Đã chuẩn bị hàng")
       .ThenByDescending(o => o.Status == "Đã lấy hàng")
       .ThenByDescending(o => o.Status == "Đang vận chuyển")
       .ThenByDescending(o => o.Status == "Giao thành công")
       .ThenByDescending(o => o.Status == "Giao thất bại")
       .ThenByDescending(o => o.Status == "Hoàn tất đơn")
       .ThenByDescending(o => o.Status == "Đơn hủy")
       .ThenByDescending(o => o.Created_at)
       .ToList();

        // Tính toán thống kê
        totalOrders = lst_Orders.Count;
        canceledOrders = lst_Orders.Count(o => o.Status == "Đơn hủy");
        totalComplete = lst_Orders.Count(o => o.Status == "Hoàn tất đơn");
        totalProcessing = lst_Orders.Count(o => o.Status != "Đã hủy" && o.Status != "Hoàn tất đơn");
        LoadPagedOrders();
    }
    private async Task FilterByDateRange()
    {
        lst_Orders = await orderService.GetAll() ?? new List<Orders>();

        if (startDate.HasValue && endDate.HasValue)
        {
            lst_Orders = lst_Orders
                .Where(o => o.Created_at >= startDate.Value && o.Created_at <= endDate.Value)
                .ToList();
        }

        currentPage = 1;
        LoadPagedOrders();
    }

    private async Task GetTotalOrders()
    {
        lst_Orders = await orderService.GetAll();
        currentPage = 1;
        LoadPagedOrders();
    }
    private async Task GetProcessinglOrders()
    {
        var lstOrders = await orderService.GetAll();
        lst_Orders = lstOrders.Where(o => o.Status != "Đơn hủy" && o.Status != "Hoàn tất đơn")
               .OrderByDescending(o => o.Status == "Hóa đơn treo")
               .ThenByDescending(o => o.Status == "Đã thanh toán")
               .ThenByDescending(o => o.Status == "Chờ xác nhận")
               .ThenByDescending(o => o.Status == "Đã xác nhận")
               .ThenByDescending(o => o.Status == "Đã chuẩn bị hàng")
               .ThenByDescending(o => o.Status == "Đã lấy hàng")
               .ThenByDescending(o => o.Status == "Đang vận chuyển")
               .ThenByDescending(o => o.Status == "Giao thành công")
               .ThenByDescending(o => o.Status == "Giao thất bại")
               .ThenByDescending(o => o.Created_at)
               .ToList();

        LoadPagedOrders();
    }
    private async Task GetCompleteOrders()
    {
        var lstOrders = await orderService.GetAll();
        lst_Orders = lstOrders.Where(o => o.Status == "Hoàn tất đơn").OrderByDescending(o => o.Created_at).ToList();
        LoadPagedOrders();
    }
    private async Task GetCanceledOrders()
    {
        var lstOrders = await orderService.GetAll();
        lst_Orders = lstOrders.Where(o => o.Status == "Đơn hủy").OrderByDescending(o => o.Created_at).ToList();
        LoadPagedOrders(); 
    }

    private async Task SearchOrders(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;

        lst_Orders = await orderService.GetAll() ?? new List<Orders>();

        if (string.IsNullOrEmpty(searchText))
        {
            await ListOrder();
        }
        else if (searchText.Length == 10 && searchText.All(char.IsDigit))
        {
            lst_Orders = lst_Orders
                .Where(o => o.Users?.Phone == searchText)
                .ToList();
        }
        else if (int.TryParse(searchText, out int searchId))
        {
            lst_Orders = lst_Orders
                .Where(o => o.Id == searchId)
                .ToList();
        }
        else
        {
            lst_Orders = lst_Orders
                .Where(o => o.Users?.Name?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false)
                .ToList();
        }

        currentPage = 1;
        LoadPagedOrders();
        StateHasChanged();
    }

    

}
    
