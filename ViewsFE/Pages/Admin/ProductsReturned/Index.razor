@page "/Admin/OrderDetails/{id:long}"
@inject IOrderIServices OrderServices
@inject OrderDetailsIServices OrderDetailsServices
@inject IProductsReturnedService ProductsReturnedService
@inject IAddressServices AddressService
@inject IJSRuntime JSRuntime

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-3">
        @ErrorMessage
    </div>
}

<style>
    .custom-modal .modal-dialog {
        max-width: 90%; /* Tùy chỉnh chiều rộng */
        width: auto;
    }

    .custom-modal .modal-content {
        height: 110vh; /* Tùy chỉnh chiều cao */
        overflow-y: auto;
    }

    .card-custom {
        background-color: #ffffff; /* Nền trắng */
        border: 1px solid #ddd; /* Viền */
        border-radius: 10px; /* Bo góc */
        padding: 20px; /* Khoảng cách bên trong */
        margin-bottom: 20px; /* Khoảng cách dưới */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Đổ bóng */
    }

    .row {
        display: flex;
        gap: 20px; /* Khoảng cách giữa các cột */
    }

    .col-md-6 {
        flex: 1;
    }

    h4 {
        font-size: 1.2rem;
        margin-bottom: 15px;
        color: #333;
    }

    p {
        margin: 0 0 10px;
        font-size: 1rem;
        color: #555;
    }

    table {
        width: 95%;
        border-collapse: collapse;
    }

    table th, table td {
        padding: 8px;
        text-align: left;
        border: 1px solid #ddd;
    }

    
    /* Tùy chỉnh modal */
    #returnModal .modal-dialog {
        max-width: 70%;
        width: auto; 
        margin: 1.75rem auto; /* Căn giữa modal */
    }

    #returnModal .modal-content {
        height: 50vh; 
        overflow-y: auto; 
        padding: 20px; 
    }


</style>


@if (Order != null)
{
    <!-- Thông tin hóa đơn -->
    <div class="card-custom mt-4">
        <h4>Thông tin hóa đơn</h4>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Tổng tiền</th>
                    <th>Trạng thái</th>
                    <th>Ngày tạo</th>
                    <th>Ghi chú</th>
                    <th>Trạng thái</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Order.Id</td>
                    <td>@(Order.TotalAmount.HasValue ? Order.TotalAmount.Value.ToString("C") : "N/A")</td>
                    <td>@Order.Status</td>
                    <td>@(Order.Created_at.HasValue ? Order.Created_at.Value.ToString("dd/MM/yyyy") : "N/A")</td>
                    <td>@Order.Note</td>
                </tr>
            </tbody>
        </table>
    </div>

     <!-- Chi tiết hóa đơn -->
    <div class="card-custom mt-4">
        <h4>Chi tiết hóa đơn</h4>
        <form>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Chọn</th>
                        <th>ID</th>
                        <th>SKU</th>
                        <th>Số lượng</th>
                        <th>Size</th>
                        <th>Màu sắc</th>
                        <th>Vải</th>
                        <th>Chất liệu</th>
                        <th>Phong cách</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detail in OrderDetails)
                    {
                        <tr>
                            <td>
                                @if (detail.Quantity > 0)
                                {
                                    <input type="checkbox" @bind="detail.IsSelected" />
                                }
                                else
                                {
                                    <span class="text-danger">Hết</span>
                                }
                            </td>
                            <td>@detail.Id</td>
                            <td>@detail.ProductAttributes?.SKU</td>
                            <td>@detail.Quantity</td>
                            <td>@detail.ProductAttributes?.Size?.Title</td>
                            <td>@detail.ProductAttributes?.Color?.Title</td>
                            <td>@detail.ProductAttributes?.Product_Variant?.Textile_Technology?.Title</td>
                            <td>@detail.ProductAttributes?.Product_Variant?.Material?.Title</td>
                            <td>@detail.ProductAttributes?.Product_Variant?.Style?.Title</td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="button" @onclick="ShowReturnModal" class="btn btn-danger mt-2">Đổi</button>
            <button type="button" @onclick="ShowRefundModal" class="btn btn-warning mt-2">Trả</button>
        </form>
    </div>

    <!-- Danh sách sản phẩm đổi -->
    <div class="card-custom mt-4">
        <h4>Danh sách sản phẩm đổi</h4>
        @if (ProductsReturned.Any(p => p.IsReturn ?? false))
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>OrderDetail ID</th>
                        <th>Số lượng</th>
                        <th>Lý do đổi trả</th>
                        <th>Tình trạng</th>
                        <th>Ngày đổi trả</th>
                        <th>Loại</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var returned in ProductsReturned.Where(p => p.IsReturn ?? false))
                    {
                        <tr>
                            <td>@returned.Id</td>
                            <td>@GetSkuByOrderDetailId(returned.OrderDetailId)</td>
                            <td>@returned.Quantity</td>
                            <td>@returned.ReturnReason</td>
                            <td>@returned.Condition</td>
                            <td>@returned.ReturnDate.ToString("dd/MM/yyyy")</td>
                            <td>@(returned.IsReturn ?? false ? "Đổi" : "Trả")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Không có sản phẩm đổi.</p>
        }
    </div>

    <!-- Danh sách sản phẩm trả -->
    <div class="card-custom mt-4">
        <h4>Danh sách sản phẩm trả</h4>
        @if (ProductsReturned.Any(p => !(p.IsReturn ?? false)))
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Sản phẩm</th>
                        <th>Số lượng</th>
                        <th>Đơn giá</th>
                        <th>Tổng giá trả lại</th>
                        <th>Lý do trả</th>
                        <th>Tình trạng</th>
                        <th>Ngày đổi trả</th>
                        <th>Loại</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var returned in ProductsReturned.Where(p => !(p.IsReturn ?? false)))
                    {
                        <tr>
                            <td>@returned.Id</td>
                            <td>@GetSkuByOrderDetailId(returned.OrderDetailId)</td>
                            <td>@returned.Quantity</td>
                            <td>@returned.UnitPrice.ToString("C")</td> <!-- Đơn giá -->
                            <td>@returned.TotalPrice.ToString("C")</td> <!-- Tổng giá -->
                            <td>@returned.ReturnReason</td>
                            <td>@returned.Condition</td>
                            <td>@returned.ReturnDate.ToString("dd/MM/yyyy")</td>
                            <td>@(returned.IsReturn ?? false ? "Đổi" : "Trả")</td>
                        </tr>
                    }
                </tbody>
            </table>
            <h5>
                Tổng tiền trả khách:
                @{
                    try
                    {
                        // Tính tổng tiền trả khách
                        var totalRefundAmount = ProductsReturned
                        .Where(p => !(p.IsReturn ?? false)) // Đảm bảo xử lý nullable
                        .Sum(p => p.UnitPrice);
                        @totalRefundAmount.ToString("C")
                        ; // Hiển thị kết quả
                    }
                    catch (Exception ex)
                    {
                        <span class="text-danger">Lỗi: @ex.Message</span> <!-- Hiển thị lỗi -->
                    }
                }
            </h5>
        }
        else
        {
            <p>Không có sản phẩm trả.</p>
        }
    </div>


   
    <div class="row mt-4">
        <!-- Phần Địa chỉ giao hàng -->
        <div class="col-md-6 card-custom">
            <h4>Địa chỉ giao hàng</h4>
            @if (Addresses.Any())
            {
                var address = Addresses.First(); // Lấy địa chỉ đầu tiên
                <p><strong>Tên:</strong> @address.Name</p>
                <p><strong>Phường/Xã:</strong> @address.Ward_commune</p>
                <p><strong>Quận/Huyện:</strong> @address.District</p>
                <p><strong>Tỉnh/Thành phố:</strong> @address.Province_city</p>
                <p><strong>Địa chỉ cụ thể:</strong> @address.Street</p>

            }
            else
            {
                <p>Không có thông tin địa chỉ.</p>
            }
        </div>

        <!-- Phần Thông tin người dùng -->
        <div class="col-md-6 card-custom">
            <h4>Thông tin người dùng</h4>
            @if (Order.Users != null)
            {
                <p><strong>Tên người dùng:</strong> @Order.Users.Name</p>
                <p><strong>Số điện thoại:</strong> @Order.Users.Phone</p>
                <p><strong>Email:</strong> @Order.Users.Email</p>
            }
            else
            {
                <p>Không có thông tin người dùng.</p>
            }
        </div>
    </div>
    
}


<!-- Modal trả sản phẩm -->
@if (isRefundModalVisible)
{
    <div class="modal fade modal-xl show d-block" tabindex="-1" role="dialog" id="returnModal">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận trả sản phẩm</h5>
                    <button type="button" class="btn-close" @onclick="HideRefundModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>SKU</th>
                                <th>Số lượng trả</th>
                                <th>Giá</th>
                                <th>Tổng tiền</th>
                                <th>Lý do trả</th>
                                <th>Tình trạng</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detail in SelectedOrderDetails)
                            {
                                <tr>
                                    <td>@detail.Id</td>
                                    <td>@detail.ProductAttributes?.SKU </td>
                                    <td>
                                        <div class="input-group">
                                            <button type="button" class="btn btn-outline-secondary" @onclick="() => DecreaseQuantity(detail)">-</button>
                                            <span class="form-control text-center" style="width: 50px;">@detail.ReturnQuantity</span>
                                            <button type="button" class="btn btn-outline-secondary" @onclick="() => IncreaseQuantity(detail)">+</button>
                                        </div>
                                    </td>
                                    <td>@(detail.TotalDiscount.HasValue ? detail.TotalDiscount.Value.ToString("C") : detail.UnitPrice?.ToString("C") ?? "N/A")</td>
                                    <td>@CalculateRefundAmount(detail).ToString("C")</td>
                                    <td><input type="text" @bind="detail.ProductsReturned.Notes" class="form-control" placeholder="Nhập lý do" /></td>
                                    <td>
                                        <select class="form-select" @bind="(detail.ProductsReturned ??= new Products_Returned()).Condition">
                                            <option value="">Chọn trạng thái</option>
                                            <option value="Mới">Mới</option>
                                            <option value="Xem xét">Xem xét</option>
                                        </select>
                                    </td>
                                    
                                </tr>
                            }
                        </tbody>
                    </table>
                    <h5>Tổng tiền trả lại: @SelectedOrderDetails.Sum(CalculateRefundAmount).ToString("C")</h5>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideRefundModal">Đóng</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmRefund">Xác nhận trả</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isModalVisible)
{
    <div class="modal fade modal-xl show d-block" tabindex="-1" role="dialog" id="returnModal">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận đổi trả</h5>
                    <button type="button" class="btn-close" @onclick="HideReturnModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>SKU</th>
                                <th>Số lượng còn trong kho</th>
                                <th>Số lượng đổi</th>
                                <th>Lý do đổi</th>
                                <th>Tình trạng</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detail in SelectedOrderDetails)
                            {
                                <tr>
                                    <td>@detail.Id</td>
                                    <td>@detail.ProductAttributes?.SKU</td>
                                    <td>@detail.ProductAttributes?.Stock</td>
                                    <td>
                                        <div class="input-group">
                                            <button type="button" class="btn btn-outline-secondary" @onclick="() => DecreaseQuantity(detail)">-</button>
                                            <span class="form-control text-center" style="width: 50px;">@detail.ReturnQuantity</span>
                                            <button type="button" class="btn btn-outline-secondary" @onclick="() => IncreaseQuantity(detail)">+</button>
                                        </div>
                                    </td>

                                    <td>
                                        <input type="text" @bind="(detail.ProductsReturned ??= new Products_Returned()).Notes" class="form-control" />
                                    </td>
                                    <td>
                                        <select class="form-select" @bind="(detail.ProductsReturned ??= new Products_Returned()).Condition">
                                            <option value="">Chọn trạng thái</option>
                                            <option value="Mới">Mới</option>
                                            <option value="Xem xét">Xem xét</option>
                                        </select>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideReturnModal">Đóng</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmProcessReturn">Xác nhận</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public long Id { get; set; }

    private Orders? Order { get; set; }
    private List<Order_details> OrderDetails = new();
    private List<Products_Returned> ProductsReturned = new();
    private string? ErrorMessage;
    private List<Address> Addresses = new();

    private List<Order_details> SelectedOrderDetails = new();
    private bool isModalVisible = false;

    private bool isRefundModalVisible = false;
    private decimal TotalRefundAmount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetails();
    }

    private void ShowRefundModal()
    {
        SelectedOrderDetails = OrderDetails
                    .Where(od => od.IsSelected && od.Quantity > 0)
                    .Select(od =>
                    {
                        od.ProductsReturned ??= new Products_Returned
                            {
                                Condition = string.Empty,
                                Quantity = 0,
                                Notes = string.Empty
                            };
                        return od;
                    })
                    .ToList(); if (!SelectedOrderDetails.Any())
        {
            ErrorMessage = "Vui lòng chọn ít nhất một sản phẩm để trả.";
            return;
        }

        

        TotalRefundAmount = SelectedOrderDetails.Sum(CalculateRefundAmount);
        isRefundModalVisible = true;
    }

    private void HideRefundModal()
    {
        isRefundModalVisible = false;
    }

    private decimal CalculateRefundAmount(Order_details detail)
    {
        var price = detail.TotalDiscount ?? detail.UnitPrice ?? 0;
        return price * detail.ReturnQuantity;
    }

    private async Task ConfirmRefund()
    {
        try
        {
            foreach (var detail in SelectedOrderDetails)
            {
                try
                {
                    var productReturned = detail.ProductsReturned;
                    var productReturnQuantity = detail.ReturnQuantity;

                    if (productReturned == null)
                    {
                        ErrorMessage = $"Dữ liệu đổi trả không hợp lệ cho sản phẩm ID {detail.Id}.";
                        return;
                    }

                    // Kiểm tra số lượng đổi trả
                    if (productReturnQuantity <= 0 || productReturnQuantity > detail.Quantity)
                    {
                        ErrorMessage = $"Số lượng đổi trả không hợp lệ cho sản phẩm ID {detail.Id}.";
                        return;
                    }

                    // Kiểm tra lý do đổi trả
                    if (string.IsNullOrWhiteSpace(productReturned.Notes))
                    {
                        ErrorMessage = $"Vui lòng nhập lý do đổi trả cho sản phẩm ID {detail.Id}.";
                        return;
                    }

                    // Kiểm tra tình trạng
                    if (string.IsNullOrWhiteSpace(productReturned.Condition))
                    {
                        ErrorMessage = $"Vui lòng chọn tình trạng cho sản phẩm ID {detail.Id}.";
                        return;
                    }

                    // Kiểm tra xem sản phẩm đổi trả đã tồn tại chưa
                    var existingReturnedProducts = await ProductsReturnedService.GetByOrderDetailIdAsync(detail.Id);
                    // Tìm sản phẩm với trạng thái tương ứng
                    var existingProductReturned = existingReturnedProducts
                        .FirstOrDefault(p => p.Condition == productReturned.Condition && p.IsReturn == false);

                    // Nếu không tìm thấy sản phẩm có trạng thái phù hợp, tạo mới
                    if (existingProductReturned == null)
                    {
                        // Tạo mới sản phẩm đổi trả
                        productReturned.Id = 0; // Đặt ID = 0 để tạo mới
                        productReturned.OrderDetailId = detail.Id;
                        productReturned.ReturnReason = "Trả sản phẩm";
                        productReturned.IsReturn = false;
                        productReturned.UnitPrice = detail.TotalDiscount ?? detail.UnitPrice ?? 0; // Đơn giá
                        productReturned.Quantity = productReturnQuantity; // Số lượng trả
                        productReturned.TotalPrice = productReturned.UnitPrice * productReturned.Quantity; // Tổng giá trả
                        productReturned.ReturnDate = DateTime.Now;

                        var createdProductReturned = await ProductsReturnedService.CreateAsync(productReturned);
                        if (createdProductReturned != null)
                        {
                            detail.ProductsReturned = createdProductReturned;
                        }                    

                        // Cập nhật kho nếu cần
                        var processResult = await ProductsReturnedService.ProcessbackAsync(detail.ProductsReturned.Id);
                        if (!processResult)
                        {
                            ErrorMessage = $"Không thể cập nhật tồn kho cho sản phẩm ID {detail.Id}.";
                            return;
                        }
                    }
                    else
                    {
                        // Nếu tìm thấy sản phẩm có trạng thái phù hợp, cập nhật
                        existingProductReturned.Quantity += productReturnQuantity;
                        existingProductReturned.UnitPrice = detail.TotalDiscount ?? detail.UnitPrice ?? 0; // Đơn giá
                        existingProductReturned.TotalPrice = existingProductReturned.UnitPrice * existingProductReturned.Quantity; // Cập nhật tổng giá
                        existingProductReturned.Notes = $", Cập nhật số lượng trả thêm: {productReturnQuantity}";

                        var updateResult = await ProductsReturnedService.UpdateAsync(existingProductReturned);
                        if (updateResult == null)
                        {
                            ErrorMessage = $"Không thể cập nhật sản phẩm đổi trả ID {existingProductReturned.Id}.";
                            return;
                        }

                        // Cập nhật kho nếu cần
                        var processResult = await ProductsReturnedService.ProcessRefundQuantityAsync(detail.Id, productReturnQuantity);
                        if (!processResult)
                        {
                            ErrorMessage = $"Không thể cập nhật tồn kho cho sản phẩm ID {detail.Id}.";
                            return;
                        }
                    }


                }
                catch (Exception ex)
                {
                    ErrorMessage = $"Lỗi khi xử lý đổi trả cho sản phẩm ID {detail.Id}: {ex.Message}";
                    return;
                }
            }

            ErrorMessage = null;
            isRefundModalVisible = false;
            await LoadOrderDetails();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi khi xử lý trả sản phẩm: {ex.Message}";
        }
    }


    private async Task LoadOrderDetails()
    {
        try
        {
            // Lấy thông tin Order
            Order = await OrderServices.GetByIdOrders(Id);

            if (Order == null)
            {
                ErrorMessage = "Không tìm thấy hóa đơn.";
                return;
            }

            var allAddresses = await AddressService.GetAll();

            if (allAddresses != null && allAddresses.Any())
            {
                Addresses = allAddresses
                    .Where(address => address.Id == Order.Address_Id)
                    .ToList();
            }
            else
            {
                Addresses = new List<Address>();
            }

            // Lấy chi tiết hóa đơn
            OrderDetails = await OrderDetailsServices.GetOrderDetailsByOrderId(Id);

            if (OrderDetails == null || !OrderDetails.Any())
            {
                ErrorMessage = "Không tìm thấy chi tiết hóa đơn.";
                return;
            }

            // Cập nhật lại danh sách sản phẩm đổi trả trước
            ProductsReturned = new List<Products_Returned>();
            foreach (var detail in OrderDetails)
            {
                var returnedProducts = await ProductsReturnedService.GetByOrderDetailIdAsync(detail.Id);
                if (returnedProducts != null && returnedProducts.Any())
                {
                    ProductsReturned.AddRange(returnedProducts);
                }
            }

            // Gắn sản phẩm đổi trả đầu tiên vào từng chi tiết hóa đơn (nếu có)
            foreach (var detail in OrderDetails)
            {
                var returnedProduct = ProductsReturned.FirstOrDefault(rp => rp.OrderDetailId == detail.Id);
                if (returnedProduct != null)
                {
                    detail.ProductsReturned = returnedProduct;
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }


    private void ShowReturnModal()
    {
        SelectedOrderDetails = OrderDetails
            .Where(od => od.IsSelected && od.Quantity > 0)
            .Select(od =>
            {
                od.ProductsReturned ??= new Products_Returned
                    {
                        ReturnReason = string.Empty,
                        Condition = string.Empty,
                        Quantity = 0,
                        Notes = string.Empty
                    };
                return od;
            })
            .ToList();

        if (!SelectedOrderDetails.Any())
        {
            ErrorMessage = "Vui lòng chọn ít nhất một sản phẩm để đổi trả.";
            return;
        }

        isModalVisible = true;
    }


    private void HideReturnModal()
    {
        isModalVisible = false;
    }

    private void IncreaseQuantity(Order_details detail)
    {
        if (detail.ReturnQuantity < detail.Quantity)
        {
            detail.ReturnQuantity++;
        }
    }

    private void DecreaseQuantity(Order_details detail)
    {
        if (detail.ReturnQuantity > 1)
        {
            detail.ReturnQuantity--;
        }
    }


    private async Task ConfirmProcessReturn()
    {
        if (!SelectedOrderDetails.Any())
        {
            ErrorMessage = "Không có sản phẩm nào được chọn để đổi trả.";
            return;
        }

        foreach (var detail in SelectedOrderDetails)
        {
            try
            {
                var productReturned = detail.ProductsReturned;
                var productReturnQuantity = detail.ReturnQuantity;

                if (productReturned == null)
                {
                    ErrorMessage = $"Dữ liệu đổi trả không hợp lệ cho sản phẩm ID {detail.Id}.";
                    return;
                }

                // Kiểm tra số lượng đổi trả
                if (productReturnQuantity <= 0 || productReturnQuantity > detail.Quantity)
                {
                    ErrorMessage = $"Số lượng đổi trả không hợp lệ cho sản phẩm ID {detail.Id}.";
                    return;
                }

                // Kiểm tra lý do đổi trả
                if (string.IsNullOrWhiteSpace(productReturned.Notes))
                {
                    ErrorMessage = $"Vui lòng nhập lý do đổi cho sản phẩm ID {detail.Id}.";
                    return;
                }

                // Kiểm tra tình trạng
                if (string.IsNullOrWhiteSpace(productReturned.Condition))
                {
                    ErrorMessage = $"Vui lòng chọn tình trạng cho sản phẩm ID {detail.Id}.";
                    return;
                }

                // Kiểm tra xem sản phẩm đổi trả đã tồn tại chưa
                var existingReturnedProducts = await ProductsReturnedService.GetByOrderDetailIdAsync(detail.Id);
                // Tìm sản phẩm có cùng trạng thái và là đổi
                var existingProductReturned = existingReturnedProducts
                    .FirstOrDefault(p => p.Condition == productReturned.Condition && p.IsReturn == true);

                // Nếu không tìm thấy sản phẩm có trạng thái phù hợp, tạo mới
                if (existingProductReturned == null)
                {
                    productReturned.Id = 0; // Đặt ID = 0 để tạo mới
                    productReturned.OrderDetailId = detail.Id;
                    productReturned.ReturnReason = "Đổi sản phẩm";
                    productReturned.IsReturn = true;
                    productReturned.UnitPrice = 0; // Đổi sản phẩm không tính giá trị
                    productReturned.ReturnDate = DateTime.Now;
                    productReturned.Quantity = productReturnQuantity;

                    var createdProductReturned = await ProductsReturnedService.CreateAsync(productReturned);
                    if (createdProductReturned != null)
                    {
                        detail.ProductsReturned = createdProductReturned;
                    }

                    // Cập nhật kho nếu cần
                    var processResult = await ProductsReturnedService.ProcessReturnAsync(detail.ProductsReturned.Id);
                    if (!processResult)
                    {
                        ErrorMessage = $"Không thể cập nhật tồn kho cho sản phẩm ID {detail.Id}.";
                        return;
                    }
                }
                else
                {
                    // Nếu tìm thấy sản phẩm có trạng thái phù hợp, cập nhật
                    existingProductReturned.Quantity += productReturnQuantity;
                    existingProductReturned.Notes = $", Cập nhật số lượng đổi: {productReturnQuantity}";

                    var updateResult = await ProductsReturnedService.UpdateAsync(existingProductReturned);
                    if (updateResult == null)
                    {
                        ErrorMessage = $"Không thể cập nhật sản phẩm đổi trả ID {existingProductReturned.Id}.";
                        return;
                    }

                    // Cập nhật tồn kho cho sản phẩm đổi
                    var processResult = await ProductsReturnedService.ProcessReturnQuantityAsync(detail.Id, productReturnQuantity);
                    if (!processResult)
                    {
                        ErrorMessage = $"Không thể cập nhật tồn kho cho sản phẩm ID {detail.Id}.";
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Lỗi khi xử lý đổi trả cho sản phẩm ID {detail.Id}: {ex.Message}";
                return;
            }
        }

        ErrorMessage = null;
        isModalVisible = false;
        await LoadOrderDetails();
        StateHasChanged();
    }




    // private async Task ConfirmProcessReturn()
    // {
    //     if (!SelectedOrderDetails.Any())
    //     {
    //         ErrorMessage = "Không có sản phẩm nào được chọn để đổi trả.";
    //         return;
    //     }

    //     foreach (var detail in SelectedOrderDetails)
    //     {
    //         try
    //         {
    //             var productReturned = detail.ProductsReturned;
    //             var productReturnQuantity = detail.ReturnQuantity;

    //             if (productReturned == null)
    //             {
    //                 ErrorMessage = $"Dữ liệu đổi trả không hợp lệ cho sản phẩm ID {detail.Id}.";
    //                 return;
    //             }

    //             // Kiểm tra số lượng đổi trả
    //             if (productReturnQuantity <= 0 || productReturnQuantity > detail.Quantity)
    //             {
    //                 ErrorMessage = $"Số lượng đổi trả không hợp lệ cho sản phẩm ID {detail.Id}.";
    //                 return;
    //             }

    //             // Kiểm tra lý do đổi trả
    //             if (string.IsNullOrWhiteSpace(productReturned.Notes))
    //             {
    //                 ErrorMessage = $"Vui lòng nhập lý do đổi cho sản phẩm ID {detail.Id}.";
    //                 return;
    //             }

    //             // Kiểm tra tình trạng
    //             if (string.IsNullOrWhiteSpace(productReturned.Condition))
    //             {
    //                 ErrorMessage = $"Vui lòng chọn tình trạng cho sản phẩm ID {detail.Id}.";
    //                 return;
    //             }

     
    //             // Kiểm tra xem sản phẩm đổi trả đã tồn tại chưa
    //             var existingReturnedProducts = await ProductsReturnedService.GetByOrderDetailIdAsync(detail.Id);
    //             var existingProductReturned = existingReturnedProducts.FirstOrDefault();

    //             if (existingProductReturned != null && existingProductReturned.IsReturn == true && existingProductReturned.Condition == productReturned.Condition)
    //             {
    //                 // Cập nhật số lượng sản phẩm trả
    //                 existingProductReturned.Quantity = productReturnQuantity;
    //                 existingProductReturned.Notes += $"\nCập nhật số lượng đổi trả: {productReturnQuantity}";

    //                 var updateResult = await ProductsReturnedService.UpdateAsync(existingProductReturned);

    //                 if (updateResult == null)
    //                 {
    //                     ErrorMessage = $"Không thể cập nhật sản phẩm đổi trả ID {existingProductReturned.Id}.";
    //                     return;
    //                 }

    //                 // Cập nhật số lượng tồn kho trong OrderDetail
    //                 var processResult = await ProductsReturnedService.ProcessReturnQuantityAsync(detail.Id, productReturnQuantity);
    //                 if (!processResult)
    //                 {
    //                     ErrorMessage = $"Không thể cập nhật tồn kho cho sản phẩm ID {detail.Id}.";
    //                     return;
    //                 }
    //             }

    //             else
    //             {
    //                 // Nếu không tồn tại, tạo mới
    //                 productReturned.Id = 0;
    //                 productReturned.OrderDetailId = detail.Id;
    //                 productReturned.ReturnReason = "Đổi sản phẩm";
    //                 productReturned.IsReturn = true;
    //                 productReturned.UnitPrice = 0;
    //                 productReturned.ReturnDate = DateTime.Now;
    //                 productReturned.Quantity = productReturnQuantity;

    //                 var createdProductReturned = await ProductsReturnedService.CreateAsync(productReturned);
    //                 if (createdProductReturned != null)
    //                 {
    //                     detail.ProductsReturned = createdProductReturned;
    //                 }

    //                 // Cập nhật SP trong Order và Tồn kho
    //                 var processResult = await ProductsReturnedService.ProcessReturnAsync(detail.ProductsReturned.Id);
    //                 if (!processResult)
    //                 {
    //                     ErrorMessage = $"Không thể cập nhật tồn kho cho sản phẩm ID {detail.Id}.";
    //                     return;
    //                 }

    //             }

    //         }
    //         catch (Exception ex)
    //         {
    //             ErrorMessage = $"Lỗi khi xử lý đổi trả cho sản phẩm ID {detail.Id}: {ex.Message}";
    //             return;
    //         }
    //     }

    //     ErrorMessage = null;
    //     isModalVisible = false;
    //     await LoadOrderDetails();
    //     StateHasChanged();
    // }



    private async Task LoadProductsReturned()
    {
        try
        {
            var tempProductsReturned = new List<Products_Returned>();

            foreach (var detail in OrderDetails)
            {
                var returnedProducts = await ProductsReturnedService.GetByOrderDetailIdAsync(detail.Id);
                if (returnedProducts != null && returnedProducts.Any())
                {
                    // Tạo bản sao cho từng sản phẩm
                    tempProductsReturned.AddRange(returnedProducts.Select(r => new Products_Returned
                        {
                            Id = r.Id,
                            OrderDetailId = r.OrderDetailId,
                            Quantity = r.Quantity,
                            Notes = r.Notes,
                            Condition = r.Condition,
                            IsReturn = r.IsReturn,
                            UnitPrice = r.UnitPrice,
                            ReturnReason = r.ReturnReason,
                            ReturnDate = r.ReturnDate
                        }));
                }
            }

            ProductsReturned = tempProductsReturned;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi khi tải danh sách đổi trả: {ex.Message}";
        }
    }





    private string GetSkuByOrderDetailId(long orderDetailId)
    {
        var detail = OrderDetails.FirstOrDefault(od => od.Id == orderDetailId);
        if (detail == null || detail.ProductAttributes == null)
        {
            return "N/A";
        }

        // Ghép chuỗi bao gồm SKU, Color, và Size
        var sku = detail.ProductAttributes.SKU ?? "N/A";
        var color = detail.ProductAttributes.Color?.Title ?? "N/A"; // Sửa để lấy tiêu đề màu
        var size = detail.ProductAttributes.Size?.Title ?? "N/A"; // Sửa để lấy tiêu đề size

        return $"{sku} - {color} - {size}";
    }


  
 

}
