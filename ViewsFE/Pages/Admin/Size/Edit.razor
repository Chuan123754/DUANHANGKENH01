@page "/admin/size/edit/{id:long}"
@inject NavigationManager nav
@inject ISizeServices sev
@inject IJSRuntime JS

<EditForm Model="size" OnValidSubmit="SubmitForm" FormName="sizeadd">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="page-wrapper">
        <div class="page-header d-print-none">
            <div class="container-xl">
                <div class="row g-2 align-items-center">
                    <div class="col">
                        <h2 class="page-title">
                            Sửa kích thước
                        </h2>
                    </div>
                </div>
            </div>
        </div>
        <div class="page-body">
            <div class="container-xl">
                <div class="row">
                    <div class="col-md-12 col-12">
                        <div class="card">
                            <div class="card-body">

                                <div class="form-group mb-3">
                                    <label for="material-title" class="form-label">Tiêu đề <span class="text-danger">*</span></label>
                                    <InputText id="material-title" class="form-control" @bind-Value="size.Title" @oninput="GenerateSlug" />
                                    <ValidationMessage For="@(() => size.Title)" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="attribute-slug" class="form-label">Đường dẫn</label>
                                    <InputText id="attribute-slug" class="form-control" @bind-Value="size.Slug" />
                                    <small class="text-gray-100">“slug” là đường dẫn thân thiện của tên. Nó thường chỉ bao gồm kí tự viết thường, số và dấu gạch ngang, không dùng tiếng Việt.</small>
                                    <ValidationMessage For="@(() => size.Slug)" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="attribute-color" class="form-label">Mô tả</label>
                                    <InputText id="attribute-color" class="form-control" @bind-Value="size.Description" />
                                </div>

                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary" style="float: right">
                                        Sửa kích thước
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public long Id { get; set; }
    private Size size = new Size();
    protected async override Task OnInitializedAsync()
    {
        size = await sev.Details(Id);
    }
    private void GenerateSlug(ChangeEventArgs e)
    {
        if (e.Value is string title && !string.IsNullOrWhiteSpace(title))
        {
            size.Slug = CreateSlug(title);
        }
    }

    private string CreateSlug(string input)
    {
        // Chuyển sang chữ thường
        string result = input.ToLowerInvariant();

        // Loại bỏ dấu tiếng Việt
        result = RemoveDiacritics(result);

        // Loại bỏ ký tự không phải chữ/số và thay thế khoảng trắng bằng dấu gạch ngang
        result = System.Text.RegularExpressions.Regex.Replace(result, @"[^a-z0-9\s-]", "");
        result = System.Text.RegularExpressions.Regex.Replace(result, @"\s+", "-").Trim('-');

        return result;
    }

    private string RemoveDiacritics(string text)
    {
        var normalized = text.Normalize(System.Text.NormalizationForm.FormD);
        var stringBuilder = new System.Text.StringBuilder();
        foreach (var c in normalized)
        {
            var unicodeCategory = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
            if (unicodeCategory != System.Globalization.UnicodeCategory.NonSpacingMark)
            {
                stringBuilder.Append(c);
            }
        }
        return stringBuilder.ToString().Normalize(System.Text.NormalizationForm.FormC);
    }
    private async Task SubmitForm()
    {
        try
        {
            await sev.Update(size); // Gọi API để tạo thuộc tính
            await JS.InvokeVoidAsync("toastr.success", "Kích thước đã được sửa thành công"); // Hiển thị thông báo thành công
            nav.NavigateTo("/admin/size"); // Điều hướng sau khi thành công
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            await JS.InvokeVoidAsync("toastr.error", "Không thể sửa kích thước. Vui lòng thử lại."); // Hiển thị thông báo lỗi
        }
    }
}